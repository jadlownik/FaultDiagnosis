From: <Saved by Blink>
Snapshot-Content-Location: https://platform.openai.com/playground/assistants?assistant=asst_P4AcxEyxYF4NjkeNg4rzczc7&thread=thread_w2V0P3dCwHIEDQdADnMa4Z2p
Subject: Assistants Playground - OpenAI API
Date: Mon, 12 Aug 2024 21:49:58 +0200
MIME-Version: 1.0
Content-Type: multipart/related;
	type="text/html";
	boundary="----MultipartBoundary--PgNM4SiMWaLkxzj6oY7Q8DPIEjAagNM0CL6X4tuFha----"


------MultipartBoundary--PgNM4SiMWaLkxzj6oY7Q8DPIEjAagNM0CL6X4tuFha----
Content-Type: text/html
Content-ID: <frame-170AC426318EADC7BB161702336AEEEF@mhtml.blink>
Content-Transfer-Encoding: quoted-printable
Content-Location: https://platform.openai.com/playground/assistants?assistant=asst_P4AcxEyxYF4NjkeNg4rzczc7&thread=thread_w2V0P3dCwHIEDQdADnMa4Z2p

<!DOCTYPE html><html lang=3D"en" style=3D"color-scheme: dark;"><head><meta =
http-equiv=3D"Content-Type" content=3D"text/html; charset=3DUTF-8"><link re=
l=3D"stylesheet" type=3D"text/css" href=3D"cid:css-da7b1e51-06f2-4544-9e81-=
171550453d07@mhtml.blink" /><link rel=3D"stylesheet" type=3D"text/css" href=
=3D"cid:css-0a83b9c0-0096-479d-922f-266f0305ecf1@mhtml.blink" /><link rel=
=3D"stylesheet" type=3D"text/css" href=3D"cid:css-2ffd352b-510a-4f44-bd4e-7=
f0c40b346e3@mhtml.blink" /><link rel=3D"stylesheet" type=3D"text/css" href=
=3D"cid:css-79b730a2-a656-48c5-8787-133b938df4f6@mhtml.blink" />
       =20
        <link rel=3D"icon" type=3D"image/svg+xml" href=3D"https://platform.=
openai.com/favicon.svg">
        <link rel=3D"icon" type=3D"image/png" href=3D"https://platform.open=
ai.com/favicon.png">
        <link rel=3D"mask-icon" href=3D"https://platform.openai.com/mask-ic=
on.svg" color=3D"#000000">
        <link rel=3D"preconnect" href=3D"https://cdn.openai.com/">
        <link rel=3D"preconnect" href=3D"https://fonts.googleapis.com/">
        <link rel=3D"preconnect" href=3D"https://fonts.gstatic.com/" crosso=
rigin=3D"">
        <link rel=3D"preconnect" href=3D"https://owz3qoiija-dsn.algolia.net=
/" crossorigin=3D"">
        <link href=3D"https://fonts.googleapis.com/css2?family=3DRoboto+Mon=
o:wght@400;700&amp;display=3Dswap" rel=3D"stylesheet">
        <meta name=3D"viewport" content=3D"width=3Ddevice-width, initial-sc=
ale=3D1">
        <meta name=3D"theme-color" content=3D"#000000">
        <title>Assistants Playground - OpenAI API</title>
        <meta name=3D"description" content=3D"Explore resources, tutorials,=
 API docs, and dynamic examples to get the most out of OpenAI's developer p=
latform.">
        <link rel=3D"manifest" href=3D"https://platform.openai.com/manifest=
.json">

        <!-- Facebook / LinkedIn Meta Tags -->
        <meta property=3D"og:title" content=3D"OpenAI Platform">
        <meta property=3D"og:image" content=3D"https://cdn.openai.com/API/i=
mages/opengraph.png">
        <meta property=3D"og:description" content=3D"Explore developer reso=
urces, tutorials, API docs, and dynamic examples to get the most out of Ope=
nAI's platform.">
        <meta property=3D"og:type" content=3D"website">
        <meta property=3D"og:url" content=3D"https://platform.openai.com">

        <!-- Twitter Meta Tags -->
        <meta name=3D"twitter:card" content=3D"summary_large_image">
        <meta property=3D"twitter:domain" content=3D"platform.openai.com">
        <meta property=3D"twitter:url" content=3D"https://platform.openai.c=
om">
        <meta name=3D"twitter:title" content=3D"OpenAI Platform">
        <meta name=3D"twitter:description" content=3D"Explore developer res=
ources, tutorials, API docs, and dynamic examples to get the most out of Op=
enAI's platform.">
        <meta name=3D"twitter:image" content=3D"https://cdn.openai.com/API/=
images/opengraph.png">
     =20
      <link rel=3D"stylesheet" crossorigin=3D"" href=3D"https://platform.op=
enai.com/static/C3Xoh84X2h.css">
     =20
     =20
    <link rel=3D"modulepreload" as=3D"script" crossorigin=3D"" href=3D"http=
s://platform.openai.com/static/nAkY_f0tHs.js"><link rel=3D"modulepreload" a=
s=3D"script" crossorigin=3D"" href=3D"https://platform.openai.com/static/Dm=
Z24kTVW1.js"><link rel=3D"stylesheet" href=3D"https://platform.openai.com/s=
tatic/9dWNNV5ZwJ.css"><link rel=3D"modulepreload" as=3D"script" crossorigin=
=3D"" href=3D"https://platform.openai.com/static/Bjgn7hrBu1.js"><link rel=
=3D"modulepreload" as=3D"script" crossorigin=3D"" href=3D"https://platform.=
openai.com/static/29oi6lZEpn.js"><link rel=3D"modulepreload" as=3D"script" =
crossorigin=3D"" href=3D"https://platform.openai.com/static/BJAOQhh7-P.js">=
<link rel=3D"modulepreload" as=3D"script" crossorigin=3D"" href=3D"https://=
platform.openai.com/static/CROQMvUaYQ.js"><link rel=3D"modulepreload" as=3D=
"script" crossorigin=3D"" href=3D"https://platform.openai.com/static/By1Yzk=
IV7I.js"><link rel=3D"modulepreload" as=3D"script" crossorigin=3D"" href=3D=
"https://platform.openai.com/static/Si01w2rIuG.js"><link rel=3D"moduleprelo=
ad" as=3D"script" crossorigin=3D"" href=3D"https://platform.openai.com/stat=
ic/DmBXDnJQ3D.js"><link rel=3D"modulepreload" as=3D"script" crossorigin=3D"=
" href=3D"https://platform.openai.com/static/30OYNAq5Q-.js"><link rel=3D"mo=
dulepreload" as=3D"script" crossorigin=3D"" href=3D"https://platform.openai=
.com/static/z74Jg5cY62.js"><link rel=3D"modulepreload" as=3D"script" crosso=
rigin=3D"" href=3D"https://platform.openai.com/static/l7PQ9kbB1p.js"><link =
rel=3D"modulepreload" as=3D"script" crossorigin=3D"" href=3D"https://platfo=
rm.openai.com/static/DRundq4sNA.js"><link rel=3D"modulepreload" as=3D"scrip=
t" crossorigin=3D"" href=3D"https://platform.openai.com/static/BQPh3-HmOz.j=
s"><link rel=3D"modulepreload" as=3D"script" crossorigin=3D"" href=3D"https=
://platform.openai.com/static/BlfjJVEqH-.js"><link rel=3D"modulepreload" as=
=3D"script" crossorigin=3D"" href=3D"https://platform.openai.com/static/CMb=
5S19x98.js"><link rel=3D"modulepreload" as=3D"script" crossorigin=3D"" href=
=3D"https://platform.openai.com/static/nNLb_XEFIC.js"><link rel=3D"modulepr=
eload" as=3D"script" crossorigin=3D"" href=3D"https://platform.openai.com/s=
tatic/12y-TTW1MK.js"><link rel=3D"modulepreload" as=3D"script" crossorigin=
=3D"" href=3D"https://platform.openai.com/static/BKZQRQcNvX.js"><link rel=
=3D"stylesheet" href=3D"https://platform.openai.com/static/De_M7uH0yx.css">=
<link rel=3D"modulepreload" as=3D"script" crossorigin=3D"" href=3D"https://=
platform.openai.com/static/DdOw3bSMSg.js"><link rel=3D"modulepreload" as=3D=
"script" crossorigin=3D"" href=3D"https://platform.openai.com/static/ZYP3cb=
3tzk.js"><link rel=3D"modulepreload" as=3D"script" crossorigin=3D"" href=3D=
"https://platform.openai.com/static/Dw1KJ-XEyb.js"><link rel=3D"moduleprelo=
ad" as=3D"script" crossorigin=3D"" href=3D"https://platform.openai.com/stat=
ic/CokAfD2ot6.js"><link rel=3D"stylesheet" href=3D"https://platform.openai.=
com/static/BxCTKkk_aX.css"><link rel=3D"modulepreload" as=3D"script" crosso=
rigin=3D"" href=3D"https://platform.openai.com/static/DLvwtFmxtd.js"><link =
rel=3D"modulepreload" as=3D"script" crossorigin=3D"" href=3D"https://platfo=
rm.openai.com/static/D8o_ahc0Mu.js"><link rel=3D"modulepreload" as=3D"scrip=
t" crossorigin=3D"" href=3D"https://platform.openai.com/static/Co55_aWQFC.j=
s"><link rel=3D"modulepreload" as=3D"script" crossorigin=3D"" href=3D"https=
://platform.openai.com/static/DU3VH_4Dq6.js"><link rel=3D"modulepreload" as=
=3D"script" crossorigin=3D"" href=3D"https://platform.openai.com/static/BGG=
9D7wl33.js"><link rel=3D"stylesheet" href=3D"https://platform.openai.com/st=
atic/Dhy7yJcvdn.css"><link rel=3D"modulepreload" as=3D"script" crossorigin=
=3D"" href=3D"https://platform.openai.com/static/EvvtrlMCMq.js"><link rel=
=3D"modulepreload" as=3D"script" crossorigin=3D"" href=3D"https://platform.=
openai.com/static/C3X1Uzhb-o.js"><link rel=3D"modulepreload" as=3D"script" =
crossorigin=3D"" href=3D"https://platform.openai.com/static/CMlFq9KG3W.js">=
<link rel=3D"stylesheet" href=3D"https://platform.openai.com/static/Dl0ATMO=
y-l.css"><link rel=3D"modulepreload" as=3D"script" crossorigin=3D"" href=3D=
"https://platform.openai.com/static/DSYaeUbWx8.js"><link rel=3D"moduleprelo=
ad" as=3D"script" crossorigin=3D"" href=3D"https://platform.openai.com/stat=
ic/DcCwqmBUMk.js"><link rel=3D"stylesheet" href=3D"https://platform.openai.=
com/static/BlOpu6IRE9.css"><link rel=3D"modulepreload" as=3D"script" crosso=
rigin=3D"" href=3D"https://platform.openai.com/static/rPYloAR-5O.js"><link =
rel=3D"stylesheet" href=3D"https://platform.openai.com/static/fih_D3fOGc.cs=
s"><link rel=3D"modulepreload" as=3D"script" crossorigin=3D"" href=3D"https=
://platform.openai.com/static/DewFPJsLDr.js"><link rel=3D"modulepreload" as=
=3D"script" crossorigin=3D"" href=3D"https://platform.openai.com/static/gqX=
zIqkIxE.js"><link rel=3D"stylesheet" href=3D"https://platform.openai.com/st=
atic/BefcMRU_eu.css"><link rel=3D"modulepreload" as=3D"script" crossorigin=
=3D"" href=3D"https://platform.openai.com/static/D48GEpUova.js"><link rel=
=3D"stylesheet" href=3D"https://platform.openai.com/static/DqyyrKcaOP.css">=
<link rel=3D"modulepreload" as=3D"script" crossorigin=3D"" href=3D"https://=
platform.openai.com/static/CxlWtM19HD.js"><link rel=3D"stylesheet" href=3D"=
https://platform.openai.com/static/D8hJLtCru3.css"><link rel=3D"moduleprelo=
ad" as=3D"script" crossorigin=3D"" href=3D"https://platform.openai.com/stat=
ic/ClBaHCCLDo.js"><link rel=3D"modulepreload" as=3D"script" crossorigin=3D"=
" href=3D"https://platform.openai.com/static/Vcq4gwWvE_.js"><link rel=3D"mo=
dulepreload" as=3D"script" crossorigin=3D"" href=3D"https://platform.openai=
.com/static/DVRATb-QXH.js"><link rel=3D"modulepreload" as=3D"script" crosso=
rigin=3D"" href=3D"https://platform.openai.com/static/Bt-qPZvJgI.js"><link =
rel=3D"modulepreload" as=3D"script" crossorigin=3D"" href=3D"https://platfo=
rm.openai.com/static/DCE2ITUquM.js"><link rel=3D"stylesheet" href=3D"https:=
//platform.openai.com/static/CkLNg_KT7M.css"><link rel=3D"modulepreload" as=
=3D"script" crossorigin=3D"" href=3D"https://platform.openai.com/static/W35=
KBvmkZt.js"><link rel=3D"modulepreload" as=3D"script" crossorigin=3D"" href=
=3D"https://platform.openai.com/static/CKLaUVLfSP.js"><link rel=3D"styleshe=
et" href=3D"https://platform.openai.com/static/ClMWlNVw6I.css"><link rel=3D=
"modulepreload" as=3D"script" crossorigin=3D"" href=3D"https://platform.ope=
nai.com/static/Dc5peVFTGc.js"><link rel=3D"modulepreload" as=3D"script" cro=
ssorigin=3D"" href=3D"https://platform.openai.com/static/BPQiLbr7_e.js"><li=
nk rel=3D"stylesheet" href=3D"https://platform.openai.com/static/n_kD_qxQv4=
.css"><link rel=3D"stylesheet" href=3D"https://platform.openai.com/static/B=
yLAYaBHjX.css"><link rel=3D"modulepreload" as=3D"script" crossorigin=3D"" h=
ref=3D"https://platform.openai.com/static/Blx9ZeMyqL.js"><link rel=3D"modul=
epreload" as=3D"script" crossorigin=3D"" href=3D"https://platform.openai.co=
m/static/DyUXb3qDEG.js"><link rel=3D"stylesheet" href=3D"https://platform.o=
penai.com/static/BXOTrjUPKH.css"></head>
    <body class=3D"dark" data-theme=3D"dark">
       =20
        <div id=3D"root"><div class=3D"hDvly"><div class=3D"vpev1"><div cla=
ss=3D"_5Amyn"><button id=3D"select-trigger-radix-:r0:" type=3D"button" clas=
s=3D"ICo9Y" data-variant=3D"bare" data-size=3D"lg" data-gutter-size=3D"sm" =
aria-haspopup=3D"dialog" aria-expanded=3D"false" aria-controls=3D"radix-:rq=
:" data-state=3D"closed"><span class=3D"RWOJJ"><span class=3D"flex items-ce=
nter gap-2 font-medium"><span class=3D"qCm0E" role=3D"presentation" data-va=
riant=3D"dark" style=3D"--avatar-size: 25px; --avatar-initial-nudge: 0px;">=
<div class=3D"_9uyMP">P</div></span>Personal</span></span><div class=3D"rel=
ative flex items-center gap-2"><svg width=3D"8" height=3D"11" viewBox=3D"0 =
0 10 16" fill=3D"currentColor" xmlns=3D"http://www.w3.org/2000/svg" class=
=3D"uF-Qb"><path fill-rule=3D"evenodd" clip-rule=3D"evenodd" d=3D"M4.34151 =
0.747423C4.71854 0.417526 5.28149 0.417526 5.65852 0.747423L9.65852 4.24742=
C10.0742 4.61111 10.1163 5.24287 9.75259 5.6585C9.38891 6.07414 8.75715 6.1=
1626 8.34151 5.75258L5.00001 2.82877L1.65852 5.75258C1.24288 6.11626 0.6111=
2 6.07414 0.247438 5.6585C-0.116244 5.24287 -0.0741267 4.61111 0.34151 4.24=
742L4.34151 0.747423ZM0.246065 10.3578C0.608879 9.94139 1.24055 9.89795 1.6=
5695 10.2608L5.00001 13.1737L8.34308 10.2608C8.75948 9.89795 9.39115 9.9413=
9 9.75396 10.3578C10.1168 10.7742 10.0733 11.4058 9.65695 11.7687L5.65695 1=
5.2539C5.28043 15.582 4.7196 15.582 4.34308 15.2539L0.343082 11.7687C-0.073=
3128 11.4058 -0.116749 10.7742 0.246065 10.3578Z"></path></svg></div></butt=
on><div class=3D"u-pgg">/</div><button id=3D"select-trigger-radix-:r2:" typ=
e=3D"button" class=3D"ICo9Y" data-variant=3D"bare" data-size=3D"lg" data-gu=
tter-size=3D"sm" aria-haspopup=3D"dialog" aria-expanded=3D"false" aria-cont=
rols=3D"radix-:r3:" data-state=3D"closed"><span class=3D"RWOJJ"><span class=
=3D"font-medium" style=3D"color: var(--text-default);">Select...</span></sp=
an><div class=3D"relative flex items-center gap-2"><svg width=3D"8" height=
=3D"11" viewBox=3D"0 0 10 16" fill=3D"currentColor" xmlns=3D"http://www.w3.=
org/2000/svg" class=3D"uF-Qb"><path fill-rule=3D"evenodd" clip-rule=3D"even=
odd" d=3D"M4.34151 0.747423C4.71854 0.417526 5.28149 0.417526 5.65852 0.747=
423L9.65852 4.24742C10.0742 4.61111 10.1163 5.24287 9.75259 5.6585C9.38891 =
6.07414 8.75715 6.11626 8.34151 5.75258L5.00001 2.82877L1.65852 5.75258C1.2=
4288 6.11626 0.61112 6.07414 0.247438 5.6585C-0.116244 5.24287 -0.0741267 4=
.61111 0.34151 4.24742L4.34151 0.747423ZM0.246065 10.3578C0.608879 9.94139 =
1.24055 9.89795 1.65695 10.2608L5.00001 13.1737L8.34308 10.2608C8.75948 9.8=
9795 9.39115 9.94139 9.75396 10.3578C10.1168 10.7742 10.0733 11.4058 9.6569=
5 11.7687L5.65695 15.2539C5.28043 15.582 4.7196 15.582 4.34308 15.2539L0.34=
3082 11.7687C-0.0733128 11.4058 -0.116749 10.7742 0.246065 10.3578Z"></path=
></svg></div></button></div></div><div class=3D"Aip-a"><nav class=3D"okBd0"=
><a aria-current=3D"page" class=3D"w9s17 _1T-tk" data-primary-nav-item=3D""=
 href=3D"https://platform.openai.com/playground"><span class=3D"EsOWR vaD2P=
" data-title=3D"Playground">Playground</span><span class=3D"EsOWR ksWxL" da=
ta-title=3D"Playground">Playground</span></a><a class=3D"w9s17" data-primar=
y-nav-item=3D"" href=3D"https://platform.openai.com/assistants"><span class=
=3D"EsOWR vaD2P" data-title=3D"Dashboard">Dashboard</span><span class=3D"Es=
OWR ksWxL" data-title=3D"Dashboard">Dashboard</span></a><a class=3D"w9s17" =
data-primary-nav-item=3D"" href=3D"https://platform.openai.com/docs"><span =
class=3D"EsOWR vaD2P" data-title=3D"Docs">Docs</span><span class=3D"EsOWR k=
sWxL" data-title=3D"Docs">Docs</span></a><a class=3D"w9s17" data-primary-na=
v-item=3D"" href=3D"https://platform.openai.com/docs/api-reference/introduc=
tion"><span class=3D"EsOWR vaD2P" data-title=3D"API reference">API referenc=
e</span><span class=3D"EsOWR ksWxL" data-title=3D"API">API</span></a></nav>=
<a class=3D"nav-item KAMRO" href=3D"https://platform.openai.com/settings"><=
svg xmlns=3D"http://www.w3.org/2000/svg" width=3D"1em" height=3D"1em" fill=
=3D"currentColor" viewBox=3D"0 0 24 24" aria-haspopup=3D"true" aria-expande=
d=3D"false"><path fill-rule=3D"evenodd" d=3D"M11.568 3.5a1 1 0 0 0-.863.494=
l-.811 1.381A3.001 3.001 0 0 1 7.33 6.856l-1.596.013a1 1 0 0 0-.858.501l-.4=
39.761a1 1 0 0 0-.004.992l.792 1.4a3 3 0 0 1 0 2.954l-.792 1.4a1 1 0 0 0 .0=
04.992l.439.76a1 1 0 0 0 .858.502l1.596.013a3 3 0 0 1 2.564 1.48l.811 1.382=
a1 1 0 0 0 .863.494h.87a1 1 0 0 0 .862-.494l.812-1.381a3.001 3.001 0 0 1 2.=
563-1.481l1.596-.013a1 1 0 0 0 .86-.501l.438-.761a1 1 0 0 0 .004-.992l-.793=
-1.4a3 3 0 0 1 0-2.954l.793-1.4a1 1 0 0 0-.004-.992l-.439-.76a1 1 0 0 0-.85=
8-.502l-1.597-.013a3 3 0 0 1-2.563-1.48L13.3 3.993a1 1 0 0 0-.862-.494h-.87=
ZM8.98 2.981A3.001 3.001 0 0 1 11.568 1.5h.87c1.064 0 2.049.564 2.588 1.481=
l.811 1.382a1 1 0 0 0 .855.494l1.596.013a3 3 0 0 1 2.575 1.502l.44.76a3 3 0=
 0 1 .011 2.975l-.792 1.4a1 1 0 0 0 0 .985l.792 1.401a3 3 0 0 1-.012 2.974l=
-.439.761a3.001 3.001 0 0 1-2.575 1.503l-1.597.012a1 1 0 0 0-.854.494l-.811=
 1.382a3.001 3.001 0 0 1-2.588 1.481h-.87a3.001 3.001 0 0 1-2.588-1.481l-.8=
11-1.382a1 1 0 0 0-.855-.494l-1.596-.012a3.001 3.001 0 0 1-2.576-1.503l-.43=
8-.76a3 3 0 0 1-.013-2.975l.793-1.4a1 1 0 0 0 0-.985l-.793-1.4a3 3 0 0 1 .0=
13-2.975l.438-.761A3.001 3.001 0 0 1 5.718 4.87l1.596-.013a1 1 0 0 0 .855-.=
494l.81-1.382Z" clip-rule=3D"evenodd"></path><path fill-rule=3D"evenodd" d=
=3D"M12.003 10.5a1.5 1.5 0 1 0 0 3 1.5 1.5 0 0 0 0-3ZM8.502 12a3.5 3.5 0 1 =
1 7 .001 3.5 3.5 0 0 1-7-.001Z" clip-rule=3D"evenodd"></path></svg></a><div=
 class=3D"LwKwt"><button class=3D"jYGOC" type=3D"button" id=3D"radix-:rr:" =
aria-haspopup=3D"menu" aria-expanded=3D"false" data-state=3D"closed"><span =
class=3D"qCm0E" role=3D"presentation" data-variant=3D"light"><div class=3D"=
_8ufcO"><img src=3D"https://lh3.googleusercontent.com/a/ACg8ocKMevoGbbuUH7U=
LHFj8fnqjxu73L4vvb73KEJCDOvJFWhgjzQ=3Ds96-c" class=3D"mImKu" alt=3D"" role=
=3D"presentation" data-loaded=3D""></div></span></button></div></div></div>=
<main class=3D"unjkE" data-sidebar=3D"expanded" data-mobile-menu=3D"hidden"=
><aside class=3D"EpwGB"><div class=3D"GVIPA"><div class=3D"-jCTM"><div clas=
s=3D"sXRUo"><div class=3D"bSX-Q"><div class=3D"YfuCO"><div class=3D"aTuAl" =
data-sidebar-collapsible=3D""><div class=3D"_0MyKb qyrrQ"><button type=3D"b=
utton" class=3D"iCKi8 FDGXZ"><span class=3D"_1h-SG"><span class=3D"-k7Gw"><=
svg xmlns=3D"http://www.w3.org/2000/svg" width=3D"20px" height=3D"20px" fil=
l=3D"currentColor" viewBox=3D"0 0 24 24"><path fill-rule=3D"evenodd" d=3D"M=
6 5a1 1 0 0 0-1 1v12a1 1 0 0 0 1 1h2V5H6Zm4 0v14h8a1 1 0 0 0 1-1V6a1 1 0 0 =
0-1-1h-8ZM3 6a3 3 0 0 1 3-3h12a3 3 0 0 1 3 3v12a3 3 0 0 1-3 3H6a3 3 0 0 1-3=
-3V6Z" clip-rule=3D"evenodd"></path></svg></span><span class=3D"_9EWJR">Pla=
yground</span></span></button></div><div class=3D"DH-HY qyrrQ"><a class=3D"=
-ySo1 FDGXZ" aria-haspopup=3D"true" aria-expanded=3D"false" href=3D"https:/=
/platform.openai.com/playground/chat"><span class=3D"_1h-SG"><span class=3D=
"-k7Gw"><svg xmlns=3D"http://www.w3.org/2000/svg" width=3D"1em" height=3D"1=
em" fill=3D"currentColor" viewBox=3D"0 0 24 24"><path fill-rule=3D"evenodd"=
 d=3D"M12 4a8 8 0 0 0-5.687 13.627 1 1 0 0 1 .147 1.217L5.766 20H12a8 8 0 1=
 0 0-16ZM2 12C2 6.477 6.477 2 12 2s10 4.477 10 10-4.477 10-10 10H4a1 1 0 0 =
1-.857-1.515l1.218-2.03A9.964 9.964 0 0 1 2 12Z" clip-rule=3D"evenodd"></pa=
th><path d=3D"M9.25 12a1.25 1.25 0 1 1-2.5 0 1.25 1.25 0 0 1 2.5 0Zm4 0a1.2=
5 1.25 0 1 1-2.5 0 1.25 1.25 0 0 1 2.5 0Zm4 0a1.25 1.25 0 1 1-2.5 0 1.25 1.=
25 0 0 1 2.5 0Z"></path></svg></span><span class=3D"_0LIzz">Chat</span></sp=
an></a><a aria-current=3D"page" class=3D"-ySo1 FDGXZ lT-iZ" aria-haspopup=
=3D"true" aria-expanded=3D"false" href=3D"https://platform.openai.com/playg=
round/assistants"><span class=3D"_1h-SG"><span class=3D"-k7Gw"><svg xmlns=
=3D"http://www.w3.org/2000/svg" width=3D"1em" height=3D"1em" fill=3D"curren=
tColor" viewBox=3D"0 0 24 24"><path d=3D"M11 7.5a1.5 1.5 0 1 1-3 0 1.5 1.5 =
0 0 1 3 0ZM14.5 9a1.5 1.5 0 1 0 0-3 1.5 1.5 0 0 0 0 3Z"></path><path fill-r=
ule=3D"evenodd" d=3D"M12 1a1 1 0 0 1 1 1v.5h4a3 3 0 0 1 3 3V9a5 5 0 0 1-5 5=
H9a5 5 0 0 1-5-5V5.5a3 3 0 0 1 3-3h4V2a1 1 0 0 1 1-1ZM7 4.5h10a1 1 0 0 1 1 =
1V9a3 3 0 0 1-3 3H9a3 3 0 0 1-3-3V5.5a1 1 0 0 1 1-1Z" clip-rule=3D"evenodd"=
></path><path d=3D"M6 21c0-.974.551-1.95 1.632-2.722C8.71 17.508 10.252 17 =
12 17c1.749 0 3.29.508 4.369 1.278C17.449 19.05 18 20.026 18 21a1 1 0 1 0 2=
 0c0-1.788-1.016-3.311-2.469-4.35-1.455-1.038-3.414-1.65-5.53-1.65-2.118 0-=
4.077.611-5.532 1.65C5.016 17.69 4 19.214 4 21a1 1 0 1 0 2 0Z"></path></svg=
></span><span class=3D"_0LIzz">Assistants</span></span></a><a class=3D"-ySo=
1 FDGXZ" aria-haspopup=3D"true" aria-expanded=3D"false" href=3D"https://pla=
tform.openai.com/playground/tts"><span class=3D"_1h-SG"><span class=3D"-k7G=
w"><svg xmlns=3D"http://www.w3.org/2000/svg" width=3D"1em" height=3D"1em" f=
ill=3D"currentColor" viewBox=3D"0 0 24 24"><path fill-rule=3D"evenodd" d=3D=
"M7 7a5 5 0 0 1 10 0v4a5 5 0 0 1-10 0V7Zm5-3a3 3 0 0 0-3 3v4a3 3 0 1 0 6 0V=
7a3 3 0 0 0-3-3Z" clip-rule=3D"evenodd"></path><path d=3D"M11 19.945V21a1 1=
 0 1 0 2 0v-1.055a9.008 9.008 0 0 0 7.345-5.57 1 1 0 0 0-1.854-.75A7.002 7.=
002 0 0 1 12 18h-.003a7.003 7.003 0 0 1-6.489-4.375 1 1 0 1 0-1.853.75A9.00=
8 9.008 0 0 0 11 19.945Z"></path></svg></span><span class=3D"_0LIzz">TTS</s=
pan></span></a><a class=3D"-ySo1 FDGXZ" aria-haspopup=3D"true" aria-expande=
d=3D"false" href=3D"https://platform.openai.com/playground/complete"><span =
class=3D"_1h-SG"><span class=3D"-k7Gw"><svg xmlns=3D"http://www.w3.org/2000=
/svg" width=3D"1em" height=3D"1em" fill=3D"currentColor" viewBox=3D"0 0 24 =
24"><path fill-rule=3D"evenodd" d=3D"M3 8a1 1 0 0 1 1-1h16a1 1 0 1 1 0 2H4a=
1 1 0 0 1-1-1Zm0 8a1 1 0 0 1 1-1h10a1 1 0 1 1 0 2H4a1 1 0 0 1-1-1Z" clip-ru=
le=3D"evenodd"></path></svg></span><span class=3D"_0LIzz">Completions</span=
></span></a></div></div></div></div></div></div></div><div class=3D"EDOEc q=
yrrQ"><div class=3D"q3jBs"><a href=3D"https://community.openai.com/categori=
es" target=3D"_blank" rel=3D"noopener noreferrer" class=3D"-ySo1 FDGXZ" ari=
a-haspopup=3D"true" aria-expanded=3D"false"><span class=3D"_1h-SG"><span cl=
ass=3D"-k7Gw"><svg xmlns=3D"http://www.w3.org/2000/svg" width=3D"1em" heigh=
t=3D"1em" fill=3D"currentColor" viewBox=3D"0 0 24 24"><path fill-rule=3D"ev=
enodd" d=3D"M10.5 8.5a1.5 1.5 0 1 1 3 0 1.5 1.5 0 0 1-3 0ZM12 5a3.5 3.5 0 1=
 0 0 7 3.5 3.5 0 0 0 0-7ZM3 9.5a1 1 0 1 1 2 0 1 1 0 0 1-2 0Zm1-3a3 3 0 1 0 =
0 6 3 3 0 0 0 0-6Zm16 2a1 1 0 1 0 0 2 1 1 0 0 0 0-2Zm-3 1a3 3 0 1 1 6 0 3 3=
 0 0 1-6 0ZM8 18c0-.974.438-1.684 1.142-2.185C9.876 15.293 10.911 15 12 15c=
1.09 0 2.124.293 2.858.815.704.5 1.142 1.21 1.142 2.185a1 1 0 1 0 2 0c0-1.6=
92-.812-2.982-1.983-3.815C14.876 13.373 13.411 13 12 13c-1.41 0-2.876.373-4=
.017 1.185C6.812 15.018 6 16.308 6 18a1 1 0 1 0 2 0Zm-3.016-3.675a1 1 0 0 1=
-.809 1.16C2.79 15.732 2 16.486 2 17.5a1 1 0 1 1-2 0c0-2.41 1.978-3.655 3.8=
25-3.985a1 1 0 0 1 1.16.81Zm14.84 1.16a1 1 0 1 1 .351-1.97C22.022 13.845 24=
 15.09 24 17.5a1 1 0 1 1-2 0c0-1.014-.79-1.768-2.175-2.015Z" clip-rule=3D"e=
venodd"></path></svg></span><span class=3D"_0LIzz">Forum</span></span></a><=
button class=3D"-ySo1 FDGXZ" aria-haspopup=3D"true" aria-expanded=3D"false"=
><span class=3D"_1h-SG"><span class=3D"-k7Gw"><svg xmlns=3D"http://www.w3.o=
rg/2000/svg" width=3D"1em" height=3D"1em" fill=3D"currentColor" viewBox=3D"=
0 0 24 24"><path fill-rule=3D"evenodd" d=3D"M12 4a8 8 0 1 0 0 16 8 8 0 0 0 =
0-16ZM2 12C2 6.477 6.477 2 12 2s10 4.477 10 10-4.477 10-10 10S2 17.523 2 12=
Z" clip-rule=3D"evenodd"></path><path fill-rule=3D"evenodd" d=3D"M12 9a1 1 =
0 0 0-.879.522 1 1 0 0 1-1.754-.96A3 3 0 0 1 12 7c1.515 0 2.567 1.006 2.866=
 2.189.302 1.189-.156 2.574-1.524 3.258A.618.618 0 0 0 13 13a1 1 0 1 1-2 0c=
0-.992.56-1.898 1.447-2.342.455-.227.572-.618.48-.978C12.836 9.314 12.529 9=
 12 9Z" clip-rule=3D"evenodd"></path><path d=3D"M13.1 16a1.1 1.1 0 1 1-2.2 =
0 1.1 1.1 0 0 1 2.2 0Z"></path></svg></span><span class=3D"_0LIzz">Help</sp=
an></span></button></div></div></aside><div class=3D"_7j8ow"><div class=3D"=
qLnXc"><div class=3D"-jCTM"><div class=3D"sXRUo"><div class=3D"bSX-Q"><div =
class=3D"YfuCO"><div class=3D"pg-root page-body full-width flush"><div clas=
s=3D"pg-main"><div class=3D"pg-header"><div class=3D"pg-header-section pg-h=
eader-title"><h4 class=3D"pg-page-title">Playground</h4></div><div class=3D=
"assistants-playground-button-section"><a class=3D"assistants-v2-learn-more=
-link" target=3D"_blank" href=3D"https://platform.openai.com/docs/assistant=
s/whats-new"><span>New in Assistants API</span><svg xmlns=3D"http://www.w3.=
org/2000/svg" width=3D"16" height=3D"16" fill=3D"currentColor" viewBox=3D"0=
 0 24 24"><path fill-rule=3D"evenodd" d=3D"M16.243 6.757a1 1 0 0 1 1 1v7.07=
2a1 1 0 0 1-2 0v-4.657L8.464 16.95a1 1 0 0 1-1.414-1.414l6.778-6.779H9.172a=
1 1 0 0 1 0-2h7.07Z" clip-rule=3D"evenodd"></path></svg></a><a target=3D"_b=
lank" tabindex=3D"0" class=3D"btn btn-sm btn-filled btn-neutral" href=3D"ht=
tps://platform.openai.com/docs/assistants"><span class=3D"btn-label-wrap"><=
span class=3D"btn-node start-node"><svg xmlns=3D"http://www.w3.org/2000/svg=
" width=3D"18px" height=3D"18px" fill=3D"currentColor" viewBox=3D"0 0 24 24=
"><path fill-rule=3D"evenodd" d=3D"M7 4a1 1 0 0 0-1 1v11.17c.313-.11.65-.17=
 1-.17h11V4H7Zm10.657 14H7a1 1 0 1 0 0 2h10.657a5.48 5.48 0 0 1 0-2ZM4 19V5=
a3 3 0 0 1 3-3h12a1 1 0 0 1 1 1v14a1 1 0 0 1-.078.386c-.476 1.14-.476 2.089=
 0 3.228A1 1 0 0 1 19 22H7a3 3 0 0 1-3-3Z" clip-rule=3D"evenodd"></path></s=
vg></span><span class=3D"btn-label-inner">Learn more</span></span></a><butt=
on type=3D"button" tabindex=3D"0" class=3D"btn btn-sm btn-filled btn-neutra=
l" aria-haspopup=3D"true" aria-expanded=3D"false"><span class=3D"btn-label-=
wrap"><span class=3D"btn-label-inner"><svg xmlns=3D"http://www.w3.org/2000/=
svg" width=3D"1em" height=3D"1em" fill=3D"currentColor" viewBox=3D"0 0 24 2=
4"><path fill-rule=3D"evenodd" d=3D"M11.568 3.5a1 1 0 0 0-.863.494l-.811 1.=
381A3.001 3.001 0 0 1 7.33 6.856l-1.596.013a1 1 0 0 0-.858.501l-.439.761a1 =
1 0 0 0-.004.992l.792 1.4a3 3 0 0 1 0 2.954l-.792 1.4a1 1 0 0 0 .004.992l.4=
39.76a1 1 0 0 0 .858.502l1.596.013a3 3 0 0 1 2.564 1.48l.811 1.382a1 1 0 0 =
0 .863.494h.87a1 1 0 0 0 .862-.494l.812-1.381a3.001 3.001 0 0 1 2.563-1.481=
l1.596-.013a1 1 0 0 0 .86-.501l.438-.761a1 1 0 0 0 .004-.992l-.793-1.4a3 3 =
0 0 1 0-2.954l.793-1.4a1 1 0 0 0-.004-.992l-.439-.76a1 1 0 0 0-.858-.502l-1=
.597-.013a3 3 0 0 1-2.563-1.48L13.3 3.993a1 1 0 0 0-.862-.494h-.87ZM8.98 2.=
981A3.001 3.001 0 0 1 11.568 1.5h.87c1.064 0 2.049.564 2.588 1.481l.811 1.3=
82a1 1 0 0 0 .855.494l1.596.013a3 3 0 0 1 2.575 1.502l.44.76a3 3 0 0 1 .011=
 2.975l-.792 1.4a1 1 0 0 0 0 .985l.792 1.401a3 3 0 0 1-.012 2.974l-.439.761=
a3.001 3.001 0 0 1-2.575 1.503l-1.597.012a1 1 0 0 0-.854.494l-.811 1.382a3.=
001 3.001 0 0 1-2.588 1.481h-.87a3.001 3.001 0 0 1-2.588-1.481l-.811-1.382a=
1 1 0 0 0-.855-.494l-1.596-.012a3.001 3.001 0 0 1-2.576-1.503l-.438-.76a3 3=
 0 0 1-.013-2.975l.793-1.4a1 1 0 0 0 0-.985l-.793-1.4a3 3 0 0 1 .013-2.975l=
.438-.761A3.001 3.001 0 0 1 5.718 4.87l1.596-.013a1 1 0 0 0 .855-.494l.81-1=
.382Z" clip-rule=3D"evenodd"></path><path fill-rule=3D"evenodd" d=3D"M12.00=
3 10.5a1.5 1.5 0 1 0 0 3 1.5 1.5 0 0 0 0-3ZM8.502 12a3.5 3.5 0 1 1 7 .001 3=
.5 3.5 0 0 1-7-.001Z" clip-rule=3D"evenodd"></path></svg></span></span></bu=
tton></div></div><div class=3D"pg-body"><div class=3D"pg-editor pg-assistan=
t"><div class=3D"pg-content-body"><div class=3D"assistant-playground-contai=
ner collapsed-logs"><div class=3D"pg-and-logs" data-panel-group=3D"" data-p=
anel-group-direction=3D"horizontal" data-panel-group-id=3D":r6:" style=3D"d=
isplay: flex; flex-direction: row; height: 100%; overflow: hidden; width: 1=
00%;"><div class=3D"creation-panel" data-panel=3D"" data-panel-id=3D":r7:" =
style=3D"flex: 33.7 1 0px; overflow: hidden;"><div class=3D"creation-panel"=
><div class=3D"css-1250m6d ey3psug0"><div class=3D"creation-header"><div cl=
ass=3D"select-wrapper"><div class=3D"css-10iewir e12a1o8f1"><svg xmlns=3D"h=
ttp://www.w3.org/2000/svg" width=3D"20" height=3D"20" fill=3D"currentColor"=
 viewBox=3D"0 0 24 24" color=3D"var(--text-primary)"><path d=3D"M11 7.5a1.5=
 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0ZM14.5 9a1.5 1.5 0 1 0 0-3 1.5 1.5 0 0 0 0 =
3Z"></path><path fill-rule=3D"evenodd" d=3D"M12 1a1 1 0 0 1 1 1v.5h4a3 3 0 =
0 1 3 3V9a5 5 0 0 1-5 5H9a5 5 0 0 1-5-5V5.5a3 3 0 0 1 3-3h4V2a1 1 0 0 1 1-1=
ZM7 4.5h10a1 1 0 0 1 1 1V9a3 3 0 0 1-3 3H9a3 3 0 0 1-3-3V5.5a1 1 0 0 1 1-1Z=
" clip-rule=3D"evenodd"></path><path d=3D"M6 21c0-.974.551-1.95 1.632-2.722=
C8.71 17.508 10.252 17 12 17c1.749 0 3.29.508 4.369 1.278C17.449 19.05 18 2=
0.026 18 21a1 1 0 1 0 2 0c0-1.788-1.016-3.311-2.469-4.35-1.455-1.038-3.414-=
1.65-5.53-1.65-2.118 0-4.077.611-5.532 1.65C5.016 17.69 4 19.214 4 21a1 1 0=
 1 0 2 0Z"></path></svg></div><div class=3D"select-base css-1e54c44-contain=
er"><span id=3D"react-select-4-live-region" class=3D"css-7pg0cj-a11yText"><=
/span><span aria-live=3D"polite" aria-atomic=3D"false" aria-relevant=3D"add=
itions text" class=3D"css-7pg0cj-a11yText"></span><div class=3D" css-1ymebv=
p-control"><div class=3D" css-1k1yrrs"><div class=3D" css-2mna9q-singleValu=
e"><div class=3D"css-1szb2xj e12a1o8f0"><svg xmlns=3D"http://www.w3.org/200=
0/svg" width=3D"16px" height=3D"16px" fill=3D"currentColor" viewBox=3D"0 0 =
24 24" class=3D"select-check"><path fill-rule=3D"evenodd" d=3D"M18.063 5.67=
4a1 1 0 0 1 .263 1.39l-7.5 11a1 1 0 0 1-1.533.143l-4.5-4.5a1 1 0 1 1 1.414-=
1.414l3.647 3.647 6.82-10.003a1 1 0 0 1 1.39-.263Z" clip-rule=3D"evenodd"><=
/path></svg><div style=3D"width: 100%; overflow: hidden; white-space: nowra=
p; text-overflow: ellipsis;">part2_10</div></div></div><div class=3D" css-1=
7wv8nz" data-value=3D""><input class=3D"" autocapitalize=3D"none" autocompl=
ete=3D"off" autocorrect=3D"off" id=3D"react-select-4-input" spellcheck=3D"f=
alse" tabindex=3D"0" type=3D"text" aria-autocomplete=3D"list" aria-expanded=
=3D"false" aria-haspopup=3D"true" role=3D"combobox" value=3D"" style=3D"col=
or: inherit; background: 0px center; opacity: 1; width: 100%; grid-area: 1 =
/ 2; font: inherit; min-width: 2px; border: 0px; margin: 0px; outline: 0px;=
 padding: 0px;"></div></div><div class=3D" css-1xgy2si"><div class=3D"selec=
t-dropdown-indicator css-ir5cwv-indicatorContainer" aria-hidden=3D"true"><s=
vg xmlns=3D"http://www.w3.org/2000/svg" width=3D"1em" height=3D"1em" fill=
=3D"currentColor" viewBox=3D"0 0 24 24"><path fill-rule=3D"evenodd" d=3D"M1=
1.341 4.747a1 1 0 0 1 1.318 0l4 3.5a1 1 0 1 1-1.317 1.506L12 6.829 8.659 9.=
753a1 1 0 0 1-1.317-1.506l4-3.5Zm-4.095 9.61a1 1 0 0 1 1.41-.096L12 17.174l=
3.343-2.913a1 1 0 1 1 1.314 1.508l-4 3.485a1 1 0 0 1-1.314 0l-4-3.485a1 1 0=
 0 1-.097-1.411Z" clip-rule=3D"evenodd"></path></svg></div></div></div></di=
v></div></div></div><div class=3D"css-a7n8v4 ey3psug1"><div><div class=3D"c=
ss-uewl2b e19yjrqr0"><label class=3D"form-label mb-2"><div class=3D"body-sm=
all flex items-center"><div class=3D"mr-2" style=3D"font-weight: 500;">Name=
</div></div></label><input class=3D"text-input text-input-sm text-input-ful=
l" type=3D"text" placeholder=3D"Enter a user friendly name" value=3D"part2_=
10"><div class=3D"css-y4dpym e19yjrqr5"><div class=3D"" aria-haspopup=3D"tr=
ue" aria-expanded=3D"false" style=3D"cursor: pointer; width: min-content;">=
asst_P4AcxEyxYF4NjkeNg4rzczc7</div></div></div><div class=3D"css-uewl2b e19=
yjrqr0"><label class=3D"form-label mb-2"><div class=3D"body-small flex item=
s-center"><div class=3D"mr-2" style=3D"font-weight: 500;">Instructions</div=
></div></label><div class=3D"css-79elbk e19yjrqr2"><textarea class=3D"text-=
input text-input-sm text-input-full css-5d6l6w e19yjrqr4" type=3D"text" row=
s=3D"4" placeholder=3D"You are a helpful assistant.">Create a class with th=
e following components:

Initialize the class with three parameters:

A list of lists containing equation names (call it 'mso')
A dictionary where keys are equation names and values are equation strings =
(call it 'equations')
A dictionary of observed data (call it 'data')
Store these as instance variables with the same names.
Create an additional instance variable called 'parsed_equations' by calling=
 a method that defines and parses the equations.


Implement a private method that defines and parses equations:

Initialize an empty dictionary called 'parsed'
Iterate through each item in the 'equations' dictionary
For each equation:

Split the equation string by '=3D' into 'left_side' and 'right_side'
Strip whitespace from both sides
Create a 'symbols_dict' using dictionary comprehensions:

For the left side: {var: symbols(var) for var in left_side.split() if var.i=
sidentifier()}
Update it with right side: {var: symbols(var) for var in right_side.split()=
 if var.isidentifier()}


Replace observed data in the symbols_dict:

For each item in 'data', if the key is in symbols_dict, replace the value


Build the equation based on the operator:

Check for '&amp;', '|', '^', '~^', '~', '~&amp;', '~|' in the left_side
For your information what means these symbols :
NAND ('~&amp;')
NOR ('~|')
XNOR ('~^')
XOR ('^')
NOT ('~')
AND ('&amp;')
OR ('|')
For each case, create a parsed_expression using SymPy functions (Not, And, =
Or, Xor)
Use list comprehensions to get the relevant symbols from symbols_dict
Convert to equality using Eq(parsed_expression, symbols_dict[right_side])


For arithmetic:

If '+' in left_side: split by '+', use sum() with a generator expression
If '' in left_side: split by '', use a loop to multiply terms
Otherwise, assume it's a single term
Create an Eq object with left_expr and right_expr


Add the parsed expression to the 'parsed' dictionary


Return the 'parsed' dictionary


Implement a private method to check if a set of equations is contradictory:

Check if equations are logical or arithmetic:

Use: any(char in equation for equation in self.equations.values() for char =
in ['~', '&amp;', '|', '^'])


For logical equations:

Get all variables: {var for eq in equations.values() for var in eq.free_sym=
bols}
Generate all True/False combinations: product([True, False], repeat=3Dlen(v=
ariables))
For each combination:

Create an assignment dictionary using dict(zip(variables, combination))
Check if all equations are satisfied using all() and a generator expression
If any combination satisfies all equations, return False


If no satisfying combination is found, return True


For arithmetic equations:

Convert equations.values() to a list
Use SymPy's solve function: solve(eqs, dict=3DTrue)
Return True if the solution list is empty, False otherwise




Implement a public method to get minimal conflicts:

Initialize an empty list called 'minimal_conflicts'
Iterate through each group in self.mso
For each group:

Create a dictionary 'group_equations' using a dictionary comprehension:
{name: self.parsed_equations[name] for name in group if name in self.parsed=
_equations}
Check if the group is contradictory using the method from step 3
If contradictory, append the sorted group to 'minimal_conflicts'


Return 'minimal_conflicts' sorted using:
sorted(minimal_conflicts, key=3Dlambda x: (len(x), x))

HINTS:
1. To check whether the equation is logical, check the presence of at least=
 one character from the list ['|', '&amp;', '^', '~'] in at least one provi=
ded equations.values().
2. Be sure that all logical opearation (AND (&amp;), OR (|), XOR (^), NOT (=
~), NAND (~&amp;), NOR (~|), XNOR (~^)) and arithmetic (+, *) are supported=
.
3. Use example_1, example_2 and example_3 to test your code before generate=
 results for given data.

&lt;example_1&gt;
&lt;input&gt;
equations =3D {
    'M1': 'a * c =3D x01',=20
    'M2': 'b * d =3D x02',=20
    'M3': 'c * e =3D x03',=20
    'A1': 'x01 + x02 =3D f',=20
    'A2': 'x02 + x03 =3D g'}
mso =3D [['M1', 'M2', 'A1'], ['M2', 'M3', 'A2'], ['M1', 'M3', 'A1', 'A2']]
data =3D {'a': 2, 'b': 2, 'c': 3, 'd': 3, 'e': 2, 'f': 10, 'g': 12}
&lt;/input&gt;
For ['M1', 'M2', 'A1'] system of equations is:
[a * c =3D x01,
b * d =3D x02,
x01 + x02 =3D f
]
For ['M2', 'M3', 'A2'] system of equations is:
[b * d =3D x02,
c * e =3D x03,
x02 + x03 =3D g
]
For ['M1', 'M3', 'A1', 'A2'] system of equations is:
[a * c =3D x01,
c * e =3D x03,
x01 + x02 =3D f,
x02 + x03 =3D g
]
For ['M1', 'M2', 'A1'] and ['M1', 'M3', 'A1', 'A2'] systems of eqautions ar=
e inconsistent so output should be:
&lt;output&gt;
{
'minimal_conflicts': [['M1', 'M2', 'A1'], ['M1', 'M3', 'A1', 'A2']]
}
&lt;/output&gt;
&lt;/example_1&gt;
&lt;example_2&gt;
&lt;input&gt;
mso =3D [['A1', 'O1', 'O2'], ['A2', 'O2', 'O3'], ['A1', 'A2', 'O1', 'O3']]
equations =3D {
    'O1': 'a | c =3D x01',
    'O2': 'b | d =3D x02',
    'O3': 'c | e =3D x03',
    'A1': 'x01 &amp; x02 =3D f',
    'A2': 'x02 &amp; x03 =3D g'}
data =3D {'a': True, 'b': True, 'c': True, 'd': True, 'e': True, 'f': False=
, 'g': False}
&lt;/input&gt;
For ['A1', 'O1', 'O2'] system of equations is:
[x01 &amp; x02 =3D f,
a | c =3D x01,
b | d =3D x02
]
For ['A2', 'O2', 'O3'] system of equations is:
[x02 &amp; x03 =3D g,
b | d =3D x02,
c | e =3D x03
]
For ['A1', 'A2', 'O1', 'O3'] system of equations is:
[x01 &amp; x02 =3D f,
x02 &amp; x03 =3D g,
a | c =3D x01,
c | e =3D x03
]
For ['A1', 'O1', 'O2'] and ['A2', 'O2', 'O3'] systems of eqautions are inco=
nsistent so output should be:
&lt;output&gt;
{
'minimal_conflicts': [['A1', 'O1', 'O2'], ['A2', 'O2', 'O3']]
}
&lt;/example_2&gt;
&lt;example_3&gt;
&lt;input&gt;
mso =3D [['NA1', 'NO2', 'NX1']]
equations =3D {
    'NA1': 'a ~&amp; b =3D x01',=20
    'NO2': 'c ~| d =3D x02',=20
    'NX1': 'x01 ~^ x02 =3D e'}
data =3D {'a': True, 'b': True, 'c': True, 'd': True, 'e': False}
&lt;/input&gt;
For ['NA1', 'NO2', 'NX1'] system of equations is:
[a ~&amp; b =3D x01,
c ~| d =3D x02,
x01 ~^ x02 =3D e
]
For ['NA1', 'NO2', 'NX1'] system of eqautions are inconsistent so output sh=
ould be:
&lt;output&gt;
{
'minimal_conflicts': [['NA1', 'NO2', 'NX1']]
}
&lt;/example_3&gt;</textarea><button type=3D"button" tabindex=3D"0" class=
=3D"btn btn-xsm btn-minimal btn-neutral css-7425ew e19yjrqr3"><span class=
=3D"btn-label-wrap"><span class=3D"btn-label-inner"><svg xmlns=3D"http://ww=
w.w3.org/2000/svg" width=3D"20" height=3D"20" fill=3D"currentColor" viewBox=
=3D"0 0 24 24"><path fill-rule=3D"evenodd" d=3D"M12 7a1 1 0 0 1 1-1h4a1 1 0=
 0 1 1 1v4a1 1 0 1 1-2 0V8h-3a1 1 0 0 1-1-1Zm-5 5a1 1 0 0 1 1 1v3h3a1 1 0 1=
 1 0 2H7a1 1 0 0 1-1-1v-4a1 1 0 0 1 1-1Z" clip-rule=3D"evenodd"></path></sv=
g></span></span></button></div></div><div class=3D"css-uewl2b e19yjrqr0"><l=
abel class=3D"form-label mb-2"><div class=3D"body-small flex items-center">=
<div class=3D"mr-2" style=3D"font-weight: 500;">Model</div></div></label><d=
iv class=3D"engine-select"><button id=3D"select-trigger-radix-:rk:" type=3D=
"button" class=3D"ICo9Y" data-block=3D"" data-variant=3D"outline" data-size=
=3D"md" data-gutter-size=3D"md" aria-haspopup=3D"dialog" aria-expanded=3D"f=
alse" aria-controls=3D"radix-:rt:" data-state=3D"closed"><span class=3D"RWO=
JJ">gpt-4o-mini</span><div class=3D"relative flex items-center gap-2"><svg =
width=3D"8" height=3D"11" viewBox=3D"0 0 10 16" fill=3D"currentColor" xmlns=
=3D"http://www.w3.org/2000/svg" class=3D"uF-Qb"><path fill-rule=3D"evenodd"=
 clip-rule=3D"evenodd" d=3D"M4.34151 0.747423C4.71854 0.417526 5.28149 0.41=
7526 5.65852 0.747423L9.65852 4.24742C10.0742 4.61111 10.1163 5.24287 9.752=
59 5.6585C9.38891 6.07414 8.75715 6.11626 8.34151 5.75258L5.00001 2.82877L1=
.65852 5.75258C1.24288 6.11626 0.61112 6.07414 0.247438 5.6585C-0.116244 5.=
24287 -0.0741267 4.61111 0.34151 4.24742L4.34151 0.747423ZM0.246065 10.3578=
C0.608879 9.94139 1.24055 9.89795 1.65695 10.2608L5.00001 13.1737L8.34308 1=
0.2608C8.75948 9.89795 9.39115 9.94139 9.75396 10.3578C10.1168 10.7742 10.0=
733 11.4058 9.65695 11.7687L5.65695 15.2539C5.28043 15.582 4.7196 15.582 4.=
34308 15.2539L0.343082 11.7687C-0.0733128 11.4058 -0.116749 10.7742 0.24606=
5 10.3578Z"></path></svg></div></button></div></div><div class=3D"css-zk4pm=
3 e19yjrqr14">Tools</div><div class=3D"css-i95kyk e1gwek9z4"><div class=3D"=
css-1olxsos e1gwek9z7"><div class=3D"css-axw7ok e19yjrqr9"><div aria-haspop=
up=3D"true" aria-expanded=3D"false"><label class=3D"cb"><input class=3D"cb-=
input" type=3D"checkbox" value=3D""><div class=3D"cb-toggle"><div class=3D"=
cb-toggle-knob"></div></div></label></div><div aria-haspopup=3D"true" aria-=
expanded=3D"false" class=3D"css-j5v2yw e1gwek9z13"><span>File search</span>=
<div class=3D"css-1falsb5 e1gwek9z12"><svg xmlns=3D"http://www.w3.org/2000/=
svg" width=3D"1em" height=3D"1em" fill=3D"currentColor" viewBox=3D"0 0 24 2=
4"><path d=3D"M13 12a1 1 0 1 0-2 0v4a1 1 0 1 0 2 0v-4Zm-1-2.5A1.25 1.25 0 1=
 0 12 7a1.25 1.25 0 0 0 0 2.5Z"></path><path fill-rule=3D"evenodd" d=3D"M12=
 2C6.477 2 2 6.477 2 12s4.477 10 10 10 10-4.477 10-10S17.523 2 12 2ZM4 12a8=
 8 0 1 1 16 0 8 8 0 0 1-16 0Z" clip-rule=3D"evenodd"></path></svg></div></d=
iv></div><div class=3D"css-r2hvuq e19yjrqr10"><button type=3D"button" tabin=
dex=3D"0" class=3D"btn btn-xsm btn-filled btn-neutral" aria-haspopup=3D"tru=
e" aria-expanded=3D"false"><span class=3D"btn-label-wrap"><span class=3D"bt=
n-label-inner"><svg xmlns=3D"http://www.w3.org/2000/svg" width=3D"1em" heig=
ht=3D"1em" fill=3D"currentColor" viewBox=3D"0 0 24 24"><path fill-rule=3D"e=
venodd" d=3D"M11.568 3.5a1 1 0 0 0-.863.494l-.811 1.381A3.001 3.001 0 0 1 7=
.33 6.856l-1.596.013a1 1 0 0 0-.858.501l-.439.761a1 1 0 0 0-.004.992l.792 1=
.4a3 3 0 0 1 0 2.954l-.792 1.4a1 1 0 0 0 .004.992l.439.76a1 1 0 0 0 .858.50=
2l1.596.013a3 3 0 0 1 2.564 1.48l.811 1.382a1 1 0 0 0 .863.494h.87a1 1 0 0 =
0 .862-.494l.812-1.381a3.001 3.001 0 0 1 2.563-1.481l1.596-.013a1 1 0 0 0 .=
86-.501l.438-.761a1 1 0 0 0 .004-.992l-.793-1.4a3 3 0 0 1 0-2.954l.793-1.4a=
1 1 0 0 0-.004-.992l-.439-.76a1 1 0 0 0-.858-.502l-1.597-.013a3 3 0 0 1-2.5=
63-1.48L13.3 3.993a1 1 0 0 0-.862-.494h-.87ZM8.98 2.981A3.001 3.001 0 0 1 1=
1.568 1.5h.87c1.064 0 2.049.564 2.588 1.481l.811 1.382a1 1 0 0 0 .855.494l1=
.596.013a3 3 0 0 1 2.575 1.502l.44.76a3 3 0 0 1 .011 2.975l-.792 1.4a1 1 0 =
0 0 0 .985l.792 1.401a3 3 0 0 1-.012 2.974l-.439.761a3.001 3.001 0 0 1-2.57=
5 1.503l-1.597.012a1 1 0 0 0-.854.494l-.811 1.382a3.001 3.001 0 0 1-2.588 1=
.481h-.87a3.001 3.001 0 0 1-2.588-1.481l-.811-1.382a1 1 0 0 0-.855-.494l-1.=
596-.012a3.001 3.001 0 0 1-2.576-1.503l-.438-.76a3 3 0 0 1-.013-2.975l.793-=
1.4a1 1 0 0 0 0-.985l-.793-1.4a3 3 0 0 1 .013-2.975l.438-.761A3.001 3.001 0=
 0 1 5.718 4.87l1.596-.013a1 1 0 0 0 .855-.494l.81-1.382Z" clip-rule=3D"eve=
nodd"></path><path fill-rule=3D"evenodd" d=3D"M12.003 10.5a1.5 1.5 0 1 0 0 =
3 1.5 1.5 0 0 0 0-3ZM8.502 12a3.5 3.5 0 1 1 7 .001 3.5 3.5 0 0 1-7-.001Z" c=
lip-rule=3D"evenodd"></path></svg></span></span></button><button type=3D"bu=
tton" tabindex=3D"0" class=3D"btn btn-xsm btn-filled btn-neutral css-1i31g7=
f e19yjrqr1"><span class=3D"btn-label-wrap"><span class=3D"btn-node start-n=
ode"><svg xmlns=3D"http://www.w3.org/2000/svg" width=3D"16px" height=3D"16p=
x" fill=3D"currentColor" viewBox=3D"0 0 24 24"><path fill-rule=3D"evenodd" =
d=3D"M12 5a1 1 0 0 1 1 1v5h5a1 1 0 1 1 0 2h-5v5a1 1 0 1 1-2 0v-5H6a1 1 0 1 =
1 0-2h5V6a1 1 0 0 1 1-1Z" clip-rule=3D"evenodd"></path></svg></span><span c=
lass=3D"btn-label-inner">Files</span></span></button></div></div></div><div=
 class=3D"css-i95kyk e1gwek9z4"><div class=3D"css-1olxsos e1gwek9z7"><div c=
lass=3D"css-axw7ok e19yjrqr9"><label class=3D"cb"><input class=3D"cb-input =
cb-checked" type=3D"checkbox" value=3D"" checked=3D""><div class=3D"cb-togg=
le"><div class=3D"cb-toggle-knob"></div></div></label><div aria-haspopup=3D=
"true" aria-expanded=3D"false" class=3D"css-j5v2yw e1gwek9z13"><span>Code i=
nterpreter</span><div class=3D"css-1falsb5 e1gwek9z12"><svg xmlns=3D"http:/=
/www.w3.org/2000/svg" width=3D"1em" height=3D"1em" fill=3D"currentColor" vi=
ewBox=3D"0 0 24 24"><path d=3D"M13 12a1 1 0 1 0-2 0v4a1 1 0 1 0 2 0v-4Zm-1-=
2.5A1.25 1.25 0 1 0 12 7a1.25 1.25 0 0 0 0 2.5Z"></path><path fill-rule=3D"=
evenodd" d=3D"M12 2C6.477 2 2 6.477 2 12s4.477 10 10 10 10-4.477 10-10S17.5=
23 2 12 2ZM4 12a8 8 0 1 1 16 0 8 8 0 0 1-16 0Z" clip-rule=3D"evenodd"></pat=
h></svg></div></div></div><button type=3D"button" tabindex=3D"0" class=3D"b=
tn btn-xsm btn-filled btn-neutral css-1i31g7f e19yjrqr1"><span class=3D"btn=
-label-wrap"><span class=3D"btn-node start-node"><svg xmlns=3D"http://www.w=
3.org/2000/svg" width=3D"16px" height=3D"16px" fill=3D"currentColor" viewBo=
x=3D"0 0 24 24"><path fill-rule=3D"evenodd" d=3D"M12 5a1 1 0 0 1 1 1v5h5a1 =
1 0 1 1 0 2h-5v5a1 1 0 1 1-2 0v-5H6a1 1 0 1 1 0-2h5V6a1 1 0 0 1 1-1Z" clip-=
rule=3D"evenodd"></path></svg></span><span class=3D"btn-label-inner">Files<=
/span></span></button></div></div><div class=3D"css-i95kyk e1gwek9z4"><div =
class=3D"css-1olxsos e1gwek9z7"><div aria-haspopup=3D"true" aria-expanded=
=3D"false" class=3D"css-j5v2yw e1gwek9z13"><span>Functions</span><div class=
=3D"css-1falsb5 e1gwek9z12"><svg xmlns=3D"http://www.w3.org/2000/svg" width=
=3D"1em" height=3D"1em" fill=3D"currentColor" viewBox=3D"0 0 24 24"><path d=
=3D"M13 12a1 1 0 1 0-2 0v4a1 1 0 1 0 2 0v-4Zm-1-2.5A1.25 1.25 0 1 0 12 7a1.=
25 1.25 0 0 0 0 2.5Z"></path><path fill-rule=3D"evenodd" d=3D"M12 2C6.477 2=
 2 6.477 2 12s4.477 10 10 10 10-4.477 10-10S17.523 2 12 2ZM4 12a8 8 0 1 1 1=
6 0 8 8 0 0 1-16 0Z" clip-rule=3D"evenodd"></path></svg></div></div><button=
 type=3D"button" tabindex=3D"0" class=3D"btn btn-xsm btn-filled btn-neutral=
 css-1i31g7f e19yjrqr1"><span class=3D"btn-label-wrap"><span class=3D"btn-n=
ode start-node"><svg xmlns=3D"http://www.w3.org/2000/svg" width=3D"16px" he=
ight=3D"16px" fill=3D"currentColor" viewBox=3D"0 0 24 24"><path fill-rule=
=3D"evenodd" d=3D"M12 5a1 1 0 0 1 1 1v5h5a1 1 0 1 1 0 2h-5v5a1 1 0 1 1-2 0v=
-5H6a1 1 0 1 1 0-2h5V6a1 1 0 0 1 1-1Z" clip-rule=3D"evenodd"></path></svg><=
/span><span class=3D"btn-label-inner">Functions</span></span></button></div=
></div><div class=3D"css-11eld9l e19yjrqr12"><div class=3D"css-24u3a0 e19yj=
rqr14">Model configuration</div><div class=3D"css-2h0a61 e19yjrqr13"><label=
 class=3D"form-label mb-2"><div class=3D"body-small flex items-center"><div=
 class=3D"mr-2" style=3D"font-weight: 500;">Response format</div></div></la=
bel><button id=3D"select-trigger-radix-:rm:" type=3D"button" class=3D"ICo9Y=
" data-block=3D"" data-variant=3D"outline" data-size=3D"md" data-gutter-siz=
e=3D"md" disabled=3D"" aria-haspopup=3D"dialog" aria-expanded=3D"false" ari=
a-controls=3D"radix-:ru:" data-state=3D"closed"><span class=3D"RWOJJ"><code=
 class=3D"text-xs">text</code></span><div class=3D"relative flex items-cent=
er gap-2"><svg width=3D"8" height=3D"11" viewBox=3D"0 0 10 16" fill=3D"curr=
entColor" xmlns=3D"http://www.w3.org/2000/svg" class=3D"uF-Qb"><path fill-r=
ule=3D"evenodd" clip-rule=3D"evenodd" d=3D"M4.34151 0.747423C4.71854 0.4175=
26 5.28149 0.417526 5.65852 0.747423L9.65852 4.24742C10.0742 4.61111 10.116=
3 5.24287 9.75259 5.6585C9.38891 6.07414 8.75715 6.11626 8.34151 5.75258L5.=
00001 2.82877L1.65852 5.75258C1.24288 6.11626 0.61112 6.07414 0.247438 5.65=
85C-0.116244 5.24287 -0.0741267 4.61111 0.34151 4.24742L4.34151 0.747423ZM0=
.246065 10.3578C0.608879 9.94139 1.24055 9.89795 1.65695 10.2608L5.00001 13=
.1737L8.34308 10.2608C8.75948 9.89795 9.39115 9.94139 9.75396 10.3578C10.11=
68 10.7742 10.0733 11.4058 9.65695 11.7687L5.65695 15.2539C5.28043 15.582 4=
.7196 15.582 4.34308 15.2539L0.343082 11.7687C-0.0733128 11.4058 -0.116749 =
10.7742 0.246065 10.3578Z"></path></svg></div></button></div><div class=3D"=
css-svv2z7 e19yjrqr15"><div class=3D"css-2h0a61 e19yjrqr13"><div aria-haspo=
pup=3D"true" aria-expanded=3D"false" class=3D"css-1kh4d9p ejiuyrc0"><div cl=
ass=3D"slider css-nw0oqs eu3r4br0"><div class=3D"flex items-center"><span c=
lass=3D"body-small flex-[1_0_auto]">Temperature</span><input class=3D"text-=
input text-input-sm css-1eeb091 eu3r4br2" type=3D"text" value=3D"1"></div><=
div><div class=3D"rc-slider  css-l2z0vi eu3r4br1"><div class=3D"rc-slider-r=
ail"></div><div class=3D"rc-slider-track" style=3D"left: 0%; right: auto; w=
idth: 50%;"></div><div class=3D"rc-slider-step"></div><div tabindex=3D"0" c=
lass=3D"rc-slider-handle" role=3D"slider" aria-valuemin=3D"0" aria-valuemax=
=3D"2" aria-valuenow=3D"1" aria-disabled=3D"false" style=3D"left: 50%; righ=
t: auto; transform: translateX(-50%);"></div><div class=3D"rc-slider-mark">=
</div></div></div></div></div></div><div class=3D"css-2h0a61 e19yjrqr13"><d=
iv aria-haspopup=3D"true" aria-expanded=3D"false" class=3D"css-1kh4d9p ejiu=
yrc0"><div class=3D"slider css-nw0oqs eu3r4br0"><div class=3D"flex items-ce=
nter"><span class=3D"body-small flex-[1_0_auto]">Top P</span><input class=
=3D"text-input text-input-sm css-1eeb091 eu3r4br2" type=3D"text" value=3D"1=
"></div><div><div class=3D"rc-slider  css-l2z0vi eu3r4br1"><div class=3D"rc=
-slider-rail"></div><div class=3D"rc-slider-track" style=3D"left: 0%; right=
: auto; width: 100%;"></div><div class=3D"rc-slider-step"></div><div tabind=
ex=3D"0" class=3D"rc-slider-handle" role=3D"slider" aria-valuemin=3D"0" ari=
a-valuemax=3D"1" aria-valuenow=3D"1" aria-disabled=3D"false" style=3D"left:=
 100%; right: auto; transform: translateX(-50%);"></div><div class=3D"rc-sl=
ider-mark"></div></div></div></div></div></div></div></div><div class=3D"cs=
s-11eld9l e19yjrqr12"><div class=3D"css-zk4pm3 e19yjrqr14">API Version</div=
><div class=3D"css-i95kyk e1gwek9z4"><div class=3D"css-1olxsos e1gwek9z7"><=
div aria-haspopup=3D"true" aria-expanded=3D"false" class=3D"css-j5v2yw e1gw=
ek9z13"><span>Latest</span><div class=3D"css-1falsb5 e1gwek9z12"><svg xmlns=
=3D"http://www.w3.org/2000/svg" width=3D"1em" height=3D"1em" fill=3D"curren=
tColor" viewBox=3D"0 0 24 24"><path d=3D"M13 12a1 1 0 1 0-2 0v4a1 1 0 1 0 2=
 0v-4Zm-1-2.5A1.25 1.25 0 1 0 12 7a1.25 1.25 0 0 0 0 2.5Z"></path><path fil=
l-rule=3D"evenodd" d=3D"M12 2C6.477 2 2 6.477 2 12s4.477 10 10 10 10-4.477 =
10-10S17.523 2 12 2ZM4 12a8 8 0 1 1 16 0 8 8 0 0 1-16 0Z" clip-rule=3D"even=
odd"></path></svg></div></div><button type=3D"button" tabindex=3D"0" class=
=3D"btn btn-xsm btn-filled btn-neutral css-1i31g7f e19yjrqr1"><span class=
=3D"btn-label-wrap"><span class=3D"btn-label-inner">Switch to v1</span></sp=
an></button></div></div></div></div></div><div class=3D"css-cfk0kw ey3psug2=
"><div class=3D"css-s132ad e1gwek9z2"><div style=3D"width: max-content; dis=
play: flex; flex-direction: row;"><button type=3D"button" tabindex=3D"0" cl=
ass=3D"btn btn-sm btn-filled btn-neutral"><span class=3D"btn-label-wrap"><s=
pan class=3D"btn-label-inner"><svg xmlns=3D"http://www.w3.org/2000/svg" wid=
th=3D"1em" height=3D"1em" fill=3D"currentColor" viewBox=3D"0 0 24 24"><path=
 fill-rule=3D"evenodd" d=3D"M10.556 4a1 1 0 0 0-.97.751l-.292 1.14h5.421l-.=
293-1.14A1 1 0 0 0 13.453 4h-2.897Zm6.224 1.892-.421-1.639A3 3 0 0 0 13.453=
 2h-2.897A3 3 0 0 0 7.65 4.253l-.421 1.639H4a1 1 0 1 0 0 2h.1l1.215 11.425A=
3 3 0 0 0 8.3 22h7.4a3 3 0 0 0 2.984-2.683l1.214-11.425H20a1 1 0 1 0 0-2h-3=
.22Zm1.108 2H6.112l1.192 11.214A1 1 0 0 0 8.3 20h7.4a1 1 0 0 0 .995-.894l1.=
192-11.214ZM10 10a1 1 0 0 1 1 1v5a1 1 0 1 1-2 0v-5a1 1 0 0 1 1-1Zm4 0a1 1 0=
 0 1 1 1v5a1 1 0 1 1-2 0v-5a1 1 0 0 1 1-1Z" clip-rule=3D"evenodd"></path></=
svg></span></span></button><button type=3D"button" tabindex=3D"0" class=3D"=
btn btn-sm btn-filled btn-neutral"><span class=3D"btn-label-wrap"><span cla=
ss=3D"btn-node start-node"><svg xmlns=3D"http://www.w3.org/2000/svg" width=
=3D"18px" height=3D"18px" fill=3D"currentColor" viewBox=3D"0 0 24 24"><path=
 fill-rule=3D"evenodd" d=3D"M7 5a3 3 0 0 1 3-3h9a3 3 0 0 1 3 3v9a3 3 0 0 1-=
3 3h-2v2a3 3 0 0 1-3 3H5a3 3 0 0 1-3-3v-9a3 3 0 0 1 3-3h2V5Zm2 2h5a3 3 0 0 =
1 3 3v5h2a1 1 0 0 0 1-1V5a1 1 0 0 0-1-1h-9a1 1 0 0 0-1 1v2ZM5 9a1 1 0 0 0-1=
 1v9a1 1 0 0 0 1 1h9a1 1 0 0 0 1-1v-9a1 1 0 0 0-1-1H5Z" clip-rule=3D"evenod=
d"></path></svg></span><span class=3D"btn-label-inner">Clone</span></span><=
/button></div><div style=3D"max-width: 50%;"><div class=3D"css-njrzxh e1jb6=
jt50">Updated 12.08, 21:08</div></div></div></div></div></div><div class=3D=
"assistants-panel-handle" role=3D"separator" tabindex=3D"0" data-panel-grou=
p-direction=3D"horizontal" data-panel-group-id=3D":r6:" data-resize-handle=
=3D"" data-panel-resize-handle-enabled=3D"true" data-panel-resize-handle-id=
=3D":r8:" style=3D"cursor: ew-resize; touch-action: none; user-select: none=
; width: 20px; overflow: hidden; display: flex;" aria-controls=3D":r7:" ari=
a-valuemax=3D"34" aria-valuemin=3D"22" aria-valuenow=3D"34"><div class=3D"a=
ssistants-panel-divider"></div><div class=3D"drag"></div></div><div class=
=3D"" data-panel=3D"" data-panel-id=3D":r9:" style=3D"flex: 66.3 1 0px; ove=
rflow: hidden; height: 100%; display: flex;"><div class=3D"interactive-thre=
ad-panel"><div class=3D"assistants-pg-header"><div class=3D"thread-title"><=
span class=3D"pg-title">Thread</span><span class=3D"pg-subheader">thread_w2=
V0P3dCwHIEDQdADnMa4Z2p</span></div><div class=3D"thread-tokens-container" a=
ria-haspopup=3D"true" aria-expanded=3D"false" style=3D"margin-right: 12px;"=
><span class=3D"tokens-count">137531</span><span class=3D"tokens-label">tok=
ens</span></div><button type=3D"button" tabindex=3D"0" class=3D"btn btn-sm =
btn-minimal btn-neutral" aria-haspopup=3D"true" aria-expanded=3D"false"><sp=
an class=3D"btn-label-wrap"><span class=3D"btn-label-inner"><svg xmlns=3D"h=
ttp://www.w3.org/2000/svg" width=3D"1em" height=3D"1em" fill=3D"currentColo=
r" viewBox=3D"0 0 24 24"><path fill-rule=3D"evenodd" d=3D"M20.719 4.696a1 1=
 0 0 0-1.415-1.415l-4.796 4.796-.634-.635a3.002 3.002 0 0 0-3.788-.375l-7.6=
4 5.093a1 1 0 0 0-.153 1.541l8.005 8.005a1.002 1.002 0 0 0 1.541-.152l5.093=
-7.64a3.001 3.001 0 0 0-.375-3.789l-.634-.633 4.796-4.796Zm-9.523 4.037a1 1=
 0 0 1 1.263.124l2.682 2.684a1 1 0 0 1 .126 1.262l-.414.621-4.278-4.277.62-=
.414ZM8.877 10.28l-4.305 2.87 1.43 1.43 1.294-1.292a1 1 0 0 1 1.415 1.415l-=
1.294 1.294 3.433 3.432 2.871-4.306-4.844-4.843Z" clip-rule=3D"evenodd"></p=
ath></svg></span></span></button><button type=3D"button" tabindex=3D"0" cla=
ss=3D"btn btn-sm btn-minimal btn-neutral status-button" aria-haspopup=3D"tr=
ue" aria-expanded=3D"false"><span class=3D"btn-label-wrap"><span class=3D"b=
tn-label-inner"><div class=3D"thread-files-button-content"><div class=3D"th=
read-files-button-storage-icon-wrapper" aria-haspopup=3D"true" aria-expande=
d=3D"false"><svg width=3D"18" height=3D"18" viewBox=3D"0 0 20 20" fill=3D"c=
urrentColor" xmlns=3D"http://www.w3.org/2000/svg"><path fill-rule=3D"evenod=
d" clip-rule=3D"evenodd" d=3D"M10.8658 18.3114C10.8691 18.3113 10.8724 18.3=
112 10.8758 18.311C12.3521 18.2356 13.7005 17.9703 14.7085 17.5585C15.2099 =
17.3536 15.6698 17.0953 16.018 16.7706C16.367 16.445 16.6666 15.9887 16.666=
6 15.4165V4.58317C16.6666 3.9551 16.3079 3.46939 15.9125 3.13553C15.5132 2.=
79841 14.9849 2.53236 14.405 2.32525C14.2591 2.27315 14.1071 2.22378 13.949=
6 2.17727C12.8466 1.85173 11.4703 1.6665 9.99992 1.6665C8.31943 1.6665 6.76=
192 1.90843 5.59485 2.32525C5.5586 2.33819 5.52256 2.35137 5.48674 2.36477C=
4.9494 2.56589 4.46167 2.81948 4.08737 3.13553C3.69198 3.46939 3.33325 3.95=
51 3.33325 4.58317V15.4165C3.33325 15.9887 3.63282 16.445 3.98186 16.7706C4=
.33001 17.0953 4.78992 17.3536 5.29133 17.5585C6.29937 17.9703 7.64778 18.2=
356 9.12407 18.311C9.13612 18.3116 9.14812 18.312 9.16007 18.3121L9.16484 1=
8.3121C9.16647 18.3121 9.1681 18.3121 9.16973 18.3121H10.8301C10.8317 18.31=
21 10.8334 18.3121 10.835 18.3121L10.8658 18.3114ZM5.14387 4.74126C5.05378 =
4.66233 5.01838 4.6091 5.0052 4.58317C5.01926 4.55551 5.0586 4.49679 5.1626=
2 4.40896C5.35374 4.24758 5.67969 4.06472 6.15541 3.89482C6.27343 3.85267 6=
.39794 3.81228 6.52847 3.77387C7.44222 3.50501 8.6514 3.33317 9.99992 3.333=
17C11.5411 3.33317 12.9003 3.55761 13.8444 3.89482C14.2607 4.04348 14.5623 =
4.20207 14.7592 4.3475C14.7873 4.36828 14.8133 4.38878 14.8372 4.40896C14.9=
412 4.49679 14.9806 4.55551 14.9946 4.58317C14.9806 4.61083 14.9412 4.66955=
 14.8372 4.75739C14.8133 4.77756 14.7873 4.79806 14.7592 4.81884C14.5623 4.=
96427 14.2607 5.12286 13.8444 5.27152C12.9003 5.60873 11.5411 5.83317 9.999=
92 5.83317C8.45875 5.83317 7.09959 5.60873 6.15541 5.27152C5.67969 5.10163 =
5.35374 4.91876 5.16262 4.75739L5.14387 4.74126ZM14.405 6.84109C14.611 6.76=
753 14.8104 6.68653 14.9999 6.59755V9.9887C14.9931 10.0059 14.9672 10.0549 =
14.8811 10.1352C14.7335 10.2729 14.4734 10.4375 14.0782 10.5989C13.2929 10.=
9197 12.1414 11.1608 10.7907 11.2298L10.7822 11.2303H9.21767L9.2091 11.2298=
C7.85848 11.1608 6.70689 10.9197 5.92166 10.5989C5.52643 10.4375 5.26639 10=
.2729 5.11874 10.1352C5.03268 10.0549 5.00669 10.0059 4.99992 9.9887V6.5975=
5C5.18941 6.68653 5.38887 6.76753 5.59485 6.84109C6.76192 7.25791 8.31943 7=
.49984 9.99992 7.49984C11.6804 7.49984 13.2379 7.25791 14.405 6.84109ZM9.16=
007 12.9002V12.8954C9.14812 12.8953 9.13612 12.8949 9.12407 12.8943C7.64778=
 12.8189 6.29937 12.5536 5.29133 12.1418C5.1924 12.1014 5.09508 12.0589 4.9=
9992 12.0142V15.4054C5.00669 15.4226 5.03268 15.4716 5.11874 15.5518C5.2663=
9 15.6896 5.52643 15.8541 5.92166 16.0156C6.69737 16.3325 7.83061 16.5716 9=
.16007 16.6439V16.6422H10.8658C12.184 16.5682 13.3075 16.3304 14.0782 16.01=
56C14.4734 15.8541 14.7335 15.6896 14.8811 15.5518C14.9672 15.4716 14.9931 =
15.4226 14.9999 15.4054V12.0142C14.9048 12.0589 14.8074 12.1014 14.7085 12.=
1418C13.7005 12.5536 12.3521 12.8189 10.8758 12.8943L10.8658 12.8948V12.900=
2H9.16007Z" fill=3D"currentColor"></path></svg></div></div></span></span></=
button><button type=3D"button" tabindex=3D"0" class=3D"btn btn-sm btn-minim=
al btn-neutral inspect-logs-btn"><span class=3D"btn-label-wrap"><span class=
=3D"btn-label-inner">Logs</span><span class=3D"btn-node"><svg xmlns=3D"http=
://www.w3.org/2000/svg" width=3D"18px" height=3D"18px" fill=3D"currentColor=
" viewBox=3D"0 0 24 24"><path fill-rule=3D"evenodd" d=3D"M18 5a1 1 0 0 1 1 =
1v12a1 1 0 0 1-1 1h-2V5h2Zm-4 0v14H6a1 1 0 0 1-1-1V6a1 1 0 0 1 1-1h8Zm7 1a3=
 3 0 0 0-3-3H6a3 3 0 0 0-3 3v12a3 3 0 0 0 3 3h12a3 3 0 0 0 3-3V6Z" clip-rul=
e=3D"evenodd"></path></svg></span></span></button></div><div class=3D"threa=
d-messages"><div class=3D"thread-detail"><div class=3D"thread-content-conta=
iner-center"><div class=3D"thread-detail-header"><div class=3D"thread-id-la=
bel"></div><div class=3D"thread-action-section"></div></div><div class=3D"t=
hread-run-item"><div class=3D"thread-run-header"><div class=3D"thread-item-=
left"><div class=3D"expanded-query"><div class=3D"tool-row"><div class=3D"m=
onospace-query">code_interpreter</div></div><div class=3D"pre-query"><div c=
lass=3D"code-sample"><div class=3D"code-sample-body code-sample-body-small"=
><button type=3D"button" tabindex=3D"0" class=3D"btn btn-sm btn-minimal btn=
-neutral code-sample-copy-float" aria-label=3D"Copy"><span class=3D"btn-lab=
el-wrap"><span class=3D"btn-node start-node"><svg xmlns=3D"http://www.w3.or=
g/2000/svg" width=3D"18px" height=3D"18px" fill=3D"currentColor" viewBox=3D=
"0 0 24 24"><path fill-rule=3D"evenodd" d=3D"M7 5a3 3 0 0 1 3-3h9a3 3 0 0 1=
 3 3v9a3 3 0 0 1-3 3h-2v2a3 3 0 0 1-3 3H5a3 3 0 0 1-3-3v-9a3 3 0 0 1 3-3h2V=
5Zm2 2h5a3 3 0 0 1 3 3v5h2a1 1 0 0 0 1-1V5a1 1 0 0 0-1-1h-9a1 1 0 0 0-1 1v2=
ZM5 9a1 1 0 0 0-1 1v9a1 1 0 0 0 1 1h9a1 1 0 0 0 1-1v-9a1 1 0 0 0-1-1H5Z" cl=
ip-rule=3D"evenodd"></path></svg></span></span></button><pre class=3D"hljs =
syntax-highlighter dark-mode code-sample-pre"><code class=3D"language-pytho=
n" style=3D"white-space: pre;"><code style=3D"float: left; padding-right: 1=
0px;"><span class=3D"react-syntax-highlighter-line-number">1
</span><span class=3D"react-syntax-highlighter-line-number">2
</span><span class=3D"react-syntax-highlighter-line-number">3
</span><span class=3D"react-syntax-highlighter-line-number">4
</span><span class=3D"react-syntax-highlighter-line-number">5
</span><span class=3D"react-syntax-highlighter-line-number">6
</span><span class=3D"react-syntax-highlighter-line-number">7
</span><span class=3D"react-syntax-highlighter-line-number">8
</span><span class=3D"react-syntax-highlighter-line-number">9
</span><span class=3D"react-syntax-highlighter-line-number">10
</span><span class=3D"react-syntax-highlighter-line-number">11
</span><span class=3D"react-syntax-highlighter-line-number">12
</span><span class=3D"react-syntax-highlighter-line-number">13
</span><span class=3D"react-syntax-highlighter-line-number">14
</span><span class=3D"react-syntax-highlighter-line-number">15
</span><span class=3D"react-syntax-highlighter-line-number">16
</span><span class=3D"react-syntax-highlighter-line-number">17
</span><span class=3D"react-syntax-highlighter-line-number">18
</span><span class=3D"react-syntax-highlighter-line-number">19
</span><span class=3D"react-syntax-highlighter-line-number">20
</span><span class=3D"react-syntax-highlighter-line-number">21
</span><span class=3D"react-syntax-highlighter-line-number">22
</span><span class=3D"react-syntax-highlighter-line-number">23
</span><span class=3D"react-syntax-highlighter-line-number">24
</span><span class=3D"react-syntax-highlighter-line-number">25
</span><span class=3D"react-syntax-highlighter-line-number">26
</span><span class=3D"react-syntax-highlighter-line-number">27
</span><span class=3D"react-syntax-highlighter-line-number">28
</span><span class=3D"react-syntax-highlighter-line-number">29
</span><span class=3D"react-syntax-highlighter-line-number">30
</span><span class=3D"react-syntax-highlighter-line-number">31
</span><span class=3D"react-syntax-highlighter-line-number">32
</span><span class=3D"react-syntax-highlighter-line-number">33
</span><span class=3D"react-syntax-highlighter-line-number">34
</span><span class=3D"react-syntax-highlighter-line-number">35
</span><span class=3D"react-syntax-highlighter-line-number">36
</span><span class=3D"react-syntax-highlighter-line-number">37
</span><span class=3D"react-syntax-highlighter-line-number">38
</span><span class=3D"react-syntax-highlighter-line-number">39
</span><span class=3D"react-syntax-highlighter-line-number">40
</span><span class=3D"react-syntax-highlighter-line-number">41
</span><span class=3D"react-syntax-highlighter-line-number">42
</span><span class=3D"react-syntax-highlighter-line-number">43
</span><span class=3D"react-syntax-highlighter-line-number">44
</span><span class=3D"react-syntax-highlighter-line-number">45
</span><span class=3D"react-syntax-highlighter-line-number">46
</span><span class=3D"react-syntax-highlighter-line-number">47
</span><span class=3D"react-syntax-highlighter-line-number">48
</span><span class=3D"react-syntax-highlighter-line-number">49
</span><span class=3D"react-syntax-highlighter-line-number">50
</span><span class=3D"react-syntax-highlighter-line-number">51
</span><span class=3D"react-syntax-highlighter-line-number">52
</span><span class=3D"react-syntax-highlighter-line-number">53
</span><span class=3D"react-syntax-highlighter-line-number">54
</span><span class=3D"react-syntax-highlighter-line-number">55
</span><span class=3D"react-syntax-highlighter-line-number">56
</span><span class=3D"react-syntax-highlighter-line-number">57
</span><span class=3D"react-syntax-highlighter-line-number">58
</span><span class=3D"react-syntax-highlighter-line-number">59
</span><span class=3D"react-syntax-highlighter-line-number">60
</span><span class=3D"react-syntax-highlighter-line-number">61
</span><span class=3D"react-syntax-highlighter-line-number">62
</span><span class=3D"react-syntax-highlighter-line-number">63
</span><span class=3D"react-syntax-highlighter-line-number">64
</span><span class=3D"react-syntax-highlighter-line-number">65
</span><span class=3D"react-syntax-highlighter-line-number">66
</span><span class=3D"react-syntax-highlighter-line-number">67
</span><span class=3D"react-syntax-highlighter-line-number">68
</span><span class=3D"react-syntax-highlighter-line-number">69
</span><span class=3D"react-syntax-highlighter-line-number">70
</span><span class=3D"react-syntax-highlighter-line-number">71
</span><span class=3D"react-syntax-highlighter-line-number">72
</span><span class=3D"react-syntax-highlighter-line-number">73
</span><span class=3D"react-syntax-highlighter-line-number">74
</span><span class=3D"react-syntax-highlighter-line-number">75
</span><span class=3D"react-syntax-highlighter-line-number">76
</span><span class=3D"react-syntax-highlighter-line-number">77
</span><span class=3D"react-syntax-highlighter-line-number">78
</span><span class=3D"react-syntax-highlighter-line-number">79
</span><span class=3D"react-syntax-highlighter-line-number">80
</span><span class=3D"react-syntax-highlighter-line-number">81
</span><span class=3D"react-syntax-highlighter-line-number">82
</span></code><span><span class=3D"hljs-keyword">from</span><span> sympy </=
span><span class=3D"hljs-keyword">import</span><span> symbols, Eq, Not, And=
, Or, Xor, simplify
</span></span><span><span></span><span class=3D"hljs-keyword">from</span><s=
pan> itertools </span><span class=3D"hljs-keyword">import</span><span> prod=
uct
</span></span><span>
</span><span><span></span><span class=3D"hljs-class hljs-keyword">class</sp=
an><span class=3D"hljs-class"> </span><span class=3D"hljs-class hljs-title"=
>EquationParser</span><span class=3D"hljs-class">:</span><span>
</span></span><span><span>    </span><span class=3D"hljs-function hljs-keyw=
ord">def</span><span class=3D"hljs-function"> </span><span class=3D"hljs-fu=
nction hljs-title">__init__</span><span class=3D"hljs-function">(</span><sp=
an class=3D"hljs-function hljs-params">self, mso, equations, data</span><sp=
an class=3D"hljs-function">):</span><span>
</span></span><span>        self.mso =3D mso
</span><span>        self.equations =3D equations
</span><span>        self.data =3D data
</span><span>        self.parsed_equations =3D self._parse_equations()
</span><span>
</span><span><span>    </span><span class=3D"hljs-function hljs-keyword">de=
f</span><span class=3D"hljs-function"> </span><span class=3D"hljs-function =
hljs-title">_parse_equations</span><span class=3D"hljs-function">(</span><s=
pan class=3D"hljs-function hljs-params">self</span><span class=3D"hljs-func=
tion">):</span><span>
</span></span><span>        parsed =3D {}
</span><span><span>        </span><span class=3D"hljs-keyword">for</span><s=
pan> name, equation </span><span class=3D"hljs-keyword">in</span><span> sel=
f.equations.items():
</span></span><span><span>            left_side, right_side =3D </span><spa=
n class=3D"hljs-built_in">map</span><span>(</span><span class=3D"hljs-built=
_in">str</span><span>.strip, equation.split(</span><span class=3D"hljs-stri=
ng">'=3D'</span><span>))
</span></span><span><span>            symbols_dict =3D {var: symbols(var) <=
/span><span class=3D"hljs-keyword">for</span><span> var </span><span class=
=3D"hljs-keyword">in</span><span> left_side.split() + right_side.split() </=
span><span class=3D"hljs-keyword">if</span><span> var.isidentifier()}
</span></span><span>           =20
</span><span><span>            </span><span class=3D"hljs-comment"># Replac=
e observed data in the symbols_dict</span><span>
</span></span><span><span>            </span><span class=3D"hljs-keyword">f=
or</span><span> key </span><span class=3D"hljs-keyword">in</span><span> sel=
f.data:
</span></span><span><span>                </span><span class=3D"hljs-keywor=
d">if</span><span> key </span><span class=3D"hljs-keyword">in</span><span> =
symbols_dict:
</span></span><span>                    symbols_dict[key] =3D self.data[key=
]
</span><span>           =20
</span><span><span>            </span><span class=3D"hljs-comment"># Build =
the equation</span><span>
</span></span><span><span>            </span><span class=3D"hljs-keyword">i=
f</span><span> </span><span class=3D"hljs-string">'&amp;'</span><span> </sp=
an><span class=3D"hljs-keyword">in</span><span> left_side:
</span></span><span><span>                parsed_expression =3D And(*[symbo=
ls_dict[var] </span><span class=3D"hljs-keyword">for</span><span> var </spa=
n><span class=3D"hljs-keyword">in</span><span> left_side.split(</span><span=
 class=3D"hljs-string">'&amp;'</span><span>)])
</span></span><span><span>            </span><span class=3D"hljs-keyword">e=
lif</span><span> </span><span class=3D"hljs-string">'|'</span><span> </span=
><span class=3D"hljs-keyword">in</span><span> left_side:
</span></span><span><span>                parsed_expression =3D Or(*[symbol=
s_dict[var] </span><span class=3D"hljs-keyword">for</span><span> var </span=
><span class=3D"hljs-keyword">in</span><span> left_side.split(</span><span =
class=3D"hljs-string">'|'</span><span>)])
</span></span><span><span>            </span><span class=3D"hljs-keyword">e=
lif</span><span> </span><span class=3D"hljs-string">'^'</span><span> </span=
><span class=3D"hljs-keyword">in</span><span> left_side:
</span></span><span><span>                parsed_expression =3D Xor(*[symbo=
ls_dict[var] </span><span class=3D"hljs-keyword">for</span><span> var </spa=
n><span class=3D"hljs-keyword">in</span><span> left_side.split(</span><span=
 class=3D"hljs-string">'^'</span><span>)])
</span></span><span><span>            </span><span class=3D"hljs-keyword">e=
lif</span><span> </span><span class=3D"hljs-string">'~&amp;'</span><span> <=
/span><span class=3D"hljs-keyword">in</span><span> left_side:
</span></span><span><span>                parsed_expression =3D Not(And(*[s=
ymbols_dict[var] </span><span class=3D"hljs-keyword">for</span><span> var <=
/span><span class=3D"hljs-keyword">in</span><span> left_side.split(</span><=
span class=3D"hljs-string">'~&amp;'</span><span>)]))
</span></span><span><span>            </span><span class=3D"hljs-keyword">e=
lif</span><span> </span><span class=3D"hljs-string">'~|'</span><span> </spa=
n><span class=3D"hljs-keyword">in</span><span> left_side:
</span></span><span><span>                parsed_expression =3D Not(Or(*[sy=
mbols_dict[var] </span><span class=3D"hljs-keyword">for</span><span> var </=
span><span class=3D"hljs-keyword">in</span><span> left_side.split(</span><s=
pan class=3D"hljs-string">'~|'</span><span>)]))
</span></span><span><span>            </span><span class=3D"hljs-keyword">e=
lif</span><span> </span><span class=3D"hljs-string">'~^'</span><span> </spa=
n><span class=3D"hljs-keyword">in</span><span> left_side:
</span></span><span><span>                parsed_expression =3D Not(Xor(*[s=
ymbols_dict[var] </span><span class=3D"hljs-keyword">for</span><span> var <=
/span><span class=3D"hljs-keyword">in</span><span> left_side.split(</span><=
span class=3D"hljs-string">'~^'</span><span>)]))
</span></span><span><span>            </span><span class=3D"hljs-keyword">e=
lif</span><span> </span><span class=3D"hljs-string">'~'</span><span> </span=
><span class=3D"hljs-keyword">in</span><span> left_side:
</span></span><span><span>                parsed_expression =3D Not(symbols=
_dict[left_side.replace(</span><span class=3D"hljs-string">'~'</span><span>=
, </span><span class=3D"hljs-string">''</span><span>).strip()])
</span></span><span><span>            </span><span class=3D"hljs-keyword">e=
lse</span><span>:
</span></span><span>                parsed_expression =3D symbols_dict[left=
_side]
</span><span>
</span><span>            right_expr =3D symbols_dict[right_side]
</span><span>            parsed[name] =3D Eq(parsed_expression, right_expr)
</span><span>
</span><span><span>        </span><span class=3D"hljs-keyword">return</span=
><span> parsed
</span></span><span>
</span><span><span>    </span><span class=3D"hljs-function hljs-keyword">de=
f</span><span class=3D"hljs-function"> </span><span class=3D"hljs-function =
hljs-title">_is_contradictory</span><span class=3D"hljs-function">(</span><=
span class=3D"hljs-function hljs-params">self</span><span class=3D"hljs-fun=
ction">):</span><span>
</span></span><span><span>        is_logical =3D </span><span class=3D"hljs=
-built_in">any</span><span>(char </span><span class=3D"hljs-keyword">in</sp=
an><span> equation </span><span class=3D"hljs-keyword">for</span><span> equ=
ation </span><span class=3D"hljs-keyword">in</span><span> self.equations.va=
lues() </span><span class=3D"hljs-keyword">for</span><span> char </span><sp=
an class=3D"hljs-keyword">in</span><span> [</span><span class=3D"hljs-strin=
g">'~'</span><span>, </span><span class=3D"hljs-string">'&amp;'</span><span=
>, </span><span class=3D"hljs-string">'|'</span><span>, </span><span class=
=3D"hljs-string">'^'</span><span>])
</span></span><span><span>        </span><span class=3D"hljs-keyword">if</s=
pan><span> is_logical:
</span></span><span><span>            variables =3D {var </span><span class=
=3D"hljs-keyword">for</span><span> eq </span><span class=3D"hljs-keyword">i=
n</span><span> self.equations.values() </span><span class=3D"hljs-keyword">=
for</span><span> var </span><span class=3D"hljs-keyword">in</span><span> eq=
.free_symbols}
</span></span><span><span>            </span><span class=3D"hljs-keyword">f=
or</span><span> combination </span><span class=3D"hljs-keyword">in</span><s=
pan> product([</span><span class=3D"hljs-literal">True</span><span>, </span=
><span class=3D"hljs-literal">False</span><span>], repeat=3D</span><span cl=
ass=3D"hljs-built_in">len</span><span>(variables)):
</span></span><span><span>                assignment =3D </span><span class=
=3D"hljs-built_in">dict</span><span>(</span><span class=3D"hljs-built_in">z=
ip</span><span>(variables, combination))
</span></span><span><span>                </span><span class=3D"hljs-keywor=
d">if</span><span> </span><span class=3D"hljs-built_in">all</span><span>(eq=
.subs(assignment) </span><span class=3D"hljs-keyword">for</span><span> eq <=
/span><span class=3D"hljs-keyword">in</span><span> self.parsed_equations.va=
lues()):
</span></span><span><span>                    </span><span class=3D"hljs-ke=
yword">return</span><span> </span><span class=3D"hljs-literal">False</span>=
<span>
</span></span><span><span>            </span><span class=3D"hljs-keyword">r=
eturn</span><span> </span><span class=3D"hljs-literal">True</span><span>
</span></span><span><span>        </span><span class=3D"hljs-keyword">else<=
/span><span>:
</span></span><span><span>            </span><span class=3D"hljs-keyword">f=
rom</span><span> sympy </span><span class=3D"hljs-keyword">import</span><sp=
an> solve
</span></span><span><span>            solutions =3D solve(</span><span clas=
s=3D"hljs-built_in">list</span><span>(self.parsed_equations.values()), </sp=
an><span class=3D"hljs-built_in">dict</span><span>=3D</span><span class=3D"=
hljs-literal">True</span><span>)
</span></span><span><span>            </span><span class=3D"hljs-keyword">r=
eturn</span><span> </span><span class=3D"hljs-built_in">len</span><span>(so=
lutions) =3D=3D </span><span class=3D"hljs-number">0</span><span>
</span></span><span>
</span><span><span>    </span><span class=3D"hljs-function hljs-keyword">de=
f</span><span class=3D"hljs-function"> </span><span class=3D"hljs-function =
hljs-title">get_minimal_conflicts</span><span class=3D"hljs-function">(</sp=
an><span class=3D"hljs-function hljs-params">self</span><span class=3D"hljs=
-function">):</span><span>
</span></span><span>        minimal_conflicts =3D []
</span><span><span>        </span><span class=3D"hljs-keyword">for</span><s=
pan> group </span><span class=3D"hljs-keyword">in</span><span> self.mso:
</span></span><span><span>            group_equations =3D {name: self.parse=
d_equations[name] </span><span class=3D"hljs-keyword">for</span><span> name=
 </span><span class=3D"hljs-keyword">in</span><span> group </span><span cla=
ss=3D"hljs-keyword">if</span><span> name </span><span class=3D"hljs-keyword=
">in</span><span> self.parsed_equations}
</span></span><span><span>            </span><span class=3D"hljs-keyword">i=
f</span><span> self._is_contradictory():
</span></span><span><span>                minimal_conflicts.append(</span><=
span class=3D"hljs-built_in">sorted</span><span>(group))
</span></span><span>
</span><span><span>        </span><span class=3D"hljs-keyword">return</span=
><span> {</span><span class=3D"hljs-string">'minimal_conflicts'</span><span=
>: </span><span class=3D"hljs-built_in">sorted</span><span>(minimal_conflic=
ts, key=3D</span><span class=3D"hljs-keyword">lambda</span><span> x: (</spa=
n><span class=3D"hljs-built_in">len</span><span>(x), x))}
</span></span><span>
</span><span><span></span><span class=3D"hljs-comment"># Define input data<=
/span><span>
</span></span><span><span>mso =3D [[</span><span class=3D"hljs-string">'A1'=
</span><span>, </span><span class=3D"hljs-string">'O1'</span><span>, </span=
><span class=3D"hljs-string">'O2'</span><span>], [</span><span class=3D"hlj=
s-string">'A2'</span><span>, </span><span class=3D"hljs-string">'O2'</span>=
<span>, </span><span class=3D"hljs-string">'O3'</span><span>], [</span><spa=
n class=3D"hljs-string">'A1'</span><span>, </span><span class=3D"hljs-strin=
g">'A2'</span><span>, </span><span class=3D"hljs-string">'O1'</span><span>,=
 </span><span class=3D"hljs-string">'O3'</span><span>]]
</span></span><span>equations =3D {
</span><span><span>    </span><span class=3D"hljs-string">'O1'</span><span>=
: </span><span class=3D"hljs-string">'a | c =3D x01'</span><span>,
</span></span><span><span>    </span><span class=3D"hljs-string">'O2'</span=
><span>: </span><span class=3D"hljs-string">'b | d =3D x02'</span><span>,
</span></span><span><span>    </span><span class=3D"hljs-string">'O3'</span=
><span>: </span><span class=3D"hljs-string">'c | e =3D x03'</span><span>,
</span></span><span><span>    </span><span class=3D"hljs-string">'A1'</span=
><span>: </span><span class=3D"hljs-string">'x01 &amp; x02 =3D f'</span><sp=
an>,
</span></span><span><span>    </span><span class=3D"hljs-string">'A2'</span=
><span>: </span><span class=3D"hljs-string">'x02 &amp; x03 =3D g'</span><sp=
an>
</span></span><span>}
</span><span><span>data =3D {</span><span class=3D"hljs-string">'a'</span><=
span>: </span><span class=3D"hljs-literal">True</span><span>, </span><span =
class=3D"hljs-string">'b'</span><span>: </span><span class=3D"hljs-literal"=
>True</span><span>, </span><span class=3D"hljs-string">'c'</span><span>: </=
span><span class=3D"hljs-literal">True</span><span>, </span><span class=3D"=
hljs-string">'d'</span><span>: </span><span class=3D"hljs-literal">True</sp=
an><span>, </span><span class=3D"hljs-string">'e'</span><span>: </span><spa=
n class=3D"hljs-literal">True</span><span>, </span><span class=3D"hljs-stri=
ng">'f'</span><span>: </span><span class=3D"hljs-literal">False</span><span=
>, </span><span class=3D"hljs-string">'g'</span><span>: </span><span class=
=3D"hljs-literal">False</span><span>}
</span></span><span>
</span><span><span></span><span class=3D"hljs-comment"># Create an instance=
 of the EquationParser and get minimal conflicts</span><span>
</span></span><span>parser =3D EquationParser(mso, equations, data)
</span><span>output =3D parser.get_minimal_conflicts()
</span><span>output</span></code></pre></div></div></div></div></div></div>=
</div><div class=3D"thread-run-item"><div class=3D"thread-run-header"><div =
class=3D"thread-item-left"><div class=3D"expanded-query"><div class=3D"tool=
-row"><div class=3D"monospace-query">code_interpreter</div></div><div class=
=3D"pre-query"><div class=3D"code-sample"><div class=3D"code-sample-body co=
de-sample-body-small"><button type=3D"button" tabindex=3D"0" class=3D"btn b=
tn-sm btn-minimal btn-neutral code-sample-copy-float" aria-label=3D"Copy"><=
span class=3D"btn-label-wrap"><span class=3D"btn-node start-node"><svg xmln=
s=3D"http://www.w3.org/2000/svg" width=3D"18px" height=3D"18px" fill=3D"cur=
rentColor" viewBox=3D"0 0 24 24"><path fill-rule=3D"evenodd" d=3D"M7 5a3 3 =
0 0 1 3-3h9a3 3 0 0 1 3 3v9a3 3 0 0 1-3 3h-2v2a3 3 0 0 1-3 3H5a3 3 0 0 1-3-=
3v-9a3 3 0 0 1 3-3h2V5Zm2 2h5a3 3 0 0 1 3 3v5h2a1 1 0 0 0 1-1V5a1 1 0 0 0-1=
-1h-9a1 1 0 0 0-1 1v2ZM5 9a1 1 0 0 0-1 1v9a1 1 0 0 0 1 1h9a1 1 0 0 0 1-1v-9=
a1 1 0 0 0-1-1H5Z" clip-rule=3D"evenodd"></path></svg></span></span></butto=
n><pre class=3D"hljs syntax-highlighter dark-mode code-sample-pre"><code cl=
ass=3D"language-python" style=3D"white-space: pre;"><code style=3D"float: l=
eft; padding-right: 10px;"><span class=3D"react-syntax-highlighter-line-num=
ber">1
</span><span class=3D"react-syntax-highlighter-line-number">2
</span><span class=3D"react-syntax-highlighter-line-number">3
</span><span class=3D"react-syntax-highlighter-line-number">4
</span><span class=3D"react-syntax-highlighter-line-number">5
</span><span class=3D"react-syntax-highlighter-line-number">6
</span><span class=3D"react-syntax-highlighter-line-number">7
</span><span class=3D"react-syntax-highlighter-line-number">8
</span><span class=3D"react-syntax-highlighter-line-number">9
</span><span class=3D"react-syntax-highlighter-line-number">10
</span><span class=3D"react-syntax-highlighter-line-number">11
</span><span class=3D"react-syntax-highlighter-line-number">12
</span><span class=3D"react-syntax-highlighter-line-number">13
</span><span class=3D"react-syntax-highlighter-line-number">14
</span><span class=3D"react-syntax-highlighter-line-number">15
</span><span class=3D"react-syntax-highlighter-line-number">16
</span><span class=3D"react-syntax-highlighter-line-number">17
</span><span class=3D"react-syntax-highlighter-line-number">18
</span><span class=3D"react-syntax-highlighter-line-number">19
</span><span class=3D"react-syntax-highlighter-line-number">20
</span><span class=3D"react-syntax-highlighter-line-number">21
</span><span class=3D"react-syntax-highlighter-line-number">22
</span><span class=3D"react-syntax-highlighter-line-number">23
</span><span class=3D"react-syntax-highlighter-line-number">24
</span><span class=3D"react-syntax-highlighter-line-number">25
</span><span class=3D"react-syntax-highlighter-line-number">26
</span><span class=3D"react-syntax-highlighter-line-number">27
</span><span class=3D"react-syntax-highlighter-line-number">28
</span><span class=3D"react-syntax-highlighter-line-number">29
</span><span class=3D"react-syntax-highlighter-line-number">30
</span><span class=3D"react-syntax-highlighter-line-number">31
</span><span class=3D"react-syntax-highlighter-line-number">32
</span><span class=3D"react-syntax-highlighter-line-number">33
</span><span class=3D"react-syntax-highlighter-line-number">34
</span><span class=3D"react-syntax-highlighter-line-number">35
</span><span class=3D"react-syntax-highlighter-line-number">36
</span><span class=3D"react-syntax-highlighter-line-number">37
</span><span class=3D"react-syntax-highlighter-line-number">38
</span><span class=3D"react-syntax-highlighter-line-number">39
</span><span class=3D"react-syntax-highlighter-line-number">40
</span><span class=3D"react-syntax-highlighter-line-number">41
</span><span class=3D"react-syntax-highlighter-line-number">42
</span><span class=3D"react-syntax-highlighter-line-number">43
</span><span class=3D"react-syntax-highlighter-line-number">44
</span><span class=3D"react-syntax-highlighter-line-number">45
</span><span class=3D"react-syntax-highlighter-line-number">46
</span><span class=3D"react-syntax-highlighter-line-number">47
</span><span class=3D"react-syntax-highlighter-line-number">48
</span><span class=3D"react-syntax-highlighter-line-number">49
</span><span class=3D"react-syntax-highlighter-line-number">50
</span><span class=3D"react-syntax-highlighter-line-number">51
</span><span class=3D"react-syntax-highlighter-line-number">52
</span><span class=3D"react-syntax-highlighter-line-number">53
</span><span class=3D"react-syntax-highlighter-line-number">54
</span><span class=3D"react-syntax-highlighter-line-number">55
</span><span class=3D"react-syntax-highlighter-line-number">56
</span><span class=3D"react-syntax-highlighter-line-number">57
</span><span class=3D"react-syntax-highlighter-line-number">58
</span><span class=3D"react-syntax-highlighter-line-number">59
</span><span class=3D"react-syntax-highlighter-line-number">60
</span><span class=3D"react-syntax-highlighter-line-number">61
</span><span class=3D"react-syntax-highlighter-line-number">62
</span><span class=3D"react-syntax-highlighter-line-number">63
</span><span class=3D"react-syntax-highlighter-line-number">64
</span><span class=3D"react-syntax-highlighter-line-number">65
</span><span class=3D"react-syntax-highlighter-line-number">66
</span><span class=3D"react-syntax-highlighter-line-number">67
</span><span class=3D"react-syntax-highlighter-line-number">68
</span><span class=3D"react-syntax-highlighter-line-number">69
</span><span class=3D"react-syntax-highlighter-line-number">70
</span><span class=3D"react-syntax-highlighter-line-number">71
</span><span class=3D"react-syntax-highlighter-line-number">72
</span><span class=3D"react-syntax-highlighter-line-number">73
</span><span class=3D"react-syntax-highlighter-line-number">74
</span><span class=3D"react-syntax-highlighter-line-number">75
</span><span class=3D"react-syntax-highlighter-line-number">76
</span><span class=3D"react-syntax-highlighter-line-number">77
</span><span class=3D"react-syntax-highlighter-line-number">78
</span><span class=3D"react-syntax-highlighter-line-number">79
</span><span class=3D"react-syntax-highlighter-line-number">80
</span><span class=3D"react-syntax-highlighter-line-number">81
</span><span class=3D"react-syntax-highlighter-line-number">82
</span><span class=3D"react-syntax-highlighter-line-number">83
</span></code><span><span class=3D"hljs-keyword">from</span><span> sympy </=
span><span class=3D"hljs-keyword">import</span><span> symbols, Eq, Not, And=
, Or, Xor
</span></span><span><span></span><span class=3D"hljs-keyword">from</span><s=
pan> itertools </span><span class=3D"hljs-keyword">import</span><span> prod=
uct
</span></span><span>
</span><span><span></span><span class=3D"hljs-class hljs-keyword">class</sp=
an><span class=3D"hljs-class"> </span><span class=3D"hljs-class hljs-title"=
>EquationParser</span><span class=3D"hljs-class">:</span><span>
</span></span><span><span>    </span><span class=3D"hljs-function hljs-keyw=
ord">def</span><span class=3D"hljs-function"> </span><span class=3D"hljs-fu=
nction hljs-title">__init__</span><span class=3D"hljs-function">(</span><sp=
an class=3D"hljs-function hljs-params">self, mso, equations, data</span><sp=
an class=3D"hljs-function">):</span><span>
</span></span><span>        self.mso =3D mso
</span><span>        self.equations =3D equations
</span><span>        self.data =3D data
</span><span>        self.parsed_equations =3D self._parse_equations()
</span><span>
</span><span><span>    </span><span class=3D"hljs-function hljs-keyword">de=
f</span><span class=3D"hljs-function"> </span><span class=3D"hljs-function =
hljs-title">_parse_equations</span><span class=3D"hljs-function">(</span><s=
pan class=3D"hljs-function hljs-params">self</span><span class=3D"hljs-func=
tion">):</span><span>
</span></span><span>        parsed =3D {}
</span><span><span>        </span><span class=3D"hljs-keyword">for</span><s=
pan> name, equation </span><span class=3D"hljs-keyword">in</span><span> sel=
f.equations.items():
</span></span><span><span>            left_side, right_side =3D </span><spa=
n class=3D"hljs-built_in">map</span><span>(</span><span class=3D"hljs-built=
_in">str</span><span>.strip, equation.split(</span><span class=3D"hljs-stri=
ng">'=3D'</span><span>))
</span></span><span><span>            </span><span class=3D"hljs-comment">#=
 Create symbols dictionary</span><span>
</span></span><span><span>            symbols_dict =3D {var: symbols(var) <=
/span><span class=3D"hljs-keyword">for</span><span> var </span><span class=
=3D"hljs-keyword">in</span><span> left_side.split() + right_side.split() </=
span><span class=3D"hljs-keyword">if</span><span> var.isidentifier()}
</span></span><span>           =20
</span><span><span>            </span><span class=3D"hljs-comment"># Replac=
e observed data</span><span>
</span></span><span><span>            </span><span class=3D"hljs-keyword">f=
or</span><span> key </span><span class=3D"hljs-keyword">in</span><span> sel=
f.data:
</span></span><span><span>                </span><span class=3D"hljs-keywor=
d">if</span><span> key </span><span class=3D"hljs-keyword">in</span><span> =
symbols_dict:
</span></span><span>                    symbols_dict[key] =3D self.data[key=
]
</span><span>           =20
</span><span><span>            </span><span class=3D"hljs-comment"># Build =
the equation based on the operator present in left_side</span><span>
</span></span><span><span>            </span><span class=3D"hljs-keyword">i=
f</span><span> </span><span class=3D"hljs-string">'&amp;'</span><span> </sp=
an><span class=3D"hljs-keyword">in</span><span> left_side:
</span></span><span><span>                parsed_expression =3D And(*[symbo=
ls_dict[var.strip()] </span><span class=3D"hljs-keyword">for</span><span> v=
ar </span><span class=3D"hljs-keyword">in</span><span> left_side.split(</sp=
an><span class=3D"hljs-string">'&amp;'</span><span>)])
</span></span><span><span>            </span><span class=3D"hljs-keyword">e=
lif</span><span> </span><span class=3D"hljs-string">'|'</span><span> </span=
><span class=3D"hljs-keyword">in</span><span> left_side:
</span></span><span><span>                parsed_expression =3D Or(*[symbol=
s_dict[var.strip()] </span><span class=3D"hljs-keyword">for</span><span> va=
r </span><span class=3D"hljs-keyword">in</span><span> left_side.split(</spa=
n><span class=3D"hljs-string">'|'</span><span>)])
</span></span><span><span>            </span><span class=3D"hljs-keyword">e=
lif</span><span> </span><span class=3D"hljs-string">'^'</span><span> </span=
><span class=3D"hljs-keyword">in</span><span> left_side:
</span></span><span><span>                parsed_expression =3D Xor(*[symbo=
ls_dict[var.strip()] </span><span class=3D"hljs-keyword">for</span><span> v=
ar </span><span class=3D"hljs-keyword">in</span><span> left_side.split(</sp=
an><span class=3D"hljs-string">'^'</span><span>)])
</span></span><span><span>            </span><span class=3D"hljs-keyword">e=
lif</span><span> </span><span class=3D"hljs-string">'~&amp;'</span><span> <=
/span><span class=3D"hljs-keyword">in</span><span> left_side:
</span></span><span><span>                parsed_expression =3D Not(And(*[s=
ymbols_dict[var.strip()] </span><span class=3D"hljs-keyword">for</span><spa=
n> var </span><span class=3D"hljs-keyword">in</span><span> left_side.split(=
</span><span class=3D"hljs-string">'~&amp;'</span><span>)]))
</span></span><span><span>            </span><span class=3D"hljs-keyword">e=
lif</span><span> </span><span class=3D"hljs-string">'~|'</span><span> </spa=
n><span class=3D"hljs-keyword">in</span><span> left_side:
</span></span><span><span>                parsed_expression =3D Not(Or(*[sy=
mbols_dict[var.strip()] </span><span class=3D"hljs-keyword">for</span><span=
> var </span><span class=3D"hljs-keyword">in</span><span> left_side.split(<=
/span><span class=3D"hljs-string">'~|'</span><span>)]))
</span></span><span><span>            </span><span class=3D"hljs-keyword">e=
lif</span><span> </span><span class=3D"hljs-string">'~^'</span><span> </spa=
n><span class=3D"hljs-keyword">in</span><span> left_side:
</span></span><span><span>                parsed_expression =3D Not(Xor(*[s=
ymbols_dict[var.strip()] </span><span class=3D"hljs-keyword">for</span><spa=
n> var </span><span class=3D"hljs-keyword">in</span><span> left_side.split(=
</span><span class=3D"hljs-string">'~^'</span><span>)]))
</span></span><span><span>            </span><span class=3D"hljs-keyword">e=
lif</span><span> </span><span class=3D"hljs-string">'~'</span><span> </span=
><span class=3D"hljs-keyword">in</span><span> left_side:
</span></span><span><span>                parsed_expression =3D Not(symbols=
_dict[left_side.replace(</span><span class=3D"hljs-string">'~'</span><span>=
, </span><span class=3D"hljs-string">''</span><span>).strip()])
</span></span><span><span>            </span><span class=3D"hljs-keyword">e=
lse</span><span>:
</span></span><span>                parsed_expression =3D symbols_dict[left=
_side.strip()]
</span><span>
</span><span>            right_expr =3D symbols_dict[right_side.strip()]
</span><span>            parsed[name] =3D Eq(parsed_expression, right_expr)
</span><span>
</span><span><span>        </span><span class=3D"hljs-keyword">return</span=
><span> parsed
</span></span><span>
</span><span><span>    </span><span class=3D"hljs-function hljs-keyword">de=
f</span><span class=3D"hljs-function"> </span><span class=3D"hljs-function =
hljs-title">_is_contradictory</span><span class=3D"hljs-function">(</span><=
span class=3D"hljs-function hljs-params">self</span><span class=3D"hljs-fun=
ction">):</span><span>
</span></span><span><span>        is_logical =3D </span><span class=3D"hljs=
-built_in">any</span><span>(char </span><span class=3D"hljs-keyword">in</sp=
an><span> equation </span><span class=3D"hljs-keyword">for</span><span> equ=
ation </span><span class=3D"hljs-keyword">in</span><span> self.equations.va=
lues() </span><span class=3D"hljs-keyword">for</span><span> char </span><sp=
an class=3D"hljs-keyword">in</span><span> [</span><span class=3D"hljs-strin=
g">'~'</span><span>, </span><span class=3D"hljs-string">'&amp;'</span><span=
>, </span><span class=3D"hljs-string">'|'</span><span>, </span><span class=
=3D"hljs-string">'^'</span><span>])
</span></span><span><span>        </span><span class=3D"hljs-keyword">if</s=
pan><span> is_logical:
</span></span><span><span>            variables =3D {var </span><span class=
=3D"hljs-keyword">for</span><span> eq </span><span class=3D"hljs-keyword">i=
n</span><span> self.equations.values() </span><span class=3D"hljs-keyword">=
for</span><span> var </span><span class=3D"hljs-keyword">in</span><span> eq=
.free_symbols}
</span></span><span><span>            </span><span class=3D"hljs-keyword">f=
or</span><span> combination </span><span class=3D"hljs-keyword">in</span><s=
pan> product([</span><span class=3D"hljs-literal">True</span><span>, </span=
><span class=3D"hljs-literal">False</span><span>], repeat=3D</span><span cl=
ass=3D"hljs-built_in">len</span><span>(variables)):
</span></span><span><span>                assignment =3D </span><span class=
=3D"hljs-built_in">dict</span><span>(</span><span class=3D"hljs-built_in">z=
ip</span><span>(variables, combination))
</span></span><span><span>                </span><span class=3D"hljs-keywor=
d">if</span><span> </span><span class=3D"hljs-built_in">all</span><span>(eq=
.subs(assignment) </span><span class=3D"hljs-keyword">for</span><span> eq <=
/span><span class=3D"hljs-keyword">in</span><span> self.parsed_equations.va=
lues()):
</span></span><span><span>                    </span><span class=3D"hljs-ke=
yword">return</span><span> </span><span class=3D"hljs-literal">False</span>=
<span>
</span></span><span><span>            </span><span class=3D"hljs-keyword">r=
eturn</span><span> </span><span class=3D"hljs-literal">True</span><span>
</span></span><span><span>        </span><span class=3D"hljs-keyword">else<=
/span><span>:
</span></span><span><span>            </span><span class=3D"hljs-keyword">f=
rom</span><span> sympy </span><span class=3D"hljs-keyword">import</span><sp=
an> solve
</span></span><span><span>            solutions =3D solve(</span><span clas=
s=3D"hljs-built_in">list</span><span>(self.parsed_equations.values()), </sp=
an><span class=3D"hljs-built_in">dict</span><span>=3D</span><span class=3D"=
hljs-literal">True</span><span>)
</span></span><span><span>            </span><span class=3D"hljs-keyword">r=
eturn</span><span> </span><span class=3D"hljs-built_in">len</span><span>(so=
lutions) =3D=3D </span><span class=3D"hljs-number">0</span><span>
</span></span><span>
</span><span><span>    </span><span class=3D"hljs-function hljs-keyword">de=
f</span><span class=3D"hljs-function"> </span><span class=3D"hljs-function =
hljs-title">get_minimal_conflicts</span><span class=3D"hljs-function">(</sp=
an><span class=3D"hljs-function hljs-params">self</span><span class=3D"hljs=
-function">):</span><span>
</span></span><span>        minimal_conflicts =3D []
</span><span><span>        </span><span class=3D"hljs-keyword">for</span><s=
pan> group </span><span class=3D"hljs-keyword">in</span><span> self.mso:
</span></span><span><span>            group_equations =3D {name: self.parse=
d_equations[name] </span><span class=3D"hljs-keyword">for</span><span> name=
 </span><span class=3D"hljs-keyword">in</span><span> group </span><span cla=
ss=3D"hljs-keyword">if</span><span> name </span><span class=3D"hljs-keyword=
">in</span><span> self.parsed_equations}
</span></span><span><span>            </span><span class=3D"hljs-keyword">i=
f</span><span> self._is_contradictory():
</span></span><span><span>                minimal_conflicts.append(</span><=
span class=3D"hljs-built_in">sorted</span><span>(group))
</span></span><span>
</span><span><span>        </span><span class=3D"hljs-keyword">return</span=
><span> {</span><span class=3D"hljs-string">'minimal_conflicts'</span><span=
>: </span><span class=3D"hljs-built_in">sorted</span><span>(minimal_conflic=
ts, key=3D</span><span class=3D"hljs-keyword">lambda</span><span> x: (</spa=
n><span class=3D"hljs-built_in">len</span><span>(x), x))}
</span></span><span>
</span><span><span></span><span class=3D"hljs-comment"># Define input data<=
/span><span>
</span></span><span><span>mso =3D [[</span><span class=3D"hljs-string">'A1'=
</span><span>, </span><span class=3D"hljs-string">'O1'</span><span>, </span=
><span class=3D"hljs-string">'O2'</span><span>], [</span><span class=3D"hlj=
s-string">'A2'</span><span>, </span><span class=3D"hljs-string">'O2'</span>=
<span>, </span><span class=3D"hljs-string">'O3'</span><span>], [</span><spa=
n class=3D"hljs-string">'A1'</span><span>, </span><span class=3D"hljs-strin=
g">'A2'</span><span>, </span><span class=3D"hljs-string">'O1'</span><span>,=
 </span><span class=3D"hljs-string">'O3'</span><span>]]
</span></span><span>equations =3D {
</span><span><span>    </span><span class=3D"hljs-string">'O1'</span><span>=
: </span><span class=3D"hljs-string">'a | c =3D x01'</span><span>,
</span></span><span><span>    </span><span class=3D"hljs-string">'O2'</span=
><span>: </span><span class=3D"hljs-string">'b | d =3D x02'</span><span>,
</span></span><span><span>    </span><span class=3D"hljs-string">'O3'</span=
><span>: </span><span class=3D"hljs-string">'c | e =3D x03'</span><span>,
</span></span><span><span>    </span><span class=3D"hljs-string">'A1'</span=
><span>: </span><span class=3D"hljs-string">'x01 &amp; x02 =3D f'</span><sp=
an>,
</span></span><span><span>    </span><span class=3D"hljs-string">'A2'</span=
><span>: </span><span class=3D"hljs-string">'x02 &amp; x03 =3D g'</span><sp=
an>
</span></span><span>}
</span><span><span>data =3D {</span><span class=3D"hljs-string">'a'</span><=
span>: </span><span class=3D"hljs-literal">True</span><span>, </span><span =
class=3D"hljs-string">'b'</span><span>: </span><span class=3D"hljs-literal"=
>True</span><span>, </span><span class=3D"hljs-string">'c'</span><span>: </=
span><span class=3D"hljs-literal">True</span><span>, </span><span class=3D"=
hljs-string">'d'</span><span>: </span><span class=3D"hljs-literal">True</sp=
an><span>, </span><span class=3D"hljs-string">'e'</span><span>: </span><spa=
n class=3D"hljs-literal">True</span><span>, </span><span class=3D"hljs-stri=
ng">'f'</span><span>: </span><span class=3D"hljs-literal">False</span><span=
>, </span><span class=3D"hljs-string">'g'</span><span>: </span><span class=
=3D"hljs-literal">False</span><span>}
</span></span><span>
</span><span><span></span><span class=3D"hljs-comment"># Create an instance=
 of the EquationParser and get minimal conflicts</span><span>
</span></span><span>parser =3D EquationParser(mso, equations, data)
</span><span>output =3D parser.get_minimal_conflicts()
</span><span>output</span></code></pre></div></div></div></div></div></div>=
</div><div class=3D"thread-run-item"><div class=3D"thread-run-header"><div =
class=3D"thread-item-left"><div class=3D"expanded-query"><div class=3D"tool=
-row"><div class=3D"monospace-query">code_interpreter</div></div><div class=
=3D"pre-query"><div class=3D"code-sample"><div class=3D"code-sample-body co=
de-sample-body-small"><button type=3D"button" tabindex=3D"0" class=3D"btn b=
tn-sm btn-minimal btn-neutral code-sample-copy-float" aria-label=3D"Copy"><=
span class=3D"btn-label-wrap"><span class=3D"btn-node start-node"><svg xmln=
s=3D"http://www.w3.org/2000/svg" width=3D"18px" height=3D"18px" fill=3D"cur=
rentColor" viewBox=3D"0 0 24 24"><path fill-rule=3D"evenodd" d=3D"M7 5a3 3 =
0 0 1 3-3h9a3 3 0 0 1 3 3v9a3 3 0 0 1-3 3h-2v2a3 3 0 0 1-3 3H5a3 3 0 0 1-3-=
3v-9a3 3 0 0 1 3-3h2V5Zm2 2h5a3 3 0 0 1 3 3v5h2a1 1 0 0 0 1-1V5a1 1 0 0 0-1=
-1h-9a1 1 0 0 0-1 1v2ZM5 9a1 1 0 0 0-1 1v9a1 1 0 0 0 1 1h9a1 1 0 0 0 1-1v-9=
a1 1 0 0 0-1-1H5Z" clip-rule=3D"evenodd"></path></svg></span></span></butto=
n><pre class=3D"hljs syntax-highlighter dark-mode code-sample-pre"><code cl=
ass=3D"language-python" style=3D"white-space: pre;"><code style=3D"float: l=
eft; padding-right: 10px;"><span class=3D"react-syntax-highlighter-line-num=
ber">1
</span><span class=3D"react-syntax-highlighter-line-number">2
</span><span class=3D"react-syntax-highlighter-line-number">3
</span><span class=3D"react-syntax-highlighter-line-number">4
</span><span class=3D"react-syntax-highlighter-line-number">5
</span><span class=3D"react-syntax-highlighter-line-number">6
</span><span class=3D"react-syntax-highlighter-line-number">7
</span><span class=3D"react-syntax-highlighter-line-number">8
</span><span class=3D"react-syntax-highlighter-line-number">9
</span><span class=3D"react-syntax-highlighter-line-number">10
</span><span class=3D"react-syntax-highlighter-line-number">11
</span><span class=3D"react-syntax-highlighter-line-number">12
</span><span class=3D"react-syntax-highlighter-line-number">13
</span><span class=3D"react-syntax-highlighter-line-number">14
</span><span class=3D"react-syntax-highlighter-line-number">15
</span><span class=3D"react-syntax-highlighter-line-number">16
</span><span class=3D"react-syntax-highlighter-line-number">17
</span><span class=3D"react-syntax-highlighter-line-number">18
</span><span class=3D"react-syntax-highlighter-line-number">19
</span><span class=3D"react-syntax-highlighter-line-number">20
</span><span class=3D"react-syntax-highlighter-line-number">21
</span><span class=3D"react-syntax-highlighter-line-number">22
</span><span class=3D"react-syntax-highlighter-line-number">23
</span><span class=3D"react-syntax-highlighter-line-number">24
</span><span class=3D"react-syntax-highlighter-line-number">25
</span><span class=3D"react-syntax-highlighter-line-number">26
</span><span class=3D"react-syntax-highlighter-line-number">27
</span><span class=3D"react-syntax-highlighter-line-number">28
</span><span class=3D"react-syntax-highlighter-line-number">29
</span><span class=3D"react-syntax-highlighter-line-number">30
</span><span class=3D"react-syntax-highlighter-line-number">31
</span><span class=3D"react-syntax-highlighter-line-number">32
</span><span class=3D"react-syntax-highlighter-line-number">33
</span><span class=3D"react-syntax-highlighter-line-number">34
</span><span class=3D"react-syntax-highlighter-line-number">35
</span><span class=3D"react-syntax-highlighter-line-number">36
</span><span class=3D"react-syntax-highlighter-line-number">37
</span><span class=3D"react-syntax-highlighter-line-number">38
</span><span class=3D"react-syntax-highlighter-line-number">39
</span><span class=3D"react-syntax-highlighter-line-number">40
</span><span class=3D"react-syntax-highlighter-line-number">41
</span><span class=3D"react-syntax-highlighter-line-number">42
</span><span class=3D"react-syntax-highlighter-line-number">43
</span><span class=3D"react-syntax-highlighter-line-number">44
</span><span class=3D"react-syntax-highlighter-line-number">45
</span><span class=3D"react-syntax-highlighter-line-number">46
</span><span class=3D"react-syntax-highlighter-line-number">47
</span><span class=3D"react-syntax-highlighter-line-number">48
</span><span class=3D"react-syntax-highlighter-line-number">49
</span><span class=3D"react-syntax-highlighter-line-number">50
</span><span class=3D"react-syntax-highlighter-line-number">51
</span><span class=3D"react-syntax-highlighter-line-number">52
</span><span class=3D"react-syntax-highlighter-line-number">53
</span><span class=3D"react-syntax-highlighter-line-number">54
</span><span class=3D"react-syntax-highlighter-line-number">55
</span><span class=3D"react-syntax-highlighter-line-number">56
</span><span class=3D"react-syntax-highlighter-line-number">57
</span><span class=3D"react-syntax-highlighter-line-number">58
</span><span class=3D"react-syntax-highlighter-line-number">59
</span><span class=3D"react-syntax-highlighter-line-number">60
</span><span class=3D"react-syntax-highlighter-line-number">61
</span><span class=3D"react-syntax-highlighter-line-number">62
</span><span class=3D"react-syntax-highlighter-line-number">63
</span><span class=3D"react-syntax-highlighter-line-number">64
</span><span class=3D"react-syntax-highlighter-line-number">65
</span><span class=3D"react-syntax-highlighter-line-number">66
</span><span class=3D"react-syntax-highlighter-line-number">67
</span><span class=3D"react-syntax-highlighter-line-number">68
</span><span class=3D"react-syntax-highlighter-line-number">69
</span><span class=3D"react-syntax-highlighter-line-number">70
</span><span class=3D"react-syntax-highlighter-line-number">71
</span><span class=3D"react-syntax-highlighter-line-number">72
</span><span class=3D"react-syntax-highlighter-line-number">73
</span><span class=3D"react-syntax-highlighter-line-number">74
</span><span class=3D"react-syntax-highlighter-line-number">75
</span><span class=3D"react-syntax-highlighter-line-number">76
</span><span class=3D"react-syntax-highlighter-line-number">77
</span><span class=3D"react-syntax-highlighter-line-number">78
</span><span class=3D"react-syntax-highlighter-line-number">79
</span><span class=3D"react-syntax-highlighter-line-number">80
</span><span class=3D"react-syntax-highlighter-line-number">81
</span><span class=3D"react-syntax-highlighter-line-number">82
</span><span class=3D"react-syntax-highlighter-line-number">83
</span></code><span><span class=3D"hljs-keyword">from</span><span> sympy </=
span><span class=3D"hljs-keyword">import</span><span> symbols, Eq, Not, And=
, Or, Xor, simplify
</span></span><span><span></span><span class=3D"hljs-keyword">from</span><s=
pan> itertools </span><span class=3D"hljs-keyword">import</span><span> prod=
uct
</span></span><span>
</span><span><span></span><span class=3D"hljs-class hljs-keyword">class</sp=
an><span class=3D"hljs-class"> </span><span class=3D"hljs-class hljs-title"=
>EquationParser</span><span class=3D"hljs-class">:</span><span>
</span></span><span><span>    </span><span class=3D"hljs-function hljs-keyw=
ord">def</span><span class=3D"hljs-function"> </span><span class=3D"hljs-fu=
nction hljs-title">__init__</span><span class=3D"hljs-function">(</span><sp=
an class=3D"hljs-function hljs-params">self, mso, equations, data</span><sp=
an class=3D"hljs-function">):</span><span>
</span></span><span>        self.mso =3D mso
</span><span>        self.equations =3D equations
</span><span>        self.data =3D data
</span><span>        self.parsed_equations =3D self._parse_equations()
</span><span>
</span><span><span>    </span><span class=3D"hljs-function hljs-keyword">de=
f</span><span class=3D"hljs-function"> </span><span class=3D"hljs-function =
hljs-title">_parse_equations</span><span class=3D"hljs-function">(</span><s=
pan class=3D"hljs-function hljs-params">self</span><span class=3D"hljs-func=
tion">):</span><span>
</span></span><span>        parsed =3D {}
</span><span><span>        </span><span class=3D"hljs-keyword">for</span><s=
pan> name, equation </span><span class=3D"hljs-keyword">in</span><span> sel=
f.equations.items():
</span></span><span><span>            left_side, right_side =3D </span><spa=
n class=3D"hljs-built_in">map</span><span>(</span><span class=3D"hljs-built=
_in">str</span><span>.strip, equation.split(</span><span class=3D"hljs-stri=
ng">'=3D'</span><span>))
</span></span><span><span>            </span><span class=3D"hljs-comment">#=
 Create symbols dictionary</span><span>
</span></span><span><span>            symbols_dict =3D {var: symbols(var) <=
/span><span class=3D"hljs-keyword">for</span><span> var </span><span class=
=3D"hljs-keyword">in</span><span> left_side.split() + right_side.split() </=
span><span class=3D"hljs-keyword">if</span><span> var.isidentifier()}
</span></span><span>           =20
</span><span><span>            </span><span class=3D"hljs-comment"># Replac=
e observed data</span><span>
</span></span><span><span>            </span><span class=3D"hljs-keyword">f=
or</span><span> key </span><span class=3D"hljs-keyword">in</span><span> sel=
f.data:
</span></span><span><span>                </span><span class=3D"hljs-keywor=
d">if</span><span> key </span><span class=3D"hljs-keyword">in</span><span> =
symbols_dict:
</span></span><span>                    symbols_dict[key] =3D self.data[key=
]
</span><span>           =20
</span><span><span>            </span><span class=3D"hljs-comment"># Build =
the equation based on the operator present in left_side</span><span>
</span></span><span><span>            </span><span class=3D"hljs-keyword">i=
f</span><span> </span><span class=3D"hljs-string">'&amp;'</span><span> </sp=
an><span class=3D"hljs-keyword">in</span><span> left_side:
</span></span><span><span>                parsed_expression =3D And(*[symbo=
ls_dict[var.strip()] </span><span class=3D"hljs-keyword">for</span><span> v=
ar </span><span class=3D"hljs-keyword">in</span><span> left_side.split(</sp=
an><span class=3D"hljs-string">'&amp;'</span><span>)])
</span></span><span><span>            </span><span class=3D"hljs-keyword">e=
lif</span><span> </span><span class=3D"hljs-string">'|'</span><span> </span=
><span class=3D"hljs-keyword">in</span><span> left_side:
</span></span><span><span>                parsed_expression =3D Or(*[symbol=
s_dict[var.strip()] </span><span class=3D"hljs-keyword">for</span><span> va=
r </span><span class=3D"hljs-keyword">in</span><span> left_side.split(</spa=
n><span class=3D"hljs-string">'|'</span><span>)])
</span></span><span><span>            </span><span class=3D"hljs-keyword">e=
lif</span><span> </span><span class=3D"hljs-string">'^'</span><span> </span=
><span class=3D"hljs-keyword">in</span><span> left_side:
</span></span><span><span>                parsed_expression =3D Xor(*[symbo=
ls_dict[var.strip()] </span><span class=3D"hljs-keyword">for</span><span> v=
ar </span><span class=3D"hljs-keyword">in</span><span> left_side.split(</sp=
an><span class=3D"hljs-string">'^'</span><span>)])
</span></span><span><span>            </span><span class=3D"hljs-keyword">e=
lif</span><span> </span><span class=3D"hljs-string">'~&amp;'</span><span> <=
/span><span class=3D"hljs-keyword">in</span><span> left_side:
</span></span><span><span>                parsed_expression =3D Not(And(*[s=
ymbols_dict[var.strip()] </span><span class=3D"hljs-keyword">for</span><spa=
n> var </span><span class=3D"hljs-keyword">in</span><span> left_side.split(=
</span><span class=3D"hljs-string">'~&amp;'</span><span>)]))
</span></span><span><span>            </span><span class=3D"hljs-keyword">e=
lif</span><span> </span><span class=3D"hljs-string">'~|'</span><span> </spa=
n><span class=3D"hljs-keyword">in</span><span> left_side:
</span></span><span><span>                parsed_expression =3D Not(Or(*[sy=
mbols_dict[var.strip()] </span><span class=3D"hljs-keyword">for</span><span=
> var </span><span class=3D"hljs-keyword">in</span><span> left_side.split(<=
/span><span class=3D"hljs-string">'~|'</span><span>)]))
</span></span><span><span>            </span><span class=3D"hljs-keyword">e=
lif</span><span> </span><span class=3D"hljs-string">'~^'</span><span> </spa=
n><span class=3D"hljs-keyword">in</span><span> left_side:
</span></span><span><span>                parsed_expression =3D Not(Xor(*[s=
ymbols_dict[var.strip()] </span><span class=3D"hljs-keyword">for</span><spa=
n> var </span><span class=3D"hljs-keyword">in</span><span> left_side.split(=
</span><span class=3D"hljs-string">'~^'</span><span>)]))
</span></span><span><span>            </span><span class=3D"hljs-keyword">e=
lif</span><span> </span><span class=3D"hljs-string">'~'</span><span> </span=
><span class=3D"hljs-keyword">in</span><span> left_side:
</span></span><span><span>                parsed_expression =3D Not(symbols=
_dict[left_side.replace(</span><span class=3D"hljs-string">'~'</span><span>=
, </span><span class=3D"hljs-string">''</span><span>).strip()])
</span></span><span><span>            </span><span class=3D"hljs-keyword">e=
lse</span><span>:
</span></span><span>                parsed_expression =3D symbols_dict[left=
_side.strip()]
</span><span>
</span><span>            right_expr =3D symbols_dict[right_side.strip()]
</span><span>            parsed[name] =3D Eq(parsed_expression, right_expr)
</span><span>
</span><span><span>        </span><span class=3D"hljs-keyword">return</span=
><span> parsed
</span></span><span>
</span><span><span>    </span><span class=3D"hljs-function hljs-keyword">de=
f</span><span class=3D"hljs-function"> </span><span class=3D"hljs-function =
hljs-title">_is_contradictory</span><span class=3D"hljs-function">(</span><=
span class=3D"hljs-function hljs-params">self</span><span class=3D"hljs-fun=
ction">):</span><span>
</span></span><span><span>        is_logical =3D </span><span class=3D"hljs=
-built_in">any</span><span>(char </span><span class=3D"hljs-keyword">in</sp=
an><span> equation </span><span class=3D"hljs-keyword">for</span><span> equ=
ation </span><span class=3D"hljs-keyword">in</span><span> self.equations.va=
lues() </span><span class=3D"hljs-keyword">for</span><span> char </span><sp=
an class=3D"hljs-keyword">in</span><span> [</span><span class=3D"hljs-strin=
g">'~'</span><span>, </span><span class=3D"hljs-string">'&amp;'</span><span=
>, </span><span class=3D"hljs-string">'|'</span><span>, </span><span class=
=3D"hljs-string">'^'</span><span>])
</span></span><span><span>        </span><span class=3D"hljs-keyword">if</s=
pan><span> is_logical:
</span></span><span><span>            variables =3D {var </span><span class=
=3D"hljs-keyword">for</span><span> eq </span><span class=3D"hljs-keyword">i=
n</span><span> self.parsed_equations.values() </span><span class=3D"hljs-ke=
yword">for</span><span> var </span><span class=3D"hljs-keyword">in</span><s=
pan> eq.free_symbols}
</span></span><span><span>            </span><span class=3D"hljs-keyword">f=
or</span><span> combination </span><span class=3D"hljs-keyword">in</span><s=
pan> product([</span><span class=3D"hljs-literal">True</span><span>, </span=
><span class=3D"hljs-literal">False</span><span>], repeat=3D</span><span cl=
ass=3D"hljs-built_in">len</span><span>(variables)):
</span></span><span><span>                assignment =3D </span><span class=
=3D"hljs-built_in">dict</span><span>(</span><span class=3D"hljs-built_in">z=
ip</span><span>(variables, combination))
</span></span><span><span>                </span><span class=3D"hljs-keywor=
d">if</span><span> </span><span class=3D"hljs-built_in">all</span><span>(eq=
.subs(assignment) </span><span class=3D"hljs-keyword">for</span><span> eq <=
/span><span class=3D"hljs-keyword">in</span><span> self.parsed_equations.va=
lues()):
</span></span><span><span>                    </span><span class=3D"hljs-ke=
yword">return</span><span> </span><span class=3D"hljs-literal">False</span>=
<span>
</span></span><span><span>            </span><span class=3D"hljs-keyword">r=
eturn</span><span> </span><span class=3D"hljs-literal">True</span><span>
</span></span><span><span>        </span><span class=3D"hljs-keyword">else<=
/span><span>:
</span></span><span><span>            </span><span class=3D"hljs-keyword">f=
rom</span><span> sympy </span><span class=3D"hljs-keyword">import</span><sp=
an> solve
</span></span><span><span>            solutions =3D solve(</span><span clas=
s=3D"hljs-built_in">list</span><span>(self.parsed_equations.values()), </sp=
an><span class=3D"hljs-built_in">dict</span><span>=3D</span><span class=3D"=
hljs-literal">True</span><span>)
</span></span><span><span>            </span><span class=3D"hljs-keyword">r=
eturn</span><span> </span><span class=3D"hljs-built_in">len</span><span>(so=
lutions) =3D=3D </span><span class=3D"hljs-number">0</span><span>
</span></span><span>
</span><span><span>    </span><span class=3D"hljs-function hljs-keyword">de=
f</span><span class=3D"hljs-function"> </span><span class=3D"hljs-function =
hljs-title">get_minimal_conflicts</span><span class=3D"hljs-function">(</sp=
an><span class=3D"hljs-function hljs-params">self</span><span class=3D"hljs=
-function">):</span><span>
</span></span><span>        minimal_conflicts =3D []
</span><span><span>        </span><span class=3D"hljs-keyword">for</span><s=
pan> group </span><span class=3D"hljs-keyword">in</span><span> self.mso:
</span></span><span><span>            group_equations =3D {name: self.parse=
d_equations[name] </span><span class=3D"hljs-keyword">for</span><span> name=
 </span><span class=3D"hljs-keyword">in</span><span> group </span><span cla=
ss=3D"hljs-keyword">if</span><span> name </span><span class=3D"hljs-keyword=
">in</span><span> self.parsed_equations}
</span></span><span><span>            </span><span class=3D"hljs-keyword">i=
f</span><span> EquationParser(mso, self.equations, self.data)._is_contradic=
tory():  </span><span class=3D"hljs-comment"># Check for contradictions in =
the group</span><span>
</span></span><span><span>                minimal_conflicts.append(</span><=
span class=3D"hljs-built_in">sorted</span><span>(group))
</span></span><span>
</span><span><span>        </span><span class=3D"hljs-keyword">return</span=
><span> {</span><span class=3D"hljs-string">'minimal_conflicts'</span><span=
>: </span><span class=3D"hljs-built_in">sorted</span><span>(minimal_conflic=
ts, key=3D</span><span class=3D"hljs-keyword">lambda</span><span> x: (</spa=
n><span class=3D"hljs-built_in">len</span><span>(x), x))}
</span></span><span>
</span><span><span></span><span class=3D"hljs-comment"># Define input data<=
/span><span>
</span></span><span><span>mso =3D [[</span><span class=3D"hljs-string">'A1'=
</span><span>, </span><span class=3D"hljs-string">'O1'</span><span>, </span=
><span class=3D"hljs-string">'O2'</span><span>], [</span><span class=3D"hlj=
s-string">'A2'</span><span>, </span><span class=3D"hljs-string">'O2'</span>=
<span>, </span><span class=3D"hljs-string">'O3'</span><span>], [</span><spa=
n class=3D"hljs-string">'A1'</span><span>, </span><span class=3D"hljs-strin=
g">'A2'</span><span>, </span><span class=3D"hljs-string">'O1'</span><span>,=
 </span><span class=3D"hljs-string">'O3'</span><span>]]
</span></span><span>equations =3D {
</span><span><span>    </span><span class=3D"hljs-string">'O1'</span><span>=
: </span><span class=3D"hljs-string">'a | c =3D x01'</span><span>,
</span></span><span><span>    </span><span class=3D"hljs-string">'O2'</span=
><span>: </span><span class=3D"hljs-string">'b | d =3D x02'</span><span>,
</span></span><span><span>    </span><span class=3D"hljs-string">'O3'</span=
><span>: </span><span class=3D"hljs-string">'c | e =3D x03'</span><span>,
</span></span><span><span>    </span><span class=3D"hljs-string">'A1'</span=
><span>: </span><span class=3D"hljs-string">'x01 &amp; x02 =3D f'</span><sp=
an>,
</span></span><span><span>    </span><span class=3D"hljs-string">'A2'</span=
><span>: </span><span class=3D"hljs-string">'x02 &amp; x03 =3D g'</span><sp=
an>
</span></span><span>}
</span><span><span>data =3D {</span><span class=3D"hljs-string">'a'</span><=
span>: </span><span class=3D"hljs-literal">True</span><span>, </span><span =
class=3D"hljs-string">'b'</span><span>: </span><span class=3D"hljs-literal"=
>True</span><span>, </span><span class=3D"hljs-string">'c'</span><span>: </=
span><span class=3D"hljs-literal">True</span><span>, </span><span class=3D"=
hljs-string">'d'</span><span>: </span><span class=3D"hljs-literal">True</sp=
an><span>, </span><span class=3D"hljs-string">'e'</span><span>: </span><spa=
n class=3D"hljs-literal">True</span><span>, </span><span class=3D"hljs-stri=
ng">'f'</span><span>: </span><span class=3D"hljs-literal">False</span><span=
>, </span><span class=3D"hljs-string">'g'</span><span>: </span><span class=
=3D"hljs-literal">False</span><span>}
</span></span><span>
</span><span><span></span><span class=3D"hljs-comment"># Create an instance=
 of the EquationParser and get minimal conflicts</span><span>
</span></span><span>parser =3D EquationParser(mso, equations, data)
</span><span>output =3D parser.get_minimal_conflicts()
</span><span>output</span></code></pre></div></div></div></div></div></div>=
</div><div class=3D"thread-item"><div class=3D"thread-item-header"><span><d=
iv class=3D"thread-item-header-author">part2_10</div></span></div><div clas=
s=3D"thread-content"><div class=3D"markdown-content"><p>The output indicate=
s that all groups of equations are potentially consistent with each other, =
but there's an issue since we expect to identify contradictory groups based=
 on the provided input data.</p>
<p>Let's check if there's a mistake in the logic or implementation when eva=
luating contradictions. I'll refine the contradiction detection method and =
attempt to analyze the conflicting groups again.</p>
<p>I'll correct and test the logic specifically for identifying which group=
s lead to contradictions based on the logical relationships defined in the =
equations. Let's reevaluate this.</p></div></div><div class=3D"css-4ip17j e=
8jtqtk4"></div></div><div class=3D"thread-run-item"><div class=3D"thread-ru=
n-header"><div class=3D"thread-item-left"><div class=3D"expanded-query"><di=
v class=3D"tool-row"><div class=3D"monospace-query">code_interpreter</div><=
/div><div class=3D"pre-query"><div class=3D"code-sample"><div class=3D"code=
-sample-body code-sample-body-small"><button type=3D"button" tabindex=3D"0"=
 class=3D"btn btn-sm btn-minimal btn-neutral code-sample-copy-float" aria-l=
abel=3D"Copy"><span class=3D"btn-label-wrap"><span class=3D"btn-node start-=
node"><svg xmlns=3D"http://www.w3.org/2000/svg" width=3D"18px" height=3D"18=
px" fill=3D"currentColor" viewBox=3D"0 0 24 24"><path fill-rule=3D"evenodd"=
 d=3D"M7 5a3 3 0 0 1 3-3h9a3 3 0 0 1 3 3v9a3 3 0 0 1-3 3h-2v2a3 3 0 0 1-3 3=
H5a3 3 0 0 1-3-3v-9a3 3 0 0 1 3-3h2V5Zm2 2h5a3 3 0 0 1 3 3v5h2a1 1 0 0 0 1-=
1V5a1 1 0 0 0-1-1h-9a1 1 0 0 0-1 1v2ZM5 9a1 1 0 0 0-1 1v9a1 1 0 0 0 1 1h9a1=
 1 0 0 0 1-1v-9a1 1 0 0 0-1-1H5Z" clip-rule=3D"evenodd"></path></svg></span=
></span></button><pre class=3D"hljs syntax-highlighter dark-mode code-sampl=
e-pre"><code class=3D"language-python" style=3D"white-space: pre;"><code st=
yle=3D"float: left; padding-right: 10px;"><span class=3D"react-syntax-highl=
ighter-line-number">1
</span><span class=3D"react-syntax-highlighter-line-number">2
</span><span class=3D"react-syntax-highlighter-line-number">3
</span><span class=3D"react-syntax-highlighter-line-number">4
</span><span class=3D"react-syntax-highlighter-line-number">5
</span><span class=3D"react-syntax-highlighter-line-number">6
</span><span class=3D"react-syntax-highlighter-line-number">7
</span><span class=3D"react-syntax-highlighter-line-number">8
</span><span class=3D"react-syntax-highlighter-line-number">9
</span><span class=3D"react-syntax-highlighter-line-number">10
</span><span class=3D"react-syntax-highlighter-line-number">11
</span><span class=3D"react-syntax-highlighter-line-number">12
</span><span class=3D"react-syntax-highlighter-line-number">13
</span><span class=3D"react-syntax-highlighter-line-number">14
</span><span class=3D"react-syntax-highlighter-line-number">15
</span><span class=3D"react-syntax-highlighter-line-number">16
</span><span class=3D"react-syntax-highlighter-line-number">17
</span><span class=3D"react-syntax-highlighter-line-number">18
</span><span class=3D"react-syntax-highlighter-line-number">19
</span><span class=3D"react-syntax-highlighter-line-number">20
</span><span class=3D"react-syntax-highlighter-line-number">21
</span><span class=3D"react-syntax-highlighter-line-number">22
</span><span class=3D"react-syntax-highlighter-line-number">23
</span><span class=3D"react-syntax-highlighter-line-number">24
</span><span class=3D"react-syntax-highlighter-line-number">25
</span><span class=3D"react-syntax-highlighter-line-number">26
</span><span class=3D"react-syntax-highlighter-line-number">27
</span><span class=3D"react-syntax-highlighter-line-number">28
</span><span class=3D"react-syntax-highlighter-line-number">29
</span><span class=3D"react-syntax-highlighter-line-number">30
</span><span class=3D"react-syntax-highlighter-line-number">31
</span><span class=3D"react-syntax-highlighter-line-number">32
</span><span class=3D"react-syntax-highlighter-line-number">33
</span><span class=3D"react-syntax-highlighter-line-number">34
</span><span class=3D"react-syntax-highlighter-line-number">35
</span><span class=3D"react-syntax-highlighter-line-number">36
</span><span class=3D"react-syntax-highlighter-line-number">37
</span><span class=3D"react-syntax-highlighter-line-number">38
</span><span class=3D"react-syntax-highlighter-line-number">39
</span><span class=3D"react-syntax-highlighter-line-number">40
</span><span class=3D"react-syntax-highlighter-line-number">41
</span><span class=3D"react-syntax-highlighter-line-number">42
</span><span class=3D"react-syntax-highlighter-line-number">43
</span><span class=3D"react-syntax-highlighter-line-number">44
</span><span class=3D"react-syntax-highlighter-line-number">45
</span><span class=3D"react-syntax-highlighter-line-number">46
</span><span class=3D"react-syntax-highlighter-line-number">47
</span><span class=3D"react-syntax-highlighter-line-number">48
</span><span class=3D"react-syntax-highlighter-line-number">49
</span><span class=3D"react-syntax-highlighter-line-number">50
</span><span class=3D"react-syntax-highlighter-line-number">51
</span><span class=3D"react-syntax-highlighter-line-number">52
</span><span class=3D"react-syntax-highlighter-line-number">53
</span><span class=3D"react-syntax-highlighter-line-number">54
</span><span class=3D"react-syntax-highlighter-line-number">55
</span><span class=3D"react-syntax-highlighter-line-number">56
</span><span class=3D"react-syntax-highlighter-line-number">57
</span><span class=3D"react-syntax-highlighter-line-number">58
</span><span class=3D"react-syntax-highlighter-line-number">59
</span><span class=3D"react-syntax-highlighter-line-number">60
</span><span class=3D"react-syntax-highlighter-line-number">61
</span><span class=3D"react-syntax-highlighter-line-number">62
</span><span class=3D"react-syntax-highlighter-line-number">63
</span><span class=3D"react-syntax-highlighter-line-number">64
</span><span class=3D"react-syntax-highlighter-line-number">65
</span><span class=3D"react-syntax-highlighter-line-number">66
</span><span class=3D"react-syntax-highlighter-line-number">67
</span><span class=3D"react-syntax-highlighter-line-number">68
</span></code><span><span class=3D"hljs-class hljs-keyword">class</span><sp=
an class=3D"hljs-class"> </span><span class=3D"hljs-class hljs-title">Equat=
ionParser</span><span class=3D"hljs-class">:</span><span>
</span></span><span><span>    </span><span class=3D"hljs-function hljs-keyw=
ord">def</span><span class=3D"hljs-function"> </span><span class=3D"hljs-fu=
nction hljs-title">__init__</span><span class=3D"hljs-function">(</span><sp=
an class=3D"hljs-function hljs-params">self, mso, equations, data</span><sp=
an class=3D"hljs-function">):</span><span>
</span></span><span>        self.mso =3D mso
</span><span>        self.equations =3D equations
</span><span>        self.data =3D data
</span><span>        self.parsed_equations =3D self._parse_equations()
</span><span>
</span><span><span>    </span><span class=3D"hljs-function hljs-keyword">de=
f</span><span class=3D"hljs-function"> </span><span class=3D"hljs-function =
hljs-title">_parse_equations</span><span class=3D"hljs-function">(</span><s=
pan class=3D"hljs-function hljs-params">self</span><span class=3D"hljs-func=
tion">):</span><span>
</span></span><span>        parsed =3D {}
</span><span><span>        </span><span class=3D"hljs-keyword">for</span><s=
pan> name, equation </span><span class=3D"hljs-keyword">in</span><span> sel=
f.equations.items():
</span></span><span><span>            left_side, right_side =3D </span><spa=
n class=3D"hljs-built_in">map</span><span>(</span><span class=3D"hljs-built=
_in">str</span><span>.strip, equation.split(</span><span class=3D"hljs-stri=
ng">'=3D'</span><span>))
</span></span><span><span>            symbols_dict =3D {var: symbols(var) <=
/span><span class=3D"hljs-keyword">for</span><span> var </span><span class=
=3D"hljs-keyword">in</span><span> left_side.split() + right_side.split() </=
span><span class=3D"hljs-keyword">if</span><span> var.isidentifier()}
</span></span><span>           =20
</span><span><span>            </span><span class=3D"hljs-comment"># Replac=
e observed data in the symbols_dict</span><span>
</span></span><span><span>            </span><span class=3D"hljs-keyword">f=
or</span><span> key </span><span class=3D"hljs-keyword">in</span><span> sel=
f.data:
</span></span><span><span>                </span><span class=3D"hljs-keywor=
d">if</span><span> key </span><span class=3D"hljs-keyword">in</span><span> =
symbols_dict:
</span></span><span>                    symbols_dict[key] =3D self.data[key=
]
</span><span>           =20
</span><span><span>            </span><span class=3D"hljs-comment"># Build =
the equation</span><span>
</span></span><span><span>            </span><span class=3D"hljs-keyword">i=
f</span><span> </span><span class=3D"hljs-string">'&amp;'</span><span> </sp=
an><span class=3D"hljs-keyword">in</span><span> left_side:
</span></span><span><span>                parsed_expression =3D And(*[symbo=
ls_dict[var.strip()] </span><span class=3D"hljs-keyword">for</span><span> v=
ar </span><span class=3D"hljs-keyword">in</span><span> left_side.split(</sp=
an><span class=3D"hljs-string">'&amp;'</span><span>)])
</span></span><span><span>            </span><span class=3D"hljs-keyword">e=
lif</span><span> </span><span class=3D"hljs-string">'|'</span><span> </span=
><span class=3D"hljs-keyword">in</span><span> left_side:
</span></span><span><span>                parsed_expression =3D Or(*[symbol=
s_dict[var.strip()] </span><span class=3D"hljs-keyword">for</span><span> va=
r </span><span class=3D"hljs-keyword">in</span><span> left_side.split(</spa=
n><span class=3D"hljs-string">'|'</span><span>)])
</span></span><span><span>            </span><span class=3D"hljs-keyword">e=
lif</span><span> </span><span class=3D"hljs-string">'^'</span><span> </span=
><span class=3D"hljs-keyword">in</span><span> left_side:
</span></span><span><span>                parsed_expression =3D Xor(*[symbo=
ls_dict[var.strip()] </span><span class=3D"hljs-keyword">for</span><span> v=
ar </span><span class=3D"hljs-keyword">in</span><span> left_side.split(</sp=
an><span class=3D"hljs-string">'^'</span><span>)])
</span></span><span><span>            </span><span class=3D"hljs-keyword">e=
lif</span><span> </span><span class=3D"hljs-string">'~&amp;'</span><span> <=
/span><span class=3D"hljs-keyword">in</span><span> left_side:
</span></span><span><span>                parsed_expression =3D Not(And(*[s=
ymbols_dict[var.strip()] </span><span class=3D"hljs-keyword">for</span><spa=
n> var </span><span class=3D"hljs-keyword">in</span><span> left_side.split(=
</span><span class=3D"hljs-string">'~&amp;'</span><span>)]))
</span></span><span><span>            </span><span class=3D"hljs-keyword">e=
lif</span><span> </span><span class=3D"hljs-string">'~|'</span><span> </spa=
n><span class=3D"hljs-keyword">in</span><span> left_side:
</span></span><span><span>                parsed_expression =3D Not(Or(*[sy=
mbols_dict[var.strip()] </span><span class=3D"hljs-keyword">for</span><span=
> var </span><span class=3D"hljs-keyword">in</span><span> left_side.split(<=
/span><span class=3D"hljs-string">'~|'</span><span>)]))
</span></span><span><span>            </span><span class=3D"hljs-keyword">e=
lif</span><span> </span><span class=3D"hljs-string">'~^'</span><span> </spa=
n><span class=3D"hljs-keyword">in</span><span> left_side:
</span></span><span><span>                parsed_expression =3D Not(Xor(*[s=
ymbols_dict[var.strip()] </span><span class=3D"hljs-keyword">for</span><spa=
n> var </span><span class=3D"hljs-keyword">in</span><span> left_side.split(=
</span><span class=3D"hljs-string">'~^'</span><span>)]))
</span></span><span><span>            </span><span class=3D"hljs-keyword">e=
lif</span><span> </span><span class=3D"hljs-string">'~'</span><span> </span=
><span class=3D"hljs-keyword">in</span><span> left_side:
</span></span><span><span>                parsed_expression =3D Not(symbols=
_dict[left_side.replace(</span><span class=3D"hljs-string">'~'</span><span>=
, </span><span class=3D"hljs-string">''</span><span>).strip()])
</span></span><span><span>            </span><span class=3D"hljs-keyword">e=
lse</span><span>:
</span></span><span>                parsed_expression =3D symbols_dict[left=
_side.strip()]
</span><span>
</span><span>            right_expr =3D symbols_dict[right_side.strip()]
</span><span>            parsed[name] =3D Eq(parsed_expression, right_expr)
</span><span>
</span><span><span>        </span><span class=3D"hljs-keyword">return</span=
><span> parsed
</span></span><span>
</span><span><span>    </span><span class=3D"hljs-function hljs-keyword">de=
f</span><span class=3D"hljs-function"> </span><span class=3D"hljs-function =
hljs-title">_is_contradictory</span><span class=3D"hljs-function">(</span><=
span class=3D"hljs-function hljs-params">self, equations</span><span class=
=3D"hljs-function">):</span><span>
</span></span><span><span>        is_logical =3D </span><span class=3D"hljs=
-built_in">any</span><span>(char </span><span class=3D"hljs-keyword">in</sp=
an><span> equation </span><span class=3D"hljs-keyword">for</span><span> equ=
ation </span><span class=3D"hljs-keyword">in</span><span> equations </span>=
<span class=3D"hljs-keyword">for</span><span> char </span><span class=3D"hl=
js-keyword">in</span><span> [</span><span class=3D"hljs-string">'~'</span><=
span>, </span><span class=3D"hljs-string">'&amp;'</span><span>, </span><spa=
n class=3D"hljs-string">'|'</span><span>, </span><span class=3D"hljs-string=
">'^'</span><span>])
</span></span><span><span>        </span><span class=3D"hljs-keyword">if</s=
pan><span> is_logical:
</span></span><span><span>            variables =3D {var </span><span class=
=3D"hljs-keyword">for</span><span> eq </span><span class=3D"hljs-keyword">i=
n</span><span> equations </span><span class=3D"hljs-keyword">for</span><spa=
n> var </span><span class=3D"hljs-keyword">in</span><span> eq.free_symbols}
</span></span><span><span>            </span><span class=3D"hljs-keyword">f=
or</span><span> combination </span><span class=3D"hljs-keyword">in</span><s=
pan> product([</span><span class=3D"hljs-literal">True</span><span>, </span=
><span class=3D"hljs-literal">False</span><span>], repeat=3D</span><span cl=
ass=3D"hljs-built_in">len</span><span>(variables)):
</span></span><span><span>                assignment =3D </span><span class=
=3D"hljs-built_in">dict</span><span>(</span><span class=3D"hljs-built_in">z=
ip</span><span>(variables, combination))
</span></span><span><span>                </span><span class=3D"hljs-keywor=
d">if</span><span> </span><span class=3D"hljs-built_in">all</span><span>(eq=
.subs(assignment) </span><span class=3D"hljs-keyword">for</span><span> eq <=
/span><span class=3D"hljs-keyword">in</span><span> equations):
</span></span><span><span>                    </span><span class=3D"hljs-ke=
yword">return</span><span> </span><span class=3D"hljs-literal">False</span>=
<span>
</span></span><span><span>            </span><span class=3D"hljs-keyword">r=
eturn</span><span> </span><span class=3D"hljs-literal">True</span><span>
</span></span><span><span>        </span><span class=3D"hljs-keyword">else<=
/span><span>:
</span></span><span><span>            </span><span class=3D"hljs-keyword">f=
rom</span><span> sympy </span><span class=3D"hljs-keyword">import</span><sp=
an> solve
</span></span><span><span>            solutions =3D solve(</span><span clas=
s=3D"hljs-built_in">list</span><span>(equations), </span><span class=3D"hlj=
s-built_in">dict</span><span>=3D</span><span class=3D"hljs-literal">True</s=
pan><span>)
</span></span><span><span>            </span><span class=3D"hljs-keyword">r=
eturn</span><span> </span><span class=3D"hljs-built_in">len</span><span>(so=
lutions) =3D=3D </span><span class=3D"hljs-number">0</span><span>
</span></span><span>
</span><span><span>    </span><span class=3D"hljs-function hljs-keyword">de=
f</span><span class=3D"hljs-function"> </span><span class=3D"hljs-function =
hljs-title">get_minimal_conflicts</span><span class=3D"hljs-function">(</sp=
an><span class=3D"hljs-function hljs-params">self</span><span class=3D"hljs=
-function">):</span><span>
</span></span><span>        minimal_conflicts =3D []
</span><span><span>        </span><span class=3D"hljs-keyword">for</span><s=
pan> group </span><span class=3D"hljs-keyword">in</span><span> self.mso:
</span></span><span><span>            group_equations =3D [self.parsed_equa=
tions[name] </span><span class=3D"hljs-keyword">for</span><span> name </spa=
n><span class=3D"hljs-keyword">in</span><span> group </span><span class=3D"=
hljs-keyword">if</span><span> name </span><span class=3D"hljs-keyword">in</=
span><span> self.parsed_equations]
</span></span><span><span>            </span><span class=3D"hljs-keyword">i=
f</span><span> self._is_contradictory(group_equations):  </span><span class=
=3D"hljs-comment"># Check for contradictions in the group</span><span>
</span></span><span><span>                minimal_conflicts.append(</span><=
span class=3D"hljs-built_in">sorted</span><span>(group))
</span></span><span>
</span><span><span>        </span><span class=3D"hljs-keyword">return</span=
><span> {</span><span class=3D"hljs-string">'minimal_conflicts'</span><span=
>: </span><span class=3D"hljs-built_in">sorted</span><span>(minimal_conflic=
ts, key=3D</span><span class=3D"hljs-keyword">lambda</span><span> x: (</spa=
n><span class=3D"hljs-built_in">len</span><span>(x), x))}
</span></span><span>
</span><span><span></span><span class=3D"hljs-comment"># Create an instance=
 of the EquationParser and test again</span><span>
</span></span><span>parser =3D EquationParser(mso, equations, data)
</span><span>output =3D parser.get_minimal_conflicts()
</span><span>output</span></code></pre></div></div></div></div></div></div>=
</div><div class=3D"thread-run-item"><div class=3D"thread-run-header"><div =
class=3D"thread-item-left"><div class=3D"expanded-query"><div class=3D"tool=
-row"><div class=3D"monospace-query">code_interpreter</div></div><div class=
=3D"pre-query"><div class=3D"code-sample"><div class=3D"code-sample-body co=
de-sample-body-small"><button type=3D"button" tabindex=3D"0" class=3D"btn b=
tn-sm btn-minimal btn-neutral code-sample-copy-float" aria-label=3D"Copy"><=
span class=3D"btn-label-wrap"><span class=3D"btn-node start-node"><svg xmln=
s=3D"http://www.w3.org/2000/svg" width=3D"18px" height=3D"18px" fill=3D"cur=
rentColor" viewBox=3D"0 0 24 24"><path fill-rule=3D"evenodd" d=3D"M7 5a3 3 =
0 0 1 3-3h9a3 3 0 0 1 3 3v9a3 3 0 0 1-3 3h-2v2a3 3 0 0 1-3 3H5a3 3 0 0 1-3-=
3v-9a3 3 0 0 1 3-3h2V5Zm2 2h5a3 3 0 0 1 3 3v5h2a1 1 0 0 0 1-1V5a1 1 0 0 0-1=
-1h-9a1 1 0 0 0-1 1v2ZM5 9a1 1 0 0 0-1 1v9a1 1 0 0 0 1 1h9a1 1 0 0 0 1-1v-9=
a1 1 0 0 0-1-1H5Z" clip-rule=3D"evenodd"></path></svg></span></span></butto=
n><pre class=3D"hljs syntax-highlighter dark-mode code-sample-pre"><code cl=
ass=3D"language-python" style=3D"white-space: pre;"><code style=3D"float: l=
eft; padding-right: 10px;"><span class=3D"react-syntax-highlighter-line-num=
ber">1
</span><span class=3D"react-syntax-highlighter-line-number">2
</span><span class=3D"react-syntax-highlighter-line-number">3
</span><span class=3D"react-syntax-highlighter-line-number">4
</span><span class=3D"react-syntax-highlighter-line-number">5
</span><span class=3D"react-syntax-highlighter-line-number">6
</span><span class=3D"react-syntax-highlighter-line-number">7
</span><span class=3D"react-syntax-highlighter-line-number">8
</span><span class=3D"react-syntax-highlighter-line-number">9
</span><span class=3D"react-syntax-highlighter-line-number">10
</span><span class=3D"react-syntax-highlighter-line-number">11
</span><span class=3D"react-syntax-highlighter-line-number">12
</span><span class=3D"react-syntax-highlighter-line-number">13
</span><span class=3D"react-syntax-highlighter-line-number">14
</span><span class=3D"react-syntax-highlighter-line-number">15
</span><span class=3D"react-syntax-highlighter-line-number">16
</span><span class=3D"react-syntax-highlighter-line-number">17
</span><span class=3D"react-syntax-highlighter-line-number">18
</span><span class=3D"react-syntax-highlighter-line-number">19
</span><span class=3D"react-syntax-highlighter-line-number">20
</span><span class=3D"react-syntax-highlighter-line-number">21
</span><span class=3D"react-syntax-highlighter-line-number">22
</span><span class=3D"react-syntax-highlighter-line-number">23
</span><span class=3D"react-syntax-highlighter-line-number">24
</span><span class=3D"react-syntax-highlighter-line-number">25
</span><span class=3D"react-syntax-highlighter-line-number">26
</span><span class=3D"react-syntax-highlighter-line-number">27
</span><span class=3D"react-syntax-highlighter-line-number">28
</span><span class=3D"react-syntax-highlighter-line-number">29
</span><span class=3D"react-syntax-highlighter-line-number">30
</span><span class=3D"react-syntax-highlighter-line-number">31
</span><span class=3D"react-syntax-highlighter-line-number">32
</span><span class=3D"react-syntax-highlighter-line-number">33
</span><span class=3D"react-syntax-highlighter-line-number">34
</span><span class=3D"react-syntax-highlighter-line-number">35
</span><span class=3D"react-syntax-highlighter-line-number">36
</span><span class=3D"react-syntax-highlighter-line-number">37
</span><span class=3D"react-syntax-highlighter-line-number">38
</span><span class=3D"react-syntax-highlighter-line-number">39
</span><span class=3D"react-syntax-highlighter-line-number">40
</span><span class=3D"react-syntax-highlighter-line-number">41
</span><span class=3D"react-syntax-highlighter-line-number">42
</span><span class=3D"react-syntax-highlighter-line-number">43
</span><span class=3D"react-syntax-highlighter-line-number">44
</span><span class=3D"react-syntax-highlighter-line-number">45
</span><span class=3D"react-syntax-highlighter-line-number">46
</span><span class=3D"react-syntax-highlighter-line-number">47
</span><span class=3D"react-syntax-highlighter-line-number">48
</span><span class=3D"react-syntax-highlighter-line-number">49
</span><span class=3D"react-syntax-highlighter-line-number">50
</span><span class=3D"react-syntax-highlighter-line-number">51
</span><span class=3D"react-syntax-highlighter-line-number">52
</span><span class=3D"react-syntax-highlighter-line-number">53
</span><span class=3D"react-syntax-highlighter-line-number">54
</span><span class=3D"react-syntax-highlighter-line-number">55
</span><span class=3D"react-syntax-highlighter-line-number">56
</span><span class=3D"react-syntax-highlighter-line-number">57
</span><span class=3D"react-syntax-highlighter-line-number">58
</span><span class=3D"react-syntax-highlighter-line-number">59
</span><span class=3D"react-syntax-highlighter-line-number">60
</span><span class=3D"react-syntax-highlighter-line-number">61
</span><span class=3D"react-syntax-highlighter-line-number">62
</span><span class=3D"react-syntax-highlighter-line-number">63
</span><span class=3D"react-syntax-highlighter-line-number">64
</span><span class=3D"react-syntax-highlighter-line-number">65
</span><span class=3D"react-syntax-highlighter-line-number">66
</span><span class=3D"react-syntax-highlighter-line-number">67
</span><span class=3D"react-syntax-highlighter-line-number">68
</span></code><span><span class=3D"hljs-class hljs-keyword">class</span><sp=
an class=3D"hljs-class"> </span><span class=3D"hljs-class hljs-title">Equat=
ionParser</span><span class=3D"hljs-class">:</span><span>
</span></span><span><span>    </span><span class=3D"hljs-function hljs-keyw=
ord">def</span><span class=3D"hljs-function"> </span><span class=3D"hljs-fu=
nction hljs-title">__init__</span><span class=3D"hljs-function">(</span><sp=
an class=3D"hljs-function hljs-params">self, mso, equations, data</span><sp=
an class=3D"hljs-function">):</span><span>
</span></span><span>        self.mso =3D mso
</span><span>        self.equations =3D equations
</span><span>        self.data =3D data
</span><span>        self.parsed_equations =3D self._parse_equations()
</span><span>
</span><span><span>    </span><span class=3D"hljs-function hljs-keyword">de=
f</span><span class=3D"hljs-function"> </span><span class=3D"hljs-function =
hljs-title">_parse_equations</span><span class=3D"hljs-function">(</span><s=
pan class=3D"hljs-function hljs-params">self</span><span class=3D"hljs-func=
tion">):</span><span>
</span></span><span>        parsed =3D {}
</span><span><span>        </span><span class=3D"hljs-keyword">for</span><s=
pan> name, equation </span><span class=3D"hljs-keyword">in</span><span> sel=
f.equations.items():
</span></span><span><span>            left_side, right_side =3D </span><spa=
n class=3D"hljs-built_in">map</span><span>(</span><span class=3D"hljs-built=
_in">str</span><span>.strip, equation.split(</span><span class=3D"hljs-stri=
ng">'=3D'</span><span>))
</span></span><span><span>            symbols_dict =3D {var: symbols(var) <=
/span><span class=3D"hljs-keyword">for</span><span> var </span><span class=
=3D"hljs-keyword">in</span><span> left_side.split() + right_side.split() </=
span><span class=3D"hljs-keyword">if</span><span> var.isidentifier()}
</span></span><span>           =20
</span><span><span>            </span><span class=3D"hljs-comment"># Replac=
e observed data in the symbols_dict</span><span>
</span></span><span><span>            </span><span class=3D"hljs-keyword">f=
or</span><span> key </span><span class=3D"hljs-keyword">in</span><span> sel=
f.data:
</span></span><span><span>                </span><span class=3D"hljs-keywor=
d">if</span><span> key </span><span class=3D"hljs-keyword">in</span><span> =
symbols_dict:
</span></span><span>                    symbols_dict[key] =3D self.data[key=
]
</span><span>           =20
</span><span><span>            </span><span class=3D"hljs-comment"># Build =
the equation</span><span>
</span></span><span><span>            </span><span class=3D"hljs-keyword">i=
f</span><span> </span><span class=3D"hljs-string">'&amp;'</span><span> </sp=
an><span class=3D"hljs-keyword">in</span><span> left_side:
</span></span><span><span>                parsed_expression =3D And(*[symbo=
ls_dict[var.strip()] </span><span class=3D"hljs-keyword">for</span><span> v=
ar </span><span class=3D"hljs-keyword">in</span><span> left_side.split(</sp=
an><span class=3D"hljs-string">'&amp;'</span><span>)])
</span></span><span><span>            </span><span class=3D"hljs-keyword">e=
lif</span><span> </span><span class=3D"hljs-string">'|'</span><span> </span=
><span class=3D"hljs-keyword">in</span><span> left_side:
</span></span><span><span>                parsed_expression =3D Or(*[symbol=
s_dict[var.strip()] </span><span class=3D"hljs-keyword">for</span><span> va=
r </span><span class=3D"hljs-keyword">in</span><span> left_side.split(</spa=
n><span class=3D"hljs-string">'|'</span><span>)])
</span></span><span><span>            </span><span class=3D"hljs-keyword">e=
lif</span><span> </span><span class=3D"hljs-string">'^'</span><span> </span=
><span class=3D"hljs-keyword">in</span><span> left_side:
</span></span><span><span>                parsed_expression =3D Xor(*[symbo=
ls_dict[var.strip()] </span><span class=3D"hljs-keyword">for</span><span> v=
ar </span><span class=3D"hljs-keyword">in</span><span> left_side.split(</sp=
an><span class=3D"hljs-string">'^'</span><span>)])
</span></span><span><span>            </span><span class=3D"hljs-keyword">e=
lif</span><span> </span><span class=3D"hljs-string">'~&amp;'</span><span> <=
/span><span class=3D"hljs-keyword">in</span><span> left_side:
</span></span><span><span>                parsed_expression =3D Not(And(*[s=
ymbols_dict[var.strip()] </span><span class=3D"hljs-keyword">for</span><spa=
n> var </span><span class=3D"hljs-keyword">in</span><span> left_side.split(=
</span><span class=3D"hljs-string">'~&amp;'</span><span>)]))
</span></span><span><span>            </span><span class=3D"hljs-keyword">e=
lif</span><span> </span><span class=3D"hljs-string">'~|'</span><span> </spa=
n><span class=3D"hljs-keyword">in</span><span> left_side:
</span></span><span><span>                parsed_expression =3D Not(Or(*[sy=
mbols_dict[var.strip()] </span><span class=3D"hljs-keyword">for</span><span=
> var </span><span class=3D"hljs-keyword">in</span><span> left_side.split(<=
/span><span class=3D"hljs-string">'~|'</span><span>)]))
</span></span><span><span>            </span><span class=3D"hljs-keyword">e=
lif</span><span> </span><span class=3D"hljs-string">'~^'</span><span> </spa=
n><span class=3D"hljs-keyword">in</span><span> left_side:
</span></span><span><span>                parsed_expression =3D Not(Xor(*[s=
ymbols_dict[var.strip()] </span><span class=3D"hljs-keyword">for</span><spa=
n> var </span><span class=3D"hljs-keyword">in</span><span> left_side.split(=
</span><span class=3D"hljs-string">'~^'</span><span>)]))
</span></span><span><span>            </span><span class=3D"hljs-keyword">e=
lif</span><span> </span><span class=3D"hljs-string">'~'</span><span> </span=
><span class=3D"hljs-keyword">in</span><span> left_side:
</span></span><span><span>                parsed_expression =3D Not(symbols=
_dict[left_side.replace(</span><span class=3D"hljs-string">'~'</span><span>=
, </span><span class=3D"hljs-string">''</span><span>).strip()])
</span></span><span><span>            </span><span class=3D"hljs-keyword">e=
lse</span><span>:
</span></span><span>                parsed_expression =3D symbols_dict[left=
_side.strip()]
</span><span>
</span><span>            right_expr =3D symbols_dict[right_side.strip()]
</span><span>            parsed[name] =3D Eq(parsed_expression, right_expr)
</span><span>
</span><span><span>        </span><span class=3D"hljs-keyword">return</span=
><span> parsed
</span></span><span>
</span><span><span>    </span><span class=3D"hljs-function hljs-keyword">de=
f</span><span class=3D"hljs-function"> </span><span class=3D"hljs-function =
hljs-title">_is_contradictory</span><span class=3D"hljs-function">(</span><=
span class=3D"hljs-function hljs-params">self, equations</span><span class=
=3D"hljs-function">):</span><span>
</span></span><span><span>        is_logical =3D </span><span class=3D"hljs=
-built_in">any</span><span>(char </span><span class=3D"hljs-keyword">in</sp=
an><span> equation.lhs </span><span class=3D"hljs-keyword">for</span><span>=
 equation </span><span class=3D"hljs-keyword">in</span><span> equations </s=
pan><span class=3D"hljs-keyword">for</span><span> char </span><span class=
=3D"hljs-keyword">in</span><span> [</span><span class=3D"hljs-string">'~'</=
span><span>, </span><span class=3D"hljs-string">'&amp;'</span><span>, </spa=
n><span class=3D"hljs-string">'|'</span><span>, </span><span class=3D"hljs-=
string">'^'</span><span>])
</span></span><span><span>        </span><span class=3D"hljs-keyword">if</s=
pan><span> is_logical:
</span></span><span><span>            variables =3D {var </span><span class=
=3D"hljs-keyword">for</span><span> eq </span><span class=3D"hljs-keyword">i=
n</span><span> equations </span><span class=3D"hljs-keyword">for</span><spa=
n> var </span><span class=3D"hljs-keyword">in</span><span> eq.free_symbols}
</span></span><span><span>            </span><span class=3D"hljs-keyword">f=
or</span><span> combination </span><span class=3D"hljs-keyword">in</span><s=
pan> product([</span><span class=3D"hljs-literal">True</span><span>, </span=
><span class=3D"hljs-literal">False</span><span>], repeat=3D</span><span cl=
ass=3D"hljs-built_in">len</span><span>(variables)):
</span></span><span><span>                assignment =3D </span><span class=
=3D"hljs-built_in">dict</span><span>(</span><span class=3D"hljs-built_in">z=
ip</span><span>(variables, combination))
</span></span><span><span>                </span><span class=3D"hljs-keywor=
d">if</span><span> </span><span class=3D"hljs-built_in">all</span><span>(eq=
.subs(assignment) </span><span class=3D"hljs-keyword">for</span><span> eq <=
/span><span class=3D"hljs-keyword">in</span><span> equations):
</span></span><span><span>                    </span><span class=3D"hljs-ke=
yword">return</span><span> </span><span class=3D"hljs-literal">False</span>=
<span>
</span></span><span><span>            </span><span class=3D"hljs-keyword">r=
eturn</span><span> </span><span class=3D"hljs-literal">True</span><span>
</span></span><span><span>        </span><span class=3D"hljs-keyword">else<=
/span><span>:
</span></span><span><span>            </span><span class=3D"hljs-keyword">f=
rom</span><span> sympy </span><span class=3D"hljs-keyword">import</span><sp=
an> solve
</span></span><span><span>            solutions =3D solve([eq.lhs - eq.rhs =
</span><span class=3D"hljs-keyword">for</span><span> eq </span><span class=
=3D"hljs-keyword">in</span><span> equations], </span><span class=3D"hljs-bu=
ilt_in">dict</span><span>=3D</span><span class=3D"hljs-literal">True</span>=
<span>)
</span></span><span><span>            </span><span class=3D"hljs-keyword">r=
eturn</span><span> </span><span class=3D"hljs-built_in">len</span><span>(so=
lutions) =3D=3D </span><span class=3D"hljs-number">0</span><span>
</span></span><span>
</span><span><span>    </span><span class=3D"hljs-function hljs-keyword">de=
f</span><span class=3D"hljs-function"> </span><span class=3D"hljs-function =
hljs-title">get_minimal_conflicts</span><span class=3D"hljs-function">(</sp=
an><span class=3D"hljs-function hljs-params">self</span><span class=3D"hljs=
-function">):</span><span>
</span></span><span>        minimal_conflicts =3D []
</span><span><span>        </span><span class=3D"hljs-keyword">for</span><s=
pan> group </span><span class=3D"hljs-keyword">in</span><span> self.mso:
</span></span><span><span>            group_equations =3D [self.parsed_equa=
tions[name] </span><span class=3D"hljs-keyword">for</span><span> name </spa=
n><span class=3D"hljs-keyword">in</span><span> group </span><span class=3D"=
hljs-keyword">if</span><span> name </span><span class=3D"hljs-keyword">in</=
span><span> self.parsed_equations]
</span></span><span><span>            </span><span class=3D"hljs-keyword">i=
f</span><span> self._is_contradictory(group_equations):  </span><span class=
=3D"hljs-comment"># Check for contradictions in the group</span><span>
</span></span><span><span>                minimal_conflicts.append(</span><=
span class=3D"hljs-built_in">sorted</span><span>(group))
</span></span><span>
</span><span><span>        </span><span class=3D"hljs-keyword">return</span=
><span> {</span><span class=3D"hljs-string">'minimal_conflicts'</span><span=
>: </span><span class=3D"hljs-built_in">sorted</span><span>(minimal_conflic=
ts, key=3D</span><span class=3D"hljs-keyword">lambda</span><span> x: (</spa=
n><span class=3D"hljs-built_in">len</span><span>(x), x))}
</span></span><span>
</span><span><span></span><span class=3D"hljs-comment"># Create an instance=
 of the EquationParser and test again</span><span>
</span></span><span>parser =3D EquationParser(mso, equations, data)
</span><span>output =3D parser.get_minimal_conflicts()
</span><span>output</span></code></pre></div></div></div></div></div></div>=
</div><div class=3D"thread-run-item"><div class=3D"thread-run-header"><div =
class=3D"thread-item-left"><div class=3D"expanded-query"><div class=3D"tool=
-row"><div class=3D"monospace-query">code_interpreter</div></div><div class=
=3D"pre-query"><div class=3D"code-sample"><div class=3D"code-sample-body co=
de-sample-body-small"><button type=3D"button" tabindex=3D"0" class=3D"btn b=
tn-sm btn-minimal btn-neutral code-sample-copy-float" aria-label=3D"Copy"><=
span class=3D"btn-label-wrap"><span class=3D"btn-node start-node"><svg xmln=
s=3D"http://www.w3.org/2000/svg" width=3D"18px" height=3D"18px" fill=3D"cur=
rentColor" viewBox=3D"0 0 24 24"><path fill-rule=3D"evenodd" d=3D"M7 5a3 3 =
0 0 1 3-3h9a3 3 0 0 1 3 3v9a3 3 0 0 1-3 3h-2v2a3 3 0 0 1-3 3H5a3 3 0 0 1-3-=
3v-9a3 3 0 0 1 3-3h2V5Zm2 2h5a3 3 0 0 1 3 3v5h2a1 1 0 0 0 1-1V5a1 1 0 0 0-1=
-1h-9a1 1 0 0 0-1 1v2ZM5 9a1 1 0 0 0-1 1v9a1 1 0 0 0 1 1h9a1 1 0 0 0 1-1v-9=
a1 1 0 0 0-1-1H5Z" clip-rule=3D"evenodd"></path></svg></span></span></butto=
n><pre class=3D"hljs syntax-highlighter dark-mode code-sample-pre"><code cl=
ass=3D"language-python" style=3D"white-space: pre;"><code style=3D"float: l=
eft; padding-right: 10px;"><span class=3D"react-syntax-highlighter-line-num=
ber">1
</span><span class=3D"react-syntax-highlighter-line-number">2
</span><span class=3D"react-syntax-highlighter-line-number">3
</span><span class=3D"react-syntax-highlighter-line-number">4
</span><span class=3D"react-syntax-highlighter-line-number">5
</span><span class=3D"react-syntax-highlighter-line-number">6
</span><span class=3D"react-syntax-highlighter-line-number">7
</span><span class=3D"react-syntax-highlighter-line-number">8
</span><span class=3D"react-syntax-highlighter-line-number">9
</span><span class=3D"react-syntax-highlighter-line-number">10
</span><span class=3D"react-syntax-highlighter-line-number">11
</span><span class=3D"react-syntax-highlighter-line-number">12
</span><span class=3D"react-syntax-highlighter-line-number">13
</span><span class=3D"react-syntax-highlighter-line-number">14
</span><span class=3D"react-syntax-highlighter-line-number">15
</span><span class=3D"react-syntax-highlighter-line-number">16
</span><span class=3D"react-syntax-highlighter-line-number">17
</span><span class=3D"react-syntax-highlighter-line-number">18
</span><span class=3D"react-syntax-highlighter-line-number">19
</span><span class=3D"react-syntax-highlighter-line-number">20
</span><span class=3D"react-syntax-highlighter-line-number">21
</span><span class=3D"react-syntax-highlighter-line-number">22
</span><span class=3D"react-syntax-highlighter-line-number">23
</span><span class=3D"react-syntax-highlighter-line-number">24
</span><span class=3D"react-syntax-highlighter-line-number">25
</span><span class=3D"react-syntax-highlighter-line-number">26
</span><span class=3D"react-syntax-highlighter-line-number">27
</span><span class=3D"react-syntax-highlighter-line-number">28
</span><span class=3D"react-syntax-highlighter-line-number">29
</span><span class=3D"react-syntax-highlighter-line-number">30
</span><span class=3D"react-syntax-highlighter-line-number">31
</span><span class=3D"react-syntax-highlighter-line-number">32
</span><span class=3D"react-syntax-highlighter-line-number">33
</span><span class=3D"react-syntax-highlighter-line-number">34
</span><span class=3D"react-syntax-highlighter-line-number">35
</span><span class=3D"react-syntax-highlighter-line-number">36
</span><span class=3D"react-syntax-highlighter-line-number">37
</span><span class=3D"react-syntax-highlighter-line-number">38
</span><span class=3D"react-syntax-highlighter-line-number">39
</span><span class=3D"react-syntax-highlighter-line-number">40
</span><span class=3D"react-syntax-highlighter-line-number">41
</span><span class=3D"react-syntax-highlighter-line-number">42
</span><span class=3D"react-syntax-highlighter-line-number">43
</span><span class=3D"react-syntax-highlighter-line-number">44
</span><span class=3D"react-syntax-highlighter-line-number">45
</span><span class=3D"react-syntax-highlighter-line-number">46
</span><span class=3D"react-syntax-highlighter-line-number">47
</span><span class=3D"react-syntax-highlighter-line-number">48
</span><span class=3D"react-syntax-highlighter-line-number">49
</span><span class=3D"react-syntax-highlighter-line-number">50
</span><span class=3D"react-syntax-highlighter-line-number">51
</span><span class=3D"react-syntax-highlighter-line-number">52
</span><span class=3D"react-syntax-highlighter-line-number">53
</span><span class=3D"react-syntax-highlighter-line-number">54
</span><span class=3D"react-syntax-highlighter-line-number">55
</span><span class=3D"react-syntax-highlighter-line-number">56
</span><span class=3D"react-syntax-highlighter-line-number">57
</span><span class=3D"react-syntax-highlighter-line-number">58
</span><span class=3D"react-syntax-highlighter-line-number">59
</span><span class=3D"react-syntax-highlighter-line-number">60
</span><span class=3D"react-syntax-highlighter-line-number">61
</span><span class=3D"react-syntax-highlighter-line-number">62
</span><span class=3D"react-syntax-highlighter-line-number">63
</span><span class=3D"react-syntax-highlighter-line-number">64
</span><span class=3D"react-syntax-highlighter-line-number">65
</span><span class=3D"react-syntax-highlighter-line-number">66
</span><span class=3D"react-syntax-highlighter-line-number">67
</span><span class=3D"react-syntax-highlighter-line-number">68
</span><span class=3D"react-syntax-highlighter-line-number">69
</span><span class=3D"react-syntax-highlighter-line-number">70
</span><span class=3D"react-syntax-highlighter-line-number">71
</span><span class=3D"react-syntax-highlighter-line-number">72
</span><span class=3D"react-syntax-highlighter-line-number">73
</span></code><span><span class=3D"hljs-comment"># There is an issue in how=
 logical expressions are processed. </span><span>
</span></span><span><span></span><span class=3D"hljs-comment"># Let's impro=
ve the handling of logical expressions and also refine the contradiction ch=
eck.</span><span>
</span></span><span>
</span><span><span></span><span class=3D"hljs-class hljs-keyword">class</sp=
an><span class=3D"hljs-class"> </span><span class=3D"hljs-class hljs-title"=
>EquationParser</span><span class=3D"hljs-class">:</span><span>
</span></span><span><span>    </span><span class=3D"hljs-function hljs-keyw=
ord">def</span><span class=3D"hljs-function"> </span><span class=3D"hljs-fu=
nction hljs-title">__init__</span><span class=3D"hljs-function">(</span><sp=
an class=3D"hljs-function hljs-params">self, mso, equations, data</span><sp=
an class=3D"hljs-function">):</span><span>
</span></span><span>        self.mso =3D mso
</span><span>        self.equations =3D equations
</span><span>        self.data =3D data
</span><span>        self.parsed_equations =3D self._parse_equations()
</span><span>
</span><span><span>    </span><span class=3D"hljs-function hljs-keyword">de=
f</span><span class=3D"hljs-function"> </span><span class=3D"hljs-function =
hljs-title">_parse_equations</span><span class=3D"hljs-function">(</span><s=
pan class=3D"hljs-function hljs-params">self</span><span class=3D"hljs-func=
tion">):</span><span>
</span></span><span>        parsed =3D {}
</span><span><span>        </span><span class=3D"hljs-keyword">for</span><s=
pan> name, equation </span><span class=3D"hljs-keyword">in</span><span> sel=
f.equations.items():
</span></span><span><span>            left_side, right_side =3D </span><spa=
n class=3D"hljs-built_in">map</span><span>(</span><span class=3D"hljs-built=
_in">str</span><span>.strip, equation.split(</span><span class=3D"hljs-stri=
ng">'=3D'</span><span>))
</span></span><span><span>            symbols_dict =3D {var: symbols(var) <=
/span><span class=3D"hljs-keyword">for</span><span> var </span><span class=
=3D"hljs-keyword">in</span><span> left_side.split() + right_side.split() </=
span><span class=3D"hljs-keyword">if</span><span> var.isidentifier()}
</span></span><span>           =20
</span><span><span>            </span><span class=3D"hljs-comment"># Replac=
e observed data in the symbols_dict</span><span>
</span></span><span><span>            </span><span class=3D"hljs-keyword">f=
or</span><span> key </span><span class=3D"hljs-keyword">in</span><span> sel=
f.data:
</span></span><span><span>                </span><span class=3D"hljs-keywor=
d">if</span><span> key </span><span class=3D"hljs-keyword">in</span><span> =
symbols_dict:
</span></span><span>                    symbols_dict[key] =3D self.data[key=
]
</span><span>           =20
</span><span><span>            </span><span class=3D"hljs-comment"># Build =
the equation</span><span>
</span></span><span><span>            </span><span class=3D"hljs-keyword">i=
f</span><span> </span><span class=3D"hljs-string">'&amp;'</span><span> </sp=
an><span class=3D"hljs-keyword">in</span><span> left_side:
</span></span><span><span>                parsed_expression =3D And(*[symbo=
ls_dict[var.strip()] </span><span class=3D"hljs-keyword">for</span><span> v=
ar </span><span class=3D"hljs-keyword">in</span><span> left_side.split(</sp=
an><span class=3D"hljs-string">'&amp;'</span><span>)])
</span></span><span><span>            </span><span class=3D"hljs-keyword">e=
lif</span><span> </span><span class=3D"hljs-string">'|'</span><span> </span=
><span class=3D"hljs-keyword">in</span><span> left_side:
</span></span><span><span>                parsed_expression =3D Or(*[symbol=
s_dict[var.strip()] </span><span class=3D"hljs-keyword">for</span><span> va=
r </span><span class=3D"hljs-keyword">in</span><span> left_side.split(</spa=
n><span class=3D"hljs-string">'|'</span><span>)])
</span></span><span><span>            </span><span class=3D"hljs-keyword">e=
lif</span><span> </span><span class=3D"hljs-string">'^'</span><span> </span=
><span class=3D"hljs-keyword">in</span><span> left_side:
</span></span><span><span>                parsed_expression =3D Xor(*[symbo=
ls_dict[var.strip()] </span><span class=3D"hljs-keyword">for</span><span> v=
ar </span><span class=3D"hljs-keyword">in</span><span> left_side.split(</sp=
an><span class=3D"hljs-string">'^'</span><span>)])
</span></span><span><span>            </span><span class=3D"hljs-keyword">e=
lif</span><span> </span><span class=3D"hljs-string">'~&amp;'</span><span> <=
/span><span class=3D"hljs-keyword">in</span><span> left_side:
</span></span><span><span>                parsed_expression =3D Not(And(*[s=
ymbols_dict[var.strip()] </span><span class=3D"hljs-keyword">for</span><spa=
n> var </span><span class=3D"hljs-keyword">in</span><span> left_side.split(=
</span><span class=3D"hljs-string">'~&amp;'</span><span>)]))
</span></span><span><span>            </span><span class=3D"hljs-keyword">e=
lif</span><span> </span><span class=3D"hljs-string">'~|'</span><span> </spa=
n><span class=3D"hljs-keyword">in</span><span> left_side:
</span></span><span><span>                parsed_expression =3D Not(Or(*[sy=
mbols_dict[var.strip()] </span><span class=3D"hljs-keyword">for</span><span=
> var </span><span class=3D"hljs-keyword">in</span><span> left_side.split(<=
/span><span class=3D"hljs-string">'~|'</span><span>)]))
</span></span><span><span>            </span><span class=3D"hljs-keyword">e=
lif</span><span> </span><span class=3D"hljs-string">'~^'</span><span> </spa=
n><span class=3D"hljs-keyword">in</span><span> left_side:
</span></span><span><span>                parsed_expression =3D Not(Xor(*[s=
ymbols_dict[var.strip()] </span><span class=3D"hljs-keyword">for</span><spa=
n> var </span><span class=3D"hljs-keyword">in</span><span> left_side.split(=
</span><span class=3D"hljs-string">'~^'</span><span>)]))
</span></span><span><span>            </span><span class=3D"hljs-keyword">e=
lif</span><span> </span><span class=3D"hljs-string">'~'</span><span> </span=
><span class=3D"hljs-keyword">in</span><span> left_side:
</span></span><span><span>                parsed_expression =3D Not(symbols=
_dict[left_side.replace(</span><span class=3D"hljs-string">'~'</span><span>=
, </span><span class=3D"hljs-string">''</span><span>).strip()])
</span></span><span><span>            </span><span class=3D"hljs-keyword">e=
lse</span><span>:
</span></span><span>                parsed_expression =3D symbols_dict[left=
_side.strip()]
</span><span>
</span><span>            right_expr =3D symbols_dict[right_side.strip()]
</span><span>            parsed[name] =3D Eq(parsed_expression, right_expr)
</span><span>
</span><span><span>        </span><span class=3D"hljs-keyword">return</span=
><span> parsed
</span></span><span>
</span><span><span>    </span><span class=3D"hljs-function hljs-keyword">de=
f</span><span class=3D"hljs-function"> </span><span class=3D"hljs-function =
hljs-title">_is_contradictory</span><span class=3D"hljs-function">(</span><=
span class=3D"hljs-function hljs-params">self, equations</span><span class=
=3D"hljs-function">):</span><span>
</span></span><span><span>        </span><span class=3D"hljs-comment"># Che=
ck if any equation is logical</span><span>
</span></span><span><span>        is_logical =3D </span><span class=3D"hljs=
-built_in">any</span><span>(char </span><span class=3D"hljs-keyword">in</sp=
an><span> </span><span class=3D"hljs-built_in">str</span><span>(eq.lhs) </s=
pan><span class=3D"hljs-keyword">or</span><span> char </span><span class=3D=
"hljs-keyword">in</span><span> </span><span class=3D"hljs-built_in">str</sp=
an><span>(eq.rhs) </span><span class=3D"hljs-keyword">for</span><span> eq <=
/span><span class=3D"hljs-keyword">in</span><span> equations </span><span c=
lass=3D"hljs-keyword">for</span><span> char </span><span class=3D"hljs-keyw=
ord">in</span><span> [</span><span class=3D"hljs-string">'~'</span><span>, =
</span><span class=3D"hljs-string">'&amp;'</span><span>, </span><span class=
=3D"hljs-string">'|'</span><span>, </span><span class=3D"hljs-string">'^'</=
span><span>])
</span></span><span><span>        </span><span class=3D"hljs-keyword">if</s=
pan><span> is_logical:
</span></span><span><span>            variables =3D {var </span><span class=
=3D"hljs-keyword">for</span><span> eq </span><span class=3D"hljs-keyword">i=
n</span><span> equations </span><span class=3D"hljs-keyword">for</span><spa=
n> var </span><span class=3D"hljs-keyword">in</span><span> eq.free_symbols}
</span></span><span><span>            </span><span class=3D"hljs-keyword">f=
or</span><span> combination </span><span class=3D"hljs-keyword">in</span><s=
pan> product([</span><span class=3D"hljs-literal">True</span><span>, </span=
><span class=3D"hljs-literal">False</span><span>], repeat=3D</span><span cl=
ass=3D"hljs-built_in">len</span><span>(variables)):
</span></span><span><span>                assignment =3D </span><span class=
=3D"hljs-built_in">dict</span><span>(</span><span class=3D"hljs-built_in">z=
ip</span><span>(variables, combination))
</span></span><span><span>                </span><span class=3D"hljs-keywor=
d">if</span><span> </span><span class=3D"hljs-built_in">all</span><span>(eq=
.subs(assignment) </span><span class=3D"hljs-keyword">for</span><span> eq <=
/span><span class=3D"hljs-keyword">in</span><span> equations):
</span></span><span><span>                    </span><span class=3D"hljs-ke=
yword">return</span><span> </span><span class=3D"hljs-literal">False</span>=
<span>
</span></span><span><span>            </span><span class=3D"hljs-keyword">r=
eturn</span><span> </span><span class=3D"hljs-literal">True</span><span>
</span></span><span><span>        </span><span class=3D"hljs-keyword">else<=
/span><span>:
</span></span><span><span>            </span><span class=3D"hljs-keyword">f=
rom</span><span> sympy </span><span class=3D"hljs-keyword">import</span><sp=
an> solve
</span></span><span><span>            </span><span class=3D"hljs-comment">#=
 Solve the equations as linear ones (if applicable)</span><span>
</span></span><span><span>            solutions =3D solve([eq.lhs - eq.rhs =
</span><span class=3D"hljs-keyword">for</span><span> eq </span><span class=
=3D"hljs-keyword">in</span><span> equations], </span><span class=3D"hljs-bu=
ilt_in">dict</span><span>=3D</span><span class=3D"hljs-literal">True</span>=
<span>)
</span></span><span><span>            </span><span class=3D"hljs-keyword">r=
eturn</span><span> </span><span class=3D"hljs-built_in">len</span><span>(so=
lutions) =3D=3D </span><span class=3D"hljs-number">0</span><span>
</span></span><span>
</span><span><span>    </span><span class=3D"hljs-function hljs-keyword">de=
f</span><span class=3D"hljs-function"> </span><span class=3D"hljs-function =
hljs-title">get_minimal_conflicts</span><span class=3D"hljs-function">(</sp=
an><span class=3D"hljs-function hljs-params">self</span><span class=3D"hljs=
-function">):</span><span>
</span></span><span>        minimal_conflicts =3D []
</span><span><span>        </span><span class=3D"hljs-keyword">for</span><s=
pan> group </span><span class=3D"hljs-keyword">in</span><span> self.mso:
</span></span><span><span>            group_equations =3D [self.parsed_equa=
tions[name] </span><span class=3D"hljs-keyword">for</span><span> name </spa=
n><span class=3D"hljs-keyword">in</span><span> group </span><span class=3D"=
hljs-keyword">if</span><span> name </span><span class=3D"hljs-keyword">in</=
span><span> self.parsed_equations]
</span></span><span><span>            </span><span class=3D"hljs-keyword">i=
f</span><span> self._is_contradictory(group_equations):  </span><span class=
=3D"hljs-comment"># Check for contradictions in the group</span><span>
</span></span><span><span>                minimal_conflicts.append(</span><=
span class=3D"hljs-built_in">sorted</span><span>(group))
</span></span><span>
</span><span><span>        </span><span class=3D"hljs-keyword">return</span=
><span> {</span><span class=3D"hljs-string">'minimal_conflicts'</span><span=
>: </span><span class=3D"hljs-built_in">sorted</span><span>(minimal_conflic=
ts, key=3D</span><span class=3D"hljs-keyword">lambda</span><span> x: (</spa=
n><span class=3D"hljs-built_in">len</span><span>(x), x))}
</span></span><span>
</span><span><span></span><span class=3D"hljs-comment"># Create an instance=
 of the EquationParser and test again</span><span>
</span></span><span>parser =3D EquationParser(mso, equations, data)
</span><span>output =3D parser.get_minimal_conflicts()
</span><span>output</span></code></pre></div></div></div></div></div></div>=
</div><div class=3D"thread-item"><div class=3D"thread-item-header"><span><d=
iv class=3D"thread-item-header-author">part2_10</div></span></div><div clas=
s=3D"thread-content"><div class=3D"markdown-content"><p>The output indicate=
s that the groups <code>['A1', 'O1', 'O2']</code> and <code>['A2', 'O2', 'O=
3']</code> are identified as contradicting each other based on the provided=
 equations and data.</p>
<p>These are the minimal conflicting groups based on the logical relationsh=
ips established in the equations. If you have additional questions or need =
further modifications, feel free to ask!</p></div></div><div class=3D"css-4=
ip17j e8jtqtk4"></div></div><div class=3D"thread-item"><div class=3D"thread=
-item-header"><span><div class=3D"thread-item-header-author">User</div></sp=
an></div><div class=3D"thread-content"><div class=3D"markdown-content"><p>e=
quations =3D {
'M1': 'a * c =3D x01',
'M2': 'b * d =3D x02',
'M3': 'c * e =3D x03',
'A1': 'x01 + x02 =3D f',
'A2': 'x02 + x03 =3D g'}
mso =3D [['M1', 'M2', 'A1'], ['M2', 'M3', 'A2'], ['M1', 'M3', 'A1', 'A2']]
data =3D {'a': 2, 'b': 2, 'c': 3, 'd': 3, 'e': 2, 'f': 10, 'g': 12}</p></di=
v></div><div class=3D"css-4ip17j e8jtqtk4"></div></div><div class=3D"thread=
-run-item"><div class=3D"thread-run-header"><div class=3D"thread-item-left"=
><div class=3D"expanded-query"><div class=3D"tool-row"><div class=3D"monosp=
ace-query">code_interpreter</div></div><div class=3D"pre-query"><div class=
=3D"code-sample"><div class=3D"code-sample-body code-sample-body-small"><bu=
tton type=3D"button" tabindex=3D"0" class=3D"btn btn-sm btn-minimal btn-neu=
tral code-sample-copy-float" aria-label=3D"Copy"><span class=3D"btn-label-w=
rap"><span class=3D"btn-node start-node"><svg xmlns=3D"http://www.w3.org/20=
00/svg" width=3D"18px" height=3D"18px" fill=3D"currentColor" viewBox=3D"0 0=
 24 24"><path fill-rule=3D"evenodd" d=3D"M7 5a3 3 0 0 1 3-3h9a3 3 0 0 1 3 3=
v9a3 3 0 0 1-3 3h-2v2a3 3 0 0 1-3 3H5a3 3 0 0 1-3-3v-9a3 3 0 0 1 3-3h2V5Zm2=
 2h5a3 3 0 0 1 3 3v5h2a1 1 0 0 0 1-1V5a1 1 0 0 0-1-1h-9a1 1 0 0 0-1 1v2ZM5 =
9a1 1 0 0 0-1 1v9a1 1 0 0 0 1 1h9a1 1 0 0 0 1-1v-9a1 1 0 0 0-1-1H5Z" clip-r=
ule=3D"evenodd"></path></svg></span></span></button><pre class=3D"hljs synt=
ax-highlighter dark-mode code-sample-pre"><code class=3D"language-python" s=
tyle=3D"white-space: pre;"><code style=3D"float: left; padding-right: 10px;=
"><span class=3D"react-syntax-highlighter-line-number">1
</span><span class=3D"react-syntax-highlighter-line-number">2
</span><span class=3D"react-syntax-highlighter-line-number">3
</span><span class=3D"react-syntax-highlighter-line-number">4
</span><span class=3D"react-syntax-highlighter-line-number">5
</span><span class=3D"react-syntax-highlighter-line-number">6
</span><span class=3D"react-syntax-highlighter-line-number">7
</span><span class=3D"react-syntax-highlighter-line-number">8
</span><span class=3D"react-syntax-highlighter-line-number">9
</span><span class=3D"react-syntax-highlighter-line-number">10
</span><span class=3D"react-syntax-highlighter-line-number">11
</span><span class=3D"react-syntax-highlighter-line-number">12
</span><span class=3D"react-syntax-highlighter-line-number">13
</span><span class=3D"react-syntax-highlighter-line-number">14
</span><span class=3D"react-syntax-highlighter-line-number">15
</span></code><span><span class=3D"hljs-comment"># Define the new input dat=
a</span><span>
</span></span><span>equations_new =3D {
</span><span><span>    </span><span class=3D"hljs-string">'M1'</span><span>=
: </span><span class=3D"hljs-string">'a * c =3D x01'</span><span>,=20
</span></span><span><span>    </span><span class=3D"hljs-string">'M2'</span=
><span>: </span><span class=3D"hljs-string">'b * d =3D x02'</span><span>,=
=20
</span></span><span><span>    </span><span class=3D"hljs-string">'M3'</span=
><span>: </span><span class=3D"hljs-string">'c * e =3D x03'</span><span>,=
=20
</span></span><span><span>    </span><span class=3D"hljs-string">'A1'</span=
><span>: </span><span class=3D"hljs-string">'x01 + x02 =3D f'</span><span>,=
=20
</span></span><span><span>    </span><span class=3D"hljs-string">'A2'</span=
><span>: </span><span class=3D"hljs-string">'x02 + x03 =3D g'</span><span>
</span></span><span>}
</span><span><span>mso_new =3D [[</span><span class=3D"hljs-string">'M1'</s=
pan><span>, </span><span class=3D"hljs-string">'M2'</span><span>, </span><s=
pan class=3D"hljs-string">'A1'</span><span>], [</span><span class=3D"hljs-s=
tring">'M2'</span><span>, </span><span class=3D"hljs-string">'M3'</span><sp=
an>, </span><span class=3D"hljs-string">'A2'</span><span>], [</span><span c=
lass=3D"hljs-string">'M1'</span><span>, </span><span class=3D"hljs-string">=
'M3'</span><span>, </span><span class=3D"hljs-string">'A1'</span><span>, </=
span><span class=3D"hljs-string">'A2'</span><span>]]
</span></span><span><span>data_new =3D {</span><span class=3D"hljs-string">=
'a'</span><span>: </span><span class=3D"hljs-number">2</span><span>, </span=
><span class=3D"hljs-string">'b'</span><span>: </span><span class=3D"hljs-n=
umber">2</span><span>, </span><span class=3D"hljs-string">'c'</span><span>:=
 </span><span class=3D"hljs-number">3</span><span>, </span><span class=3D"h=
ljs-string">'d'</span><span>: </span><span class=3D"hljs-number">3</span><s=
pan>, </span><span class=3D"hljs-string">'e'</span><span>: </span><span cla=
ss=3D"hljs-number">2</span><span>, </span><span class=3D"hljs-string">'f'</=
span><span>: </span><span class=3D"hljs-number">10</span><span>, </span><sp=
an class=3D"hljs-string">'g'</span><span>: </span><span class=3D"hljs-numbe=
r">12</span><span>}
</span></span><span>
</span><span><span></span><span class=3D"hljs-comment"># Create an instance=
 of the EquationParser with new data and analyze minimal conflicts</span><s=
pan>
</span></span><span>parser_new =3D EquationParser(mso_new, equations_new, d=
ata_new)
</span><span>output_new =3D parser_new.get_minimal_conflicts()
</span><span>output_new</span></code></pre></div></div></div></div></div></=
div></div><div class=3D"thread-item"><div class=3D"thread-item-header"><spa=
n><div class=3D"thread-item-header-author">part2_10</div></span></div><div =
class=3D"thread-content"><div class=3D"markdown-content"><p>The error messa=
ge indicates that there's a <code>KeyError</code> associated with the left-=
hand side of the equations, particularly when trying to build the parsed ex=
pression.</p>
<p>This suggests there may be an issue in how the equations are being parse=
d, particularly when involving multiplication. Let's take a closer look at =
that section of the code and fix it to ensure that operations like multipli=
cation and addition are handled correctly.</p>
<p>I'll modify the parsing to ensure that expressions involving multiplicat=
ion and addition are properly managed. Let's refactor the parsing logic acc=
ordingly.</p></div></div><div class=3D"css-4ip17j e8jtqtk4"></div></div><di=
v class=3D"thread-run-item"><div class=3D"thread-run-header"><div class=3D"=
thread-item-left"><div class=3D"expanded-query"><div class=3D"tool-row"><di=
v class=3D"monospace-query">code_interpreter</div></div><div class=3D"pre-q=
uery"><div class=3D"code-sample"><div class=3D"code-sample-body code-sample=
-body-small"><button type=3D"button" tabindex=3D"0" class=3D"btn btn-sm btn=
-minimal btn-neutral code-sample-copy-float" aria-label=3D"Copy"><span clas=
s=3D"btn-label-wrap"><span class=3D"btn-node start-node"><svg xmlns=3D"http=
://www.w3.org/2000/svg" width=3D"18px" height=3D"18px" fill=3D"currentColor=
" viewBox=3D"0 0 24 24"><path fill-rule=3D"evenodd" d=3D"M7 5a3 3 0 0 1 3-3=
h9a3 3 0 0 1 3 3v9a3 3 0 0 1-3 3h-2v2a3 3 0 0 1-3 3H5a3 3 0 0 1-3-3v-9a3 3 =
0 0 1 3-3h2V5Zm2 2h5a3 3 0 0 1 3 3v5h2a1 1 0 0 0 1-1V5a1 1 0 0 0-1-1h-9a1 1=
 0 0 0-1 1v2ZM5 9a1 1 0 0 0-1 1v9a1 1 0 0 0 1 1h9a1 1 0 0 0 1-1v-9a1 1 0 0 =
0-1-1H5Z" clip-rule=3D"evenodd"></path></svg></span></span></button><pre cl=
ass=3D"hljs syntax-highlighter dark-mode code-sample-pre"><code class=3D"la=
nguage-python" style=3D"white-space: pre;"><code style=3D"float: left; padd=
ing-right: 10px;"><span class=3D"react-syntax-highlighter-line-number">1
</span><span class=3D"react-syntax-highlighter-line-number">2
</span><span class=3D"react-syntax-highlighter-line-number">3
</span><span class=3D"react-syntax-highlighter-line-number">4
</span><span class=3D"react-syntax-highlighter-line-number">5
</span><span class=3D"react-syntax-highlighter-line-number">6
</span><span class=3D"react-syntax-highlighter-line-number">7
</span><span class=3D"react-syntax-highlighter-line-number">8
</span><span class=3D"react-syntax-highlighter-line-number">9
</span><span class=3D"react-syntax-highlighter-line-number">10
</span><span class=3D"react-syntax-highlighter-line-number">11
</span><span class=3D"react-syntax-highlighter-line-number">12
</span><span class=3D"react-syntax-highlighter-line-number">13
</span><span class=3D"react-syntax-highlighter-line-number">14
</span><span class=3D"react-syntax-highlighter-line-number">15
</span><span class=3D"react-syntax-highlighter-line-number">16
</span><span class=3D"react-syntax-highlighter-line-number">17
</span><span class=3D"react-syntax-highlighter-line-number">18
</span><span class=3D"react-syntax-highlighter-line-number">19
</span><span class=3D"react-syntax-highlighter-line-number">20
</span><span class=3D"react-syntax-highlighter-line-number">21
</span><span class=3D"react-syntax-highlighter-line-number">22
</span><span class=3D"react-syntax-highlighter-line-number">23
</span><span class=3D"react-syntax-highlighter-line-number">24
</span><span class=3D"react-syntax-highlighter-line-number">25
</span><span class=3D"react-syntax-highlighter-line-number">26
</span><span class=3D"react-syntax-highlighter-line-number">27
</span><span class=3D"react-syntax-highlighter-line-number">28
</span><span class=3D"react-syntax-highlighter-line-number">29
</span><span class=3D"react-syntax-highlighter-line-number">30
</span><span class=3D"react-syntax-highlighter-line-number">31
</span><span class=3D"react-syntax-highlighter-line-number">32
</span><span class=3D"react-syntax-highlighter-line-number">33
</span><span class=3D"react-syntax-highlighter-line-number">34
</span><span class=3D"react-syntax-highlighter-line-number">35
</span><span class=3D"react-syntax-highlighter-line-number">36
</span><span class=3D"react-syntax-highlighter-line-number">37
</span><span class=3D"react-syntax-highlighter-line-number">38
</span><span class=3D"react-syntax-highlighter-line-number">39
</span><span class=3D"react-syntax-highlighter-line-number">40
</span><span class=3D"react-syntax-highlighter-line-number">41
</span><span class=3D"react-syntax-highlighter-line-number">42
</span><span class=3D"react-syntax-highlighter-line-number">43
</span><span class=3D"react-syntax-highlighter-line-number">44
</span><span class=3D"react-syntax-highlighter-line-number">45
</span><span class=3D"react-syntax-highlighter-line-number">46
</span><span class=3D"react-syntax-highlighter-line-number">47
</span><span class=3D"react-syntax-highlighter-line-number">48
</span><span class=3D"react-syntax-highlighter-line-number">49
</span><span class=3D"react-syntax-highlighter-line-number">50
</span><span class=3D"react-syntax-highlighter-line-number">51
</span><span class=3D"react-syntax-highlighter-line-number">52
</span><span class=3D"react-syntax-highlighter-line-number">53
</span><span class=3D"react-syntax-highlighter-line-number">54
</span><span class=3D"react-syntax-highlighter-line-number">55
</span><span class=3D"react-syntax-highlighter-line-number">56
</span><span class=3D"react-syntax-highlighter-line-number">57
</span><span class=3D"react-syntax-highlighter-line-number">58
</span><span class=3D"react-syntax-highlighter-line-number">59
</span><span class=3D"react-syntax-highlighter-line-number">60
</span><span class=3D"react-syntax-highlighter-line-number">61
</span><span class=3D"react-syntax-highlighter-line-number">62
</span><span class=3D"react-syntax-highlighter-line-number">63
</span><span class=3D"react-syntax-highlighter-line-number">64
</span><span class=3D"react-syntax-highlighter-line-number">65
</span><span class=3D"react-syntax-highlighter-line-number">66
</span><span class=3D"react-syntax-highlighter-line-number">67
</span><span class=3D"react-syntax-highlighter-line-number">68
</span><span class=3D"react-syntax-highlighter-line-number">69
</span><span class=3D"react-syntax-highlighter-line-number">70
</span><span class=3D"react-syntax-highlighter-line-number">71
</span><span class=3D"react-syntax-highlighter-line-number">72
</span><span class=3D"react-syntax-highlighter-line-number">73
</span><span class=3D"react-syntax-highlighter-line-number">74
</span><span class=3D"react-syntax-highlighter-line-number">75
</span><span class=3D"react-syntax-highlighter-line-number">76
</span><span class=3D"react-syntax-highlighter-line-number">77
</span><span class=3D"react-syntax-highlighter-line-number">78
</span><span class=3D"react-syntax-highlighter-line-number">79
</span><span class=3D"react-syntax-highlighter-line-number">80
</span><span class=3D"react-syntax-highlighter-line-number">81
</span><span class=3D"react-syntax-highlighter-line-number">82
</span><span class=3D"react-syntax-highlighter-line-number">83
</span><span class=3D"react-syntax-highlighter-line-number">84
</span><span class=3D"react-syntax-highlighter-line-number">85
</span><span class=3D"react-syntax-highlighter-line-number">86
</span></code><span><span class=3D"hljs-keyword">from</span><span> sympy </=
span><span class=3D"hljs-keyword">import</span><span> symbols, Eq, Not, And=
, Or, Xor, Add, Mul
</span></span><span><span></span><span class=3D"hljs-keyword">from</span><s=
pan> itertools </span><span class=3D"hljs-keyword">import</span><span> prod=
uct
</span></span><span>
</span><span><span></span><span class=3D"hljs-class hljs-keyword">class</sp=
an><span class=3D"hljs-class"> </span><span class=3D"hljs-class hljs-title"=
>EquationParser</span><span class=3D"hljs-class">:</span><span>
</span></span><span><span>    </span><span class=3D"hljs-function hljs-keyw=
ord">def</span><span class=3D"hljs-function"> </span><span class=3D"hljs-fu=
nction hljs-title">__init__</span><span class=3D"hljs-function">(</span><sp=
an class=3D"hljs-function hljs-params">self, mso, equations, data</span><sp=
an class=3D"hljs-function">):</span><span>
</span></span><span>        self.mso =3D mso
</span><span>        self.equations =3D equations
</span><span>        self.data =3D data
</span><span>        self.parsed_equations =3D self._parse_equations()
</span><span>
</span><span><span>    </span><span class=3D"hljs-function hljs-keyword">de=
f</span><span class=3D"hljs-function"> </span><span class=3D"hljs-function =
hljs-title">_parse_equations</span><span class=3D"hljs-function">(</span><s=
pan class=3D"hljs-function hljs-params">self</span><span class=3D"hljs-func=
tion">):</span><span>
</span></span><span>        parsed =3D {}
</span><span><span>        </span><span class=3D"hljs-keyword">for</span><s=
pan> name, equation </span><span class=3D"hljs-keyword">in</span><span> sel=
f.equations.items():
</span></span><span><span>            left_side, right_side =3D </span><spa=
n class=3D"hljs-built_in">map</span><span>(</span><span class=3D"hljs-built=
_in">str</span><span>.strip, equation.split(</span><span class=3D"hljs-stri=
ng">'=3D'</span><span>))
</span></span><span><span>            symbols_dict =3D {var: symbols(var) <=
/span><span class=3D"hljs-keyword">for</span><span> var </span><span class=
=3D"hljs-keyword">in</span><span> left_side.split() + right_side.split() </=
span><span class=3D"hljs-keyword">if</span><span> var.isidentifier()}
</span></span><span>           =20
</span><span><span>            </span><span class=3D"hljs-comment"># Replac=
e observed data in the symbols_dict</span><span>
</span></span><span><span>            </span><span class=3D"hljs-keyword">f=
or</span><span> key </span><span class=3D"hljs-keyword">in</span><span> sel=
f.data:
</span></span><span><span>                </span><span class=3D"hljs-keywor=
d">if</span><span> key </span><span class=3D"hljs-keyword">in</span><span> =
symbols_dict:
</span></span><span>                    symbols_dict[key] =3D self.data[key=
]
</span><span>           =20
</span><span><span>            </span><span class=3D"hljs-comment"># Build =
the equation based on the operator present in left_side</span><span>
</span></span><span><span>            </span><span class=3D"hljs-keyword">i=
f</span><span> </span><span class=3D"hljs-string">'*'</span><span> </span><=
span class=3D"hljs-keyword">in</span><span> left_side:
</span></span><span><span>                left_expression =3D Mul(*[symbols=
_dict[var.strip()] </span><span class=3D"hljs-keyword">for</span><span> var=
 </span><span class=3D"hljs-keyword">in</span><span> left_side.split(</span=
><span class=3D"hljs-string">'*'</span><span>)])
</span></span><span><span>            </span><span class=3D"hljs-keyword">e=
lif</span><span> </span><span class=3D"hljs-string">'+'</span><span> </span=
><span class=3D"hljs-keyword">in</span><span> left_side:
</span></span><span><span>                left_expression =3D Add(*[symbols=
_dict[var.strip()] </span><span class=3D"hljs-keyword">for</span><span> var=
 </span><span class=3D"hljs-keyword">in</span><span> left_side.split(</span=
><span class=3D"hljs-string">'+'</span><span>)])
</span></span><span><span>            </span><span class=3D"hljs-keyword">e=
lif</span><span> </span><span class=3D"hljs-string">'&amp;'</span><span> </=
span><span class=3D"hljs-keyword">in</span><span> left_side:
</span></span><span><span>                left_expression =3D And(*[symbols=
_dict[var.strip()] </span><span class=3D"hljs-keyword">for</span><span> var=
 </span><span class=3D"hljs-keyword">in</span><span> left_side.split(</span=
><span class=3D"hljs-string">'&amp;'</span><span>)])
</span></span><span><span>            </span><span class=3D"hljs-keyword">e=
lif</span><span> </span><span class=3D"hljs-string">'|'</span><span> </span=
><span class=3D"hljs-keyword">in</span><span> left_side:
</span></span><span><span>                left_expression =3D Or(*[symbols_=
dict[var.strip()] </span><span class=3D"hljs-keyword">for</span><span> var =
</span><span class=3D"hljs-keyword">in</span><span> left_side.split(</span>=
<span class=3D"hljs-string">'|'</span><span>)])
</span></span><span><span>            </span><span class=3D"hljs-keyword">e=
lif</span><span> </span><span class=3D"hljs-string">'^'</span><span> </span=
><span class=3D"hljs-keyword">in</span><span> left_side:
</span></span><span><span>                left_expression =3D Xor(*[symbols=
_dict[var.strip()] </span><span class=3D"hljs-keyword">for</span><span> var=
 </span><span class=3D"hljs-keyword">in</span><span> left_side.split(</span=
><span class=3D"hljs-string">'^'</span><span>)])
</span></span><span><span>            </span><span class=3D"hljs-keyword">e=
lif</span><span> </span><span class=3D"hljs-string">'~&amp;'</span><span> <=
/span><span class=3D"hljs-keyword">in</span><span> left_side:
</span></span><span><span>                left_expression =3D Not(And(*[sym=
bols_dict[var.strip()] </span><span class=3D"hljs-keyword">for</span><span>=
 var </span><span class=3D"hljs-keyword">in</span><span> left_side.split(</=
span><span class=3D"hljs-string">'~&amp;'</span><span>)]))
</span></span><span><span>            </span><span class=3D"hljs-keyword">e=
lif</span><span> </span><span class=3D"hljs-string">'~|'</span><span> </spa=
n><span class=3D"hljs-keyword">in</span><span> left_side:
</span></span><span><span>                left_expression =3D Not(Or(*[symb=
ols_dict[var.strip()] </span><span class=3D"hljs-keyword">for</span><span> =
var </span><span class=3D"hljs-keyword">in</span><span> left_side.split(</s=
pan><span class=3D"hljs-string">'~|'</span><span>)]))
</span></span><span><span>            </span><span class=3D"hljs-keyword">e=
lif</span><span> </span><span class=3D"hljs-string">'~^'</span><span> </spa=
n><span class=3D"hljs-keyword">in</span><span> left_side:
</span></span><span><span>                left_expression =3D Not(Xor(*[sym=
bols_dict[var.strip()] </span><span class=3D"hljs-keyword">for</span><span>=
 var </span><span class=3D"hljs-keyword">in</span><span> left_side.split(</=
span><span class=3D"hljs-string">'~^'</span><span>)]))
</span></span><span><span>            </span><span class=3D"hljs-keyword">e=
lif</span><span> </span><span class=3D"hljs-string">'~'</span><span> </span=
><span class=3D"hljs-keyword">in</span><span> left_side:
</span></span><span><span>                left_expression =3D Not(symbols_d=
ict[left_side.replace(</span><span class=3D"hljs-string">'~'</span><span>, =
</span><span class=3D"hljs-string">''</span><span>).strip()])
</span></span><span><span>            </span><span class=3D"hljs-keyword">e=
lse</span><span>:
</span></span><span>                left_expression =3D symbols_dict[left_s=
ide.strip()]
</span><span>
</span><span>            right_expr =3D symbols_dict[right_side.strip()]
</span><span>            parsed[name] =3D Eq(left_expression, right_expr)
</span><span>
</span><span><span>        </span><span class=3D"hljs-keyword">return</span=
><span> parsed
</span></span><span>
</span><span><span>    </span><span class=3D"hljs-function hljs-keyword">de=
f</span><span class=3D"hljs-function"> </span><span class=3D"hljs-function =
hljs-title">_is_contradictory</span><span class=3D"hljs-function">(</span><=
span class=3D"hljs-function hljs-params">self, equations</span><span class=
=3D"hljs-function">):</span><span>
</span></span><span><span>        is_logical =3D </span><span class=3D"hljs=
-built_in">any</span><span>(char </span><span class=3D"hljs-keyword">in</sp=
an><span> </span><span class=3D"hljs-built_in">str</span><span>(eq.lhs) </s=
pan><span class=3D"hljs-keyword">or</span><span> char </span><span class=3D=
"hljs-keyword">in</span><span> </span><span class=3D"hljs-built_in">str</sp=
an><span>(eq.rhs) </span><span class=3D"hljs-keyword">for</span><span> eq <=
/span><span class=3D"hljs-keyword">in</span><span> equations </span><span c=
lass=3D"hljs-keyword">for</span><span> char </span><span class=3D"hljs-keyw=
ord">in</span><span> [</span><span class=3D"hljs-string">'~'</span><span>, =
</span><span class=3D"hljs-string">'&amp;'</span><span>, </span><span class=
=3D"hljs-string">'|'</span><span>, </span><span class=3D"hljs-string">'^'</=
span><span>])
</span></span><span><span>        </span><span class=3D"hljs-keyword">if</s=
pan><span> is_logical:
</span></span><span><span>            variables =3D {var </span><span class=
=3D"hljs-keyword">for</span><span> eq </span><span class=3D"hljs-keyword">i=
n</span><span> equations </span><span class=3D"hljs-keyword">for</span><spa=
n> var </span><span class=3D"hljs-keyword">in</span><span> eq.free_symbols}
</span></span><span><span>            </span><span class=3D"hljs-keyword">f=
or</span><span> combination </span><span class=3D"hljs-keyword">in</span><s=
pan> product([</span><span class=3D"hljs-literal">True</span><span>, </span=
><span class=3D"hljs-literal">False</span><span>], repeat=3D</span><span cl=
ass=3D"hljs-built_in">len</span><span>(variables)):
</span></span><span><span>                assignment =3D </span><span class=
=3D"hljs-built_in">dict</span><span>(</span><span class=3D"hljs-built_in">z=
ip</span><span>(variables, combination))
</span></span><span><span>                </span><span class=3D"hljs-keywor=
d">if</span><span> </span><span class=3D"hljs-built_in">all</span><span>(eq=
.subs(assignment) </span><span class=3D"hljs-keyword">for</span><span> eq <=
/span><span class=3D"hljs-keyword">in</span><span> equations):
</span></span><span><span>                    </span><span class=3D"hljs-ke=
yword">return</span><span> </span><span class=3D"hljs-literal">False</span>=
<span>
</span></span><span><span>            </span><span class=3D"hljs-keyword">r=
eturn</span><span> </span><span class=3D"hljs-literal">True</span><span>
</span></span><span><span>        </span><span class=3D"hljs-keyword">else<=
/span><span>:
</span></span><span><span>            </span><span class=3D"hljs-keyword">f=
rom</span><span> sympy </span><span class=3D"hljs-keyword">import</span><sp=
an> solve
</span></span><span><span>            solutions =3D solve([eq.lhs - eq.rhs =
</span><span class=3D"hljs-keyword">for</span><span> eq </span><span class=
=3D"hljs-keyword">in</span><span> equations], </span><span class=3D"hljs-bu=
ilt_in">dict</span><span>=3D</span><span class=3D"hljs-literal">True</span>=
<span>)
</span></span><span><span>            </span><span class=3D"hljs-keyword">r=
eturn</span><span> </span><span class=3D"hljs-built_in">len</span><span>(so=
lutions) =3D=3D </span><span class=3D"hljs-number">0</span><span>
</span></span><span>
</span><span><span>    </span><span class=3D"hljs-function hljs-keyword">de=
f</span><span class=3D"hljs-function"> </span><span class=3D"hljs-function =
hljs-title">get_minimal_conflicts</span><span class=3D"hljs-function">(</sp=
an><span class=3D"hljs-function hljs-params">self</span><span class=3D"hljs=
-function">):</span><span>
</span></span><span>        minimal_conflicts =3D []
</span><span><span>        </span><span class=3D"hljs-keyword">for</span><s=
pan> group </span><span class=3D"hljs-keyword">in</span><span> self.mso:
</span></span><span><span>            group_equations =3D [self.parsed_equa=
tions[name] </span><span class=3D"hljs-keyword">for</span><span> name </spa=
n><span class=3D"hljs-keyword">in</span><span> group </span><span class=3D"=
hljs-keyword">if</span><span> name </span><span class=3D"hljs-keyword">in</=
span><span> self.parsed_equations]
</span></span><span><span>            </span><span class=3D"hljs-keyword">i=
f</span><span> self._is_contradictory(group_equations):
</span></span><span><span>                minimal_conflicts.append(</span><=
span class=3D"hljs-built_in">sorted</span><span>(group))
</span></span><span>
</span><span><span>        </span><span class=3D"hljs-keyword">return</span=
><span> {</span><span class=3D"hljs-string">'minimal_conflicts'</span><span=
>: </span><span class=3D"hljs-built_in">sorted</span><span>(minimal_conflic=
ts, key=3D</span><span class=3D"hljs-keyword">lambda</span><span> x: (</spa=
n><span class=3D"hljs-built_in">len</span><span>(x), x))}
</span></span><span>
</span><span><span></span><span class=3D"hljs-comment"># Define the new inp=
ut data again</span><span>
</span></span><span>equations_new =3D {
</span><span><span>    </span><span class=3D"hljs-string">'M1'</span><span>=
: </span><span class=3D"hljs-string">'a * c =3D x01'</span><span>,=20
</span></span><span><span>    </span><span class=3D"hljs-string">'M2'</span=
><span>: </span><span class=3D"hljs-string">'b * d =3D x02'</span><span>,=
=20
</span></span><span><span>    </span><span class=3D"hljs-string">'M3'</span=
><span>: </span><span class=3D"hljs-string">'c * e =3D x03'</span><span>,=
=20
</span></span><span><span>    </span><span class=3D"hljs-string">'A1'</span=
><span>: </span><span class=3D"hljs-string">'x01 + x02 =3D f'</span><span>,=
=20
</span></span><span><span>    </span><span class=3D"hljs-string">'A2'</span=
><span>: </span><span class=3D"hljs-string">'x02 + x03 =3D g'</span><span>
</span></span><span>}
</span><span><span>mso_new =3D [[</span><span class=3D"hljs-string">'M1'</s=
pan><span>, </span><span class=3D"hljs-string">'M2'</span><span>, </span><s=
pan class=3D"hljs-string">'A1'</span><span>], [</span><span class=3D"hljs-s=
tring">'M2'</span><span>, </span><span class=3D"hljs-string">'M3'</span><sp=
an>, </span><span class=3D"hljs-string">'A2'</span><span>], [</span><span c=
lass=3D"hljs-string">'M1'</span><span>, </span><span class=3D"hljs-string">=
'M3'</span><span>, </span><span class=3D"hljs-string">'A1'</span><span>, </=
span><span class=3D"hljs-string">'A2'</span><span>]]
</span></span><span><span>data_new =3D {</span><span class=3D"hljs-string">=
'a'</span><span>: </span><span class=3D"hljs-number">2</span><span>, </span=
><span class=3D"hljs-string">'b'</span><span>: </span><span class=3D"hljs-n=
umber">2</span><span>, </span><span class=3D"hljs-string">'c'</span><span>:=
 </span><span class=3D"hljs-number">3</span><span>, </span><span class=3D"h=
ljs-string">'d'</span><span>: </span><span class=3D"hljs-number">3</span><s=
pan>, </span><span class=3D"hljs-string">'e'</span><span>: </span><span cla=
ss=3D"hljs-number">2</span><span>, </span><span class=3D"hljs-string">'f'</=
span><span>: </span><span class=3D"hljs-number">10</span><span>, </span><sp=
an class=3D"hljs-string">'g'</span><span>: </span><span class=3D"hljs-numbe=
r">12</span><span>}
</span></span><span>
</span><span><span></span><span class=3D"hljs-comment"># Create an instance=
 of the EquationParser and analyze minimal conflicts again</span><span>
</span></span><span>parser_new =3D EquationParser(mso_new, equations_new, d=
ata_new)
</span><span>output_new =3D parser_new.get_minimal_conflicts()
</span><span>output_new</span></code></pre></div></div></div></div></div></=
div></div><div class=3D"thread-item"><div class=3D"thread-item-header"><spa=
n><div class=3D"thread-item-header-author">part2_10</div></span></div><div =
class=3D"thread-content"><div class=3D"markdown-content"><p>The output now =
correctly indicates the minimal conflicting groups for the provided equatio=
ns:</p>
<ul>
<li><strong>Conflicting Groups</strong>:
<ol>
<li><code>['A1', 'M1', 'M2']</code></li>
<li><code>['A1', 'A2', 'M1', 'M3']</code></li>
</ol>
</li>
</ul>
<p>This analysis reveals that the specified groups cannot be satisfied simu=
ltaneously based on the equations and corresponding data provided. If you h=
ave any further questions or need additional assistance, feel free to ask!<=
/p></div></div><div class=3D"css-4ip17j e8jtqtk4"></div></div><div class=3D=
"thread-item"><div class=3D"thread-item-header"><span><div class=3D"thread-=
item-header-author">User</div></span></div><div class=3D"thread-content"><d=
iv class=3D"markdown-content"><p>mso =3D [['NA1', 'NO2', 'NX1']]
equations =3D {
'NA1': 'a ~&amp; b =3D x01',
'NO2': 'c ~| d =3D x02',
'NX1': 'x01 ~^ x02 =3D e'}
data =3D {'a': True, 'b': True, 'c': True, 'd': True, 'e': False}</p></div>=
</div><div class=3D"css-4ip17j e8jtqtk4"></div></div><div class=3D"thread-r=
un-item"><div class=3D"thread-run-header"><div class=3D"thread-item-left"><=
div class=3D"expanded-query"><div class=3D"tool-row"><div class=3D"monospac=
e-query">code_interpreter</div></div><div class=3D"pre-query"><div class=3D=
"code-sample"><div class=3D"code-sample-body code-sample-body-small"><butto=
n type=3D"button" tabindex=3D"0" class=3D"btn btn-sm btn-minimal btn-neutra=
l code-sample-copy-float" aria-label=3D"Copy"><span class=3D"btn-label-wrap=
"><span class=3D"btn-node start-node"><svg xmlns=3D"http://www.w3.org/2000/=
svg" width=3D"18px" height=3D"18px" fill=3D"currentColor" viewBox=3D"0 0 24=
 24"><path fill-rule=3D"evenodd" d=3D"M7 5a3 3 0 0 1 3-3h9a3 3 0 0 1 3 3v9a=
3 3 0 0 1-3 3h-2v2a3 3 0 0 1-3 3H5a3 3 0 0 1-3-3v-9a3 3 0 0 1 3-3h2V5Zm2 2h=
5a3 3 0 0 1 3 3v5h2a1 1 0 0 0 1-1V5a1 1 0 0 0-1-1h-9a1 1 0 0 0-1 1v2ZM5 9a1=
 1 0 0 0-1 1v9a1 1 0 0 0 1 1h9a1 1 0 0 0 1-1v-9a1 1 0 0 0-1-1H5Z" clip-rule=
=3D"evenodd"></path></svg></span></span></button><pre class=3D"hljs syntax-=
highlighter dark-mode code-sample-pre"><code class=3D"language-python" styl=
e=3D"white-space: pre;"><code style=3D"float: left; padding-right: 10px;"><=
span class=3D"react-syntax-highlighter-line-number">1
</span><span class=3D"react-syntax-highlighter-line-number">2
</span><span class=3D"react-syntax-highlighter-line-number">3
</span><span class=3D"react-syntax-highlighter-line-number">4
</span><span class=3D"react-syntax-highlighter-line-number">5
</span><span class=3D"react-syntax-highlighter-line-number">6
</span><span class=3D"react-syntax-highlighter-line-number">7
</span><span class=3D"react-syntax-highlighter-line-number">8
</span><span class=3D"react-syntax-highlighter-line-number">9
</span><span class=3D"react-syntax-highlighter-line-number">10
</span><span class=3D"react-syntax-highlighter-line-number">11
</span><span class=3D"react-syntax-highlighter-line-number">12
</span><span class=3D"react-syntax-highlighter-line-number">13
</span></code><span><span class=3D"hljs-comment"># Define the new input dat=
a for the logical operations</span><span>
</span></span><span>equations_logical =3D {
</span><span><span>    </span><span class=3D"hljs-string">'NA1'</span><span=
>: </span><span class=3D"hljs-string">'a ~&amp; b =3D x01'</span><span>,=20
</span></span><span><span>    </span><span class=3D"hljs-string">'NO2'</spa=
n><span>: </span><span class=3D"hljs-string">'c ~| d =3D x02'</span><span>,=
=20
</span></span><span><span>    </span><span class=3D"hljs-string">'NX1'</spa=
n><span>: </span><span class=3D"hljs-string">'x01 ~^ x02 =3D e'</span><span=
>
</span></span><span>}
</span><span><span>mso_logical =3D [[</span><span class=3D"hljs-string">'NA=
1'</span><span>, </span><span class=3D"hljs-string">'NO2'</span><span>, </s=
pan><span class=3D"hljs-string">'NX1'</span><span>]]
</span></span><span><span>data_logical =3D {</span><span class=3D"hljs-stri=
ng">'a'</span><span>: </span><span class=3D"hljs-literal">True</span><span>=
, </span><span class=3D"hljs-string">'b'</span><span>: </span><span class=
=3D"hljs-literal">True</span><span>, </span><span class=3D"hljs-string">'c'=
</span><span>: </span><span class=3D"hljs-literal">True</span><span>, </spa=
n><span class=3D"hljs-string">'d'</span><span>: </span><span class=3D"hljs-=
literal">True</span><span>, </span><span class=3D"hljs-string">'e'</span><s=
pan>: </span><span class=3D"hljs-literal">False</span><span>}
</span></span><span>
</span><span><span></span><span class=3D"hljs-comment"># Create an instance=
 of the EquationParser with the logical data and analyze minimal conflicts<=
/span><span>
</span></span><span>parser_logical =3D EquationParser(mso_logical, equation=
s_logical, data_logical)
</span><span>output_logical =3D parser_logical.get_minimal_conflicts()
</span><span>output_logical</span></code></pre></div></div></div></div></di=
v></div></div><div class=3D"thread-item"><div class=3D"thread-item-header">=
<span><div class=3D"thread-item-header-author">part2_10</div></span></div><=
div class=3D"thread-content"><div class=3D"markdown-content"><p>The KeyErro=
r indicates that the parser does not recognize the logical operator constru=
cts correctly in the equations provided, particularly the custom symbols su=
ch as <code>~&amp;</code> and <code>~|</code>. We need to appropriately han=
dle the parsing of these special operators instead of just relying on simpl=
e string splitting for standard arithmetic and logical symbols.</p>
<p>I'll modify the parser to properly identify and process the special oper=
ators used in logical expressions. Let's adjust the logic for the case wher=
e these operators occur and re-run the test.</p></div></div><div class=3D"c=
ss-4ip17j e8jtqtk4"></div></div><div class=3D"thread-run-item"><div class=
=3D"thread-run-header"><div class=3D"thread-item-left"><div class=3D"expand=
ed-query"><div class=3D"tool-row"><div class=3D"monospace-query">code_inter=
preter</div></div><div class=3D"pre-query"><div class=3D"code-sample"><div =
class=3D"code-sample-body code-sample-body-small"><button type=3D"button" t=
abindex=3D"0" class=3D"btn btn-sm btn-minimal btn-neutral code-sample-copy-=
float" aria-label=3D"Copy"><span class=3D"btn-label-wrap"><span class=3D"bt=
n-node start-node"><svg xmlns=3D"http://www.w3.org/2000/svg" width=3D"18px"=
 height=3D"18px" fill=3D"currentColor" viewBox=3D"0 0 24 24"><path fill-rul=
e=3D"evenodd" d=3D"M7 5a3 3 0 0 1 3-3h9a3 3 0 0 1 3 3v9a3 3 0 0 1-3 3h-2v2a=
3 3 0 0 1-3 3H5a3 3 0 0 1-3-3v-9a3 3 0 0 1 3-3h2V5Zm2 2h5a3 3 0 0 1 3 3v5h2=
a1 1 0 0 0 1-1V5a1 1 0 0 0-1-1h-9a1 1 0 0 0-1 1v2ZM5 9a1 1 0 0 0-1 1v9a1 1 =
0 0 0 1 1h9a1 1 0 0 0 1-1v-9a1 1 0 0 0-1-1H5Z" clip-rule=3D"evenodd"></path=
></svg></span></span></button><pre class=3D"hljs syntax-highlighter dark-mo=
de code-sample-pre"><code class=3D"language-python" style=3D"white-space: p=
re;"><code style=3D"float: left; padding-right: 10px;"><span class=3D"react=
-syntax-highlighter-line-number">1
</span><span class=3D"react-syntax-highlighter-line-number">2
</span><span class=3D"react-syntax-highlighter-line-number">3
</span><span class=3D"react-syntax-highlighter-line-number">4
</span><span class=3D"react-syntax-highlighter-line-number">5
</span><span class=3D"react-syntax-highlighter-line-number">6
</span><span class=3D"react-syntax-highlighter-line-number">7
</span><span class=3D"react-syntax-highlighter-line-number">8
</span><span class=3D"react-syntax-highlighter-line-number">9
</span><span class=3D"react-syntax-highlighter-line-number">10
</span><span class=3D"react-syntax-highlighter-line-number">11
</span><span class=3D"react-syntax-highlighter-line-number">12
</span><span class=3D"react-syntax-highlighter-line-number">13
</span><span class=3D"react-syntax-highlighter-line-number">14
</span><span class=3D"react-syntax-highlighter-line-number">15
</span><span class=3D"react-syntax-highlighter-line-number">16
</span><span class=3D"react-syntax-highlighter-line-number">17
</span><span class=3D"react-syntax-highlighter-line-number">18
</span><span class=3D"react-syntax-highlighter-line-number">19
</span><span class=3D"react-syntax-highlighter-line-number">20
</span><span class=3D"react-syntax-highlighter-line-number">21
</span><span class=3D"react-syntax-highlighter-line-number">22
</span><span class=3D"react-syntax-highlighter-line-number">23
</span><span class=3D"react-syntax-highlighter-line-number">24
</span><span class=3D"react-syntax-highlighter-line-number">25
</span><span class=3D"react-syntax-highlighter-line-number">26
</span><span class=3D"react-syntax-highlighter-line-number">27
</span><span class=3D"react-syntax-highlighter-line-number">28
</span><span class=3D"react-syntax-highlighter-line-number">29
</span><span class=3D"react-syntax-highlighter-line-number">30
</span><span class=3D"react-syntax-highlighter-line-number">31
</span><span class=3D"react-syntax-highlighter-line-number">32
</span><span class=3D"react-syntax-highlighter-line-number">33
</span><span class=3D"react-syntax-highlighter-line-number">34
</span><span class=3D"react-syntax-highlighter-line-number">35
</span><span class=3D"react-syntax-highlighter-line-number">36
</span><span class=3D"react-syntax-highlighter-line-number">37
</span><span class=3D"react-syntax-highlighter-line-number">38
</span><span class=3D"react-syntax-highlighter-line-number">39
</span><span class=3D"react-syntax-highlighter-line-number">40
</span><span class=3D"react-syntax-highlighter-line-number">41
</span><span class=3D"react-syntax-highlighter-line-number">42
</span><span class=3D"react-syntax-highlighter-line-number">43
</span><span class=3D"react-syntax-highlighter-line-number">44
</span><span class=3D"react-syntax-highlighter-line-number">45
</span><span class=3D"react-syntax-highlighter-line-number">46
</span><span class=3D"react-syntax-highlighter-line-number">47
</span><span class=3D"react-syntax-highlighter-line-number">48
</span><span class=3D"react-syntax-highlighter-line-number">49
</span><span class=3D"react-syntax-highlighter-line-number">50
</span><span class=3D"react-syntax-highlighter-line-number">51
</span><span class=3D"react-syntax-highlighter-line-number">52
</span><span class=3D"react-syntax-highlighter-line-number">53
</span><span class=3D"react-syntax-highlighter-line-number">54
</span><span class=3D"react-syntax-highlighter-line-number">55
</span><span class=3D"react-syntax-highlighter-line-number">56
</span><span class=3D"react-syntax-highlighter-line-number">57
</span><span class=3D"react-syntax-highlighter-line-number">58
</span><span class=3D"react-syntax-highlighter-line-number">59
</span><span class=3D"react-syntax-highlighter-line-number">60
</span><span class=3D"react-syntax-highlighter-line-number">61
</span><span class=3D"react-syntax-highlighter-line-number">62
</span><span class=3D"react-syntax-highlighter-line-number">63
</span><span class=3D"react-syntax-highlighter-line-number">64
</span><span class=3D"react-syntax-highlighter-line-number">65
</span><span class=3D"react-syntax-highlighter-line-number">66
</span><span class=3D"react-syntax-highlighter-line-number">67
</span><span class=3D"react-syntax-highlighter-line-number">68
</span><span class=3D"react-syntax-highlighter-line-number">69
</span><span class=3D"react-syntax-highlighter-line-number">70
</span><span class=3D"react-syntax-highlighter-line-number">71
</span><span class=3D"react-syntax-highlighter-line-number">72
</span><span class=3D"react-syntax-highlighter-line-number">73
</span><span class=3D"react-syntax-highlighter-line-number">74
</span><span class=3D"react-syntax-highlighter-line-number">75
</span></code><span><span class=3D"hljs-class hljs-keyword">class</span><sp=
an class=3D"hljs-class"> </span><span class=3D"hljs-class hljs-title">Equat=
ionParser</span><span class=3D"hljs-class">:</span><span>
</span></span><span><span>    </span><span class=3D"hljs-function hljs-keyw=
ord">def</span><span class=3D"hljs-function"> </span><span class=3D"hljs-fu=
nction hljs-title">__init__</span><span class=3D"hljs-function">(</span><sp=
an class=3D"hljs-function hljs-params">self, mso, equations, data</span><sp=
an class=3D"hljs-function">):</span><span>
</span></span><span>        self.mso =3D mso
</span><span>        self.equations =3D equations
</span><span>        self.data =3D data
</span><span>        self.parsed_equations =3D self._parse_equations()
</span><span>
</span><span><span>    </span><span class=3D"hljs-function hljs-keyword">de=
f</span><span class=3D"hljs-function"> </span><span class=3D"hljs-function =
hljs-title">_parse_equations</span><span class=3D"hljs-function">(</span><s=
pan class=3D"hljs-function hljs-params">self</span><span class=3D"hljs-func=
tion">):</span><span>
</span></span><span>        parsed =3D {}
</span><span><span>        </span><span class=3D"hljs-keyword">for</span><s=
pan> name, equation </span><span class=3D"hljs-keyword">in</span><span> sel=
f.equations.items():
</span></span><span><span>            left_side, right_side =3D </span><spa=
n class=3D"hljs-built_in">map</span><span>(</span><span class=3D"hljs-built=
_in">str</span><span>.strip, equation.split(</span><span class=3D"hljs-stri=
ng">'=3D'</span><span>))
</span></span><span><span>            symbols_dict =3D {var: symbols(var) <=
/span><span class=3D"hljs-keyword">for</span><span> var </span><span class=
=3D"hljs-keyword">in</span><span> left_side.split() + right_side.split() </=
span><span class=3D"hljs-keyword">if</span><span> var.isidentifier()}
</span></span><span>           =20
</span><span><span>            </span><span class=3D"hljs-comment"># Replac=
e observed data in the symbols_dict</span><span>
</span></span><span><span>            </span><span class=3D"hljs-keyword">f=
or</span><span> key </span><span class=3D"hljs-keyword">in</span><span> sel=
f.data:
</span></span><span><span>                </span><span class=3D"hljs-keywor=
d">if</span><span> key </span><span class=3D"hljs-keyword">in</span><span> =
symbols_dict:
</span></span><span>                    symbols_dict[key] =3D self.data[key=
]
</span><span>
</span><span><span>            </span><span class=3D"hljs-comment"># Build =
the equation based on the operator present in left_side</span><span>
</span></span><span><span>            </span><span class=3D"hljs-keyword">i=
f</span><span> </span><span class=3D"hljs-string">'*'</span><span> </span><=
span class=3D"hljs-keyword">in</span><span> left_side:
</span></span><span><span>                left_expression =3D Mul(*[symbols=
_dict[var.strip()] </span><span class=3D"hljs-keyword">for</span><span> var=
 </span><span class=3D"hljs-keyword">in</span><span> left_side.split(</span=
><span class=3D"hljs-string">'*'</span><span>)])
</span></span><span><span>            </span><span class=3D"hljs-keyword">e=
lif</span><span> </span><span class=3D"hljs-string">'+'</span><span> </span=
><span class=3D"hljs-keyword">in</span><span> left_side:
</span></span><span><span>                left_expression =3D Add(*[symbols=
_dict[var.strip()] </span><span class=3D"hljs-keyword">for</span><span> var=
 </span><span class=3D"hljs-keyword">in</span><span> left_side.split(</span=
><span class=3D"hljs-string">'+'</span><span>)])
</span></span><span><span>            </span><span class=3D"hljs-keyword">e=
lif</span><span> </span><span class=3D"hljs-string">'~&amp;'</span><span> <=
/span><span class=3D"hljs-keyword">in</span><span> left_side:
</span></span><span><span>                left_expression =3D Not(And(*[sym=
bols_dict[var.strip()] </span><span class=3D"hljs-keyword">for</span><span>=
 var </span><span class=3D"hljs-keyword">in</span><span> left_side.split(</=
span><span class=3D"hljs-string">'~&amp;'</span><span>)]))
</span></span><span><span>            </span><span class=3D"hljs-keyword">e=
lif</span><span> </span><span class=3D"hljs-string">'~|'</span><span> </spa=
n><span class=3D"hljs-keyword">in</span><span> left_side:
</span></span><span><span>                left_expression =3D Not(Or(*[symb=
ols_dict[var.strip()] </span><span class=3D"hljs-keyword">for</span><span> =
var </span><span class=3D"hljs-keyword">in</span><span> left_side.split(</s=
pan><span class=3D"hljs-string">'~|'</span><span>)]))
</span></span><span><span>            </span><span class=3D"hljs-keyword">e=
lif</span><span> </span><span class=3D"hljs-string">'~^'</span><span> </spa=
n><span class=3D"hljs-keyword">in</span><span> left_side:
</span></span><span><span>                left_expression =3D Not(Xor(*[sym=
bols_dict[var.strip()] </span><span class=3D"hljs-keyword">for</span><span>=
 var </span><span class=3D"hljs-keyword">in</span><span> left_side.split(</=
span><span class=3D"hljs-string">'~^'</span><span>)]))
</span></span><span><span>            </span><span class=3D"hljs-keyword">e=
lif</span><span> </span><span class=3D"hljs-string">'&amp;'</span><span> </=
span><span class=3D"hljs-keyword">in</span><span> left_side:
</span></span><span><span>                left_expression =3D And(*[symbols=
_dict[var.strip()] </span><span class=3D"hljs-keyword">for</span><span> var=
 </span><span class=3D"hljs-keyword">in</span><span> left_side.split(</span=
><span class=3D"hljs-string">'&amp;'</span><span>)])
</span></span><span><span>            </span><span class=3D"hljs-keyword">e=
lif</span><span> </span><span class=3D"hljs-string">'|'</span><span> </span=
><span class=3D"hljs-keyword">in</span><span> left_side:
</span></span><span><span>                left_expression =3D Or(*[symbols_=
dict[var.strip()] </span><span class=3D"hljs-keyword">for</span><span> var =
</span><span class=3D"hljs-keyword">in</span><span> left_side.split(</span>=
<span class=3D"hljs-string">'|'</span><span>)])
</span></span><span><span>            </span><span class=3D"hljs-keyword">e=
lif</span><span> </span><span class=3D"hljs-string">'^'</span><span> </span=
><span class=3D"hljs-keyword">in</span><span> left_side:
</span></span><span><span>                left_expression =3D Xor(*[symbols=
_dict[var.strip()] </span><span class=3D"hljs-keyword">for</span><span> var=
 </span><span class=3D"hljs-keyword">in</span><span> left_side.split(</span=
><span class=3D"hljs-string">'^'</span><span>)])
</span></span><span><span>            </span><span class=3D"hljs-keyword">e=
lse</span><span>:
</span></span><span>                left_expression =3D symbols_dict[left_s=
ide.strip()]
</span><span>
</span><span>            right_expr =3D symbols_dict[right_side.strip()]
</span><span>            parsed[name] =3D Eq(left_expression, right_expr)
</span><span>
</span><span><span>        </span><span class=3D"hljs-keyword">return</span=
><span> parsed
</span></span><span>
</span><span><span>    </span><span class=3D"hljs-function hljs-keyword">de=
f</span><span class=3D"hljs-function"> </span><span class=3D"hljs-function =
hljs-title">_is_contradictory</span><span class=3D"hljs-function">(</span><=
span class=3D"hljs-function hljs-params">self, equations</span><span class=
=3D"hljs-function">):</span><span>
</span></span><span><span>        is_logical =3D </span><span class=3D"hljs=
-built_in">any</span><span>(char </span><span class=3D"hljs-keyword">in</sp=
an><span> </span><span class=3D"hljs-built_in">str</span><span>(eq.lhs) </s=
pan><span class=3D"hljs-keyword">or</span><span> char </span><span class=3D=
"hljs-keyword">in</span><span> </span><span class=3D"hljs-built_in">str</sp=
an><span>(eq.rhs) </span><span class=3D"hljs-keyword">for</span><span> eq <=
/span><span class=3D"hljs-keyword">in</span><span> equations </span><span c=
lass=3D"hljs-keyword">for</span><span> char </span><span class=3D"hljs-keyw=
ord">in</span><span> [</span><span class=3D"hljs-string">'~'</span><span>, =
</span><span class=3D"hljs-string">'&amp;'</span><span>, </span><span class=
=3D"hljs-string">'|'</span><span>, </span><span class=3D"hljs-string">'^'</=
span><span>])
</span></span><span><span>        </span><span class=3D"hljs-keyword">if</s=
pan><span> is_logical:
</span></span><span><span>            variables =3D {var </span><span class=
=3D"hljs-keyword">for</span><span> eq </span><span class=3D"hljs-keyword">i=
n</span><span> equations </span><span class=3D"hljs-keyword">for</span><spa=
n> var </span><span class=3D"hljs-keyword">in</span><span> eq.free_symbols}
</span></span><span><span>            </span><span class=3D"hljs-keyword">f=
or</span><span> combination </span><span class=3D"hljs-keyword">in</span><s=
pan> product([</span><span class=3D"hljs-literal">True</span><span>, </span=
><span class=3D"hljs-literal">False</span><span>], repeat=3D</span><span cl=
ass=3D"hljs-built_in">len</span><span>(variables)):
</span></span><span><span>                assignment =3D </span><span class=
=3D"hljs-built_in">dict</span><span>(</span><span class=3D"hljs-built_in">z=
ip</span><span>(variables, combination))
</span></span><span><span>                </span><span class=3D"hljs-keywor=
d">if</span><span> </span><span class=3D"hljs-built_in">all</span><span>(eq=
.subs(assignment) </span><span class=3D"hljs-keyword">for</span><span> eq <=
/span><span class=3D"hljs-keyword">in</span><span> equations):
</span></span><span><span>                    </span><span class=3D"hljs-ke=
yword">return</span><span> </span><span class=3D"hljs-literal">False</span>=
<span>
</span></span><span><span>            </span><span class=3D"hljs-keyword">r=
eturn</span><span> </span><span class=3D"hljs-literal">True</span><span>
</span></span><span><span>        </span><span class=3D"hljs-keyword">else<=
/span><span>:
</span></span><span><span>            </span><span class=3D"hljs-keyword">f=
rom</span><span> sympy </span><span class=3D"hljs-keyword">import</span><sp=
an> solve
</span></span><span><span>            solutions =3D solve([eq.lhs - eq.rhs =
</span><span class=3D"hljs-keyword">for</span><span> eq </span><span class=
=3D"hljs-keyword">in</span><span> equations], </span><span class=3D"hljs-bu=
ilt_in">dict</span><span>=3D</span><span class=3D"hljs-literal">True</span>=
<span>)
</span></span><span><span>            </span><span class=3D"hljs-keyword">r=
eturn</span><span> </span><span class=3D"hljs-built_in">len</span><span>(so=
lutions) =3D=3D </span><span class=3D"hljs-number">0</span><span>
</span></span><span>
</span><span><span>    </span><span class=3D"hljs-function hljs-keyword">de=
f</span><span class=3D"hljs-function"> </span><span class=3D"hljs-function =
hljs-title">get_minimal_conflicts</span><span class=3D"hljs-function">(</sp=
an><span class=3D"hljs-function hljs-params">self</span><span class=3D"hljs=
-function">):</span><span>
</span></span><span>        minimal_conflicts =3D []
</span><span><span>        </span><span class=3D"hljs-keyword">for</span><s=
pan> group </span><span class=3D"hljs-keyword">in</span><span> self.mso:
</span></span><span><span>            group_equations =3D [self.parsed_equa=
tions[name] </span><span class=3D"hljs-keyword">for</span><span> name </spa=
n><span class=3D"hljs-keyword">in</span><span> group </span><span class=3D"=
hljs-keyword">if</span><span> name </span><span class=3D"hljs-keyword">in</=
span><span> self.parsed_equations]
</span></span><span><span>            </span><span class=3D"hljs-keyword">i=
f</span><span> self._is_contradictory(group_equations):
</span></span><span><span>                minimal_conflicts.append(</span><=
span class=3D"hljs-built_in">sorted</span><span>(group))
</span></span><span>
</span><span><span>        </span><span class=3D"hljs-keyword">return</span=
><span> {</span><span class=3D"hljs-string">'minimal_conflicts'</span><span=
>: </span><span class=3D"hljs-built_in">sorted</span><span>(minimal_conflic=
ts, key=3D</span><span class=3D"hljs-keyword">lambda</span><span> x: (</spa=
n><span class=3D"hljs-built_in">len</span><span>(x), x))}
</span></span><span>
</span><span><span></span><span class=3D"hljs-comment"># Define the logical=
 expressions input data again</span><span>
</span></span><span>equations_logical =3D {
</span><span><span>    </span><span class=3D"hljs-string">'NA1'</span><span=
>: </span><span class=3D"hljs-string">'a ~&amp; b =3D x01'</span><span>,=20
</span></span><span><span>    </span><span class=3D"hljs-string">'NO2'</spa=
n><span>: </span><span class=3D"hljs-string">'c ~| d =3D x02'</span><span>,=
=20
</span></span><span><span>    </span><span class=3D"hljs-string">'NX1'</spa=
n><span>: </span><span class=3D"hljs-string">'x01 ~^ x02 =3D e'</span><span=
>
</span></span><span>}
</span><span><span>mso_logical =3D [[</span><span class=3D"hljs-string">'NA=
1'</span><span>, </span><span class=3D"hljs-string">'NO2'</span><span>, </s=
pan><span class=3D"hljs-string">'NX1'</span><span>]]
</span></span><span><span>data_logical =3D {</span><span class=3D"hljs-stri=
ng">'a'</span><span>: </span><span class=3D"hljs-literal">True</span><span>=
, </span><span class=3D"hljs-string">'b'</span><span>: </span><span class=
=3D"hljs-literal">True</span><span>, </span><span class=3D"hljs-string">'c'=
</span><span>: </span><span class=3D"hljs-literal">True</span><span>, </spa=
n><span class=3D"hljs-string">'d'</span><span>: </span><span class=3D"hljs-=
literal">True</span><span>, </span><span class=3D"hljs-string">'e'</span><s=
pan>: </span><span class=3D"hljs-literal">False</span><span>}
</span></span><span>
</span><span><span></span><span class=3D"hljs-comment"># Create an instance=
 of the EquationParser with the logical data and analyze minimal conflicts =
again</span><span>
</span></span><span>parser_logical =3D EquationParser(mso_logical, equation=
s_logical, data_logical)
</span><span>output_logical =3D parser_logical.get_minimal_conflicts()
</span><span>output_logical</span></code></pre></div></div></div></div></di=
v></div></div><div class=3D"thread-item"><div class=3D"thread-item-header">=
<span><div class=3D"thread-item-header-author">part2_10</div></span></div><=
div class=3D"thread-content"><div class=3D"markdown-content"><p>The output =
indicates that the group <code>['NA1', 'NO2', 'NX1']</code> is identified a=
s a contradictory group based on the provided logical equations and data. T=
his means that the specified equations cannot be satisfied simultaneously w=
ith the given truth values.</p>
<p>If you have any further questions or if there's anything else you'd like=
 to explore, feel free to ask!</p></div></div><div class=3D"css-4ip17j e8jt=
qtk4"></div></div></div></div></div><div class=3D"add-message-wrapper"><div=
 class=3D"add-message-section user-input"><div class=3D"assistants-mm-input=
"><div class=3D"css-19bdfrz ebhcbt10"><div><div contenteditable=3D"true" tr=
anslate=3D"no" class=3D"tiptap ProseMirror" tabindex=3D"0"><p data-placehol=
der=3D"Enter your message..." class=3D"is-empty is-editor-empty"><br class=
=3D"ProseMirror-trailingBreak"></p></div></div></div></div><div class=3D"th=
read-input-button-group"><div class=3D"flex"><button type=3D"button" tabind=
ex=3D"0" class=3D"btn btn-sm btn-filled btn-neutral" aria-haspopup=3D"true"=
 aria-expanded=3D"false"><span class=3D"btn-label-wrap"><span class=3D"btn-=
label-inner"><svg xmlns=3D"http://www.w3.org/2000/svg" width=3D"1em" height=
=3D"1em" fill=3D"currentColor" viewBox=3D"0 0 24 24"><path fill-rule=3D"eve=
nodd" d=3D"M9 7a5 5 0 0 1 10 0v8a7 7 0 1 1-14 0V9a1 1 0 0 1 2 0v6a5 5 0 0 0=
 10 0V7a3 3 0 1 0-6 0v8a1 1 0 1 0 2 0V9a1 1 0 1 1 2 0v6a3 3 0 1 1-6 0V7Z" c=
lip-rule=3D"evenodd"></path></svg></span></span></button><button type=3D"bu=
tton" tabindex=3D"0" class=3D"btn btn-sm btn-filled btn-neutral role-button=
" aria-haspopup=3D"true" aria-expanded=3D"false"><span class=3D"btn-label-w=
rap"><span class=3D"btn-label-inner"><svg xmlns=3D"http://www.w3.org/2000/s=
vg" width=3D"1em" height=3D"1em" fill=3D"currentColor" viewBox=3D"0 0 24 24=
"><path d=3D"M12.588 11.646a1.5 1.5 0 1 1-2.97.418 1.5 1.5 0 0 1 2.97-.418Z=
"></path><path fill-rule=3D"evenodd" d=3D"M11.297 1.03c-1.732-.232-3.403.91=
8-3.66 2.674L7.04 7.759l-3.33.468a3.148 3.148 0 0 0-2.68 3.555l1.197 8.508a=
3.148 3.148 0 0 0 3.555 2.68l8.508-1.197a3.148 3.148 0 0 0 2.68-3.555l-.2-1=
.42 1.285.172c1.732.233 3.403-.918 3.661-2.674l1.251-8.508c.26-1.766-1.03-3=
.329-2.769-3.562L11.297 1.03Zm5.183 13.71 1.842.248c.727.097 1.328-.389 1.4=
15-.983l1.252-8.508c.085-.582-.338-1.192-1.057-1.289l-8.901-1.196c-.727-.09=
7-1.329.389-1.416.983l-.51 3.474 3.113-.438a3.148 3.148 0 0 1 3.555 2.68l.7=
07 5.03Zm-2.687-4.752a1.148 1.148 0 0 0-1.297-.977l-8.508 1.196a1.148 1.148=
 0 0 0-.977 1.297l.619 4.4 1.068-1.063a3.148 3.148 0 0 1 4.115-.283l6.08 4.=
582c.09-.195.128-.416.096-.644l-1.196-8.508Zm-1.109 9.991L7.61 16.155a1.148=
 1.148 0 0 0-1.5.103L3.978 18.38l.23 1.632a1.148 1.148 0 0 0 1.296.977l7.18=
-1.01Z" clip-rule=3D"evenodd"></path></svg></span></span></button></div><di=
v class=3D"flex"><button type=3D"button" tabindex=3D"0" class=3D"btn btn-di=
sabled btn-disabled-style btn-sm btn-filled btn-neutral" disabled=3D""><spa=
n class=3D"btn-label-wrap"><span class=3D"btn-label-inner"><svg xmlns=3D"ht=
tp://www.w3.org/2000/svg" width=3D"1em" height=3D"1em" fill=3D"currentColor=
" viewBox=3D"0 0 24 24"><path fill-rule=3D"evenodd" d=3D"M12 5a1 1 0 0 1 1 =
1v5h5a1 1 0 1 1 0 2h-5v5a1 1 0 1 1-2 0v-5H6a1 1 0 1 1 0-2h5V6a1 1 0 0 1 1-1=
Z" clip-rule=3D"evenodd"></path></svg></span></span></button><div class=3D"=
run-button-wrapper"><div class=3D"btn btn-filled btn-primary btn-action-wra=
pper" aria-haspopup=3D"true" aria-expanded=3D"false"><button type=3D"button=
" tabindex=3D"0" class=3D"btn btn-sm btn-filled btn-primary btn-action-prim=
ary"><span class=3D"btn-label-wrap"><span class=3D"btn-label-inner">Run<spa=
n class=3D"keyboard-shortcut minimal"><div class=3D"keyboard-shortcut-key">=
Ctrl</div><div class=3D"keyboard-shortcut-key">=E2=86=B5</div></span>=E2=80=
=8D</span></span></button><button tabindex=3D"0" class=3D"btn btn-sm btn-fi=
lled btn-primary btn-action-secondary"><svg xmlns=3D"http://www.w3.org/2000=
/svg" width=3D"1em" height=3D"1em" fill=3D"currentColor" viewBox=3D"0 0 24 =
24"><path d=3D"m12 16 5-6H7l5 6Z"></path><path fill-rule=3D"evenodd" d=3D"M=
6.094 9.576A1 1 0 0 1 7 9h10a1 1 0 0 1 .768 1.64l-5 6a1 1 0 0 1-1.536 0l-5-=
6a1 1 0 0 1-.138-1.064ZM9.135 11 12 14.438 14.865 11h-5.73Z" clip-rule=3D"e=
venodd"></path></svg></button></div></div></div></div></div><div class=3D"t=
hread-help-text">Playground messages can be viewed by anyone at your organi=
zation using the API.</div></div></div></div><div class=3D"assistants-panel=
-handle" role=3D"separator" tabindex=3D"0" data-panel-group-direction=3D"ho=
rizontal" data-panel-group-id=3D":r6:" data-resize-handle=3D"" data-panel-r=
esize-handle-enabled=3D"true" data-panel-resize-handle-id=3D":ra:" style=3D=
"cursor: ew-resize; touch-action: none; user-select: none; width: 0px; over=
flow: hidden; display: none;" aria-controls=3D":r9:" aria-valuemax=3D"65" a=
ria-valuemin=3D"30" aria-valuenow=3D"66"><div class=3D"assistants-panel-div=
ider"></div><div class=3D"drag"></div></div><div class=3D"" data-panel=3D""=
 data-panel-id=3D":rb:" style=3D"flex: 0 1 0px; overflow: hidden;"><div cla=
ss=3D"assistant-log-panel"><div class=3D"assistants-pg-header sticky collap=
sed"><div class=3D"header-right"><button type=3D"button" tabindex=3D"0" cla=
ss=3D"btn btn-sm btn-minimal btn-neutral logs-collapser"><span class=3D"btn=
-label-wrap"><span class=3D"btn-label-inner">Hide logs</span><span class=3D=
"btn-node"><svg xmlns=3D"http://www.w3.org/2000/svg" width=3D"18px" height=
=3D"18px" fill=3D"currentColor" viewBox=3D"0 0 24 24"><path fill-rule=3D"ev=
enodd" d=3D"M18 5a1 1 0 0 1 1 1v12a1 1 0 0 1-1 1h-2V5h2Zm-4 0v14H6a1 1 0 0 =
1-1-1V6a1 1 0 0 1 1-1h8Zm7 1a3 3 0 0 0-3-3H6a3 3 0 0 0-3 3v12a3 3 0 0 0 3 3=
h12a3 3 0 0 0 3-3V6Z" clip-rule=3D"evenodd"></path></svg></span></span></bu=
tton></div></div><div class=3D"assistant-logs"><div class=3D"log-item"><div=
 class=3D"log-item-header"><span class=3D"log-item-toggle"><svg xmlns=3D"ht=
tp://www.w3.org/2000/svg" width=3D"16px" height=3D"16px" fill=3D"currentCol=
or" viewBox=3D"0 0 24 24"><path fill-rule=3D"evenodd" d=3D"M8.293 4.293a1 1=
 0 0 1 1.414 0l7 7a1 1 0 0 1 0 1.414l-7 7a1 1 0 0 1-1.414-1.414L14.586 12 8=
.293 5.707a1 1 0 0 1 0-1.414Z" clip-rule=3D"evenodd"></path></svg></span><d=
iv><div class=3D"log-item-description"><span>Create a thread</span></div><s=
pan class=3D"request-type post">POST</span><span class=3D"log-item-endpoint=
">/v1/threads</span></div></div></div><div class=3D"log-item"><div class=3D=
"log-item-header"><span class=3D"log-item-toggle"><svg xmlns=3D"http://www.=
w3.org/2000/svg" width=3D"16px" height=3D"16px" fill=3D"currentColor" viewB=
ox=3D"0 0 24 24"><path fill-rule=3D"evenodd" d=3D"M8.293 4.293a1 1 0 0 1 1.=
414 0l7 7a1 1 0 0 1 0 1.414l-7 7a1 1 0 0 1-1.414-1.414L14.586 12 8.293 5.70=
7a1 1 0 0 1 0-1.414Z" clip-rule=3D"evenodd"></path></svg></span><div><div c=
lass=3D"log-item-description"><span>Add a message</span></div><span class=
=3D"request-type post">POST</span><span class=3D"log-item-endpoint">/v1/thr=
eads/thread_w2V0P3dCwHIEDQdADnMa4Z2p/messages</span></div></div></div><div =
class=3D"log-item"><div class=3D"log-item-header"><span class=3D"log-item-t=
oggle"><svg xmlns=3D"http://www.w3.org/2000/svg" width=3D"16px" height=3D"1=
6px" fill=3D"currentColor" viewBox=3D"0 0 24 24"><path fill-rule=3D"evenodd=
" d=3D"M8.293 4.293a1 1 0 0 1 1.414 0l7 7a1 1 0 0 1 0 1.414l-7 7a1 1 0 0 1-=
1.414-1.414L14.586 12 8.293 5.707a1 1 0 0 1 0-1.414Z" clip-rule=3D"evenodd"=
></path></svg></span><div><div class=3D"log-item-description"><span>Run the=
 thread</span><span class=3D"log-item-response-count"><span class=3D"pill p=
ill-neutral pill-small">5051 events</span></span></div><span class=3D"reque=
st-type post">POST</span><span class=3D"log-item-endpoint">/v1/threads/thre=
ad_w2V0P3dCwHIEDQdADnMa4Z2p/runs</span></div></div></div><div class=3D"log-=
item"><div class=3D"log-context"><div><span>Run</span><span class=3D"log-co=
ntext-status">completed</span></div><div class=3D"run-tokens-container" ari=
a-haspopup=3D"true" aria-expanded=3D"false"><span class=3D"tokens-count">50=
066</span><span class=3D"tokens-label">tokens</span><svg xmlns=3D"http://ww=
w.w3.org/2000/svg" width=3D"1em" height=3D"1em" fill=3D"currentColor" viewB=
ox=3D"0 0 24 24"><path d=3D"M13 12a1 1 0 1 0-2 0v4a1 1 0 1 0 2 0v-4Zm-1-2.5=
A1.25 1.25 0 1 0 12 7a1.25 1.25 0 0 0 0 2.5Z"></path><path fill-rule=3D"eve=
nodd" d=3D"M12 2C6.477 2 2 6.477 2 12s4.477 10 10 10 10-4.477 10-10S17.523 =
2 12 2ZM4 12a8 8 0 1 1 16 0 8 8 0 0 1-16 0Z" clip-rule=3D"evenodd"></path><=
/svg></div></div></div><div class=3D"log-item"><div class=3D"log-item-heade=
r"><span class=3D"log-item-toggle"><svg xmlns=3D"http://www.w3.org/2000/svg=
" width=3D"16px" height=3D"16px" fill=3D"currentColor" viewBox=3D"0 0 24 24=
"><path fill-rule=3D"evenodd" d=3D"M8.293 4.293a1 1 0 0 1 1.414 0l7 7a1 1 0=
 0 1 0 1.414l-7 7a1 1 0 0 1-1.414-1.414L14.586 12 8.293 5.707a1 1 0 0 1 0-1=
.414Z" clip-rule=3D"evenodd"></path></svg></span><div><div class=3D"log-ite=
m-description"><span>Add a message</span></div><span class=3D"request-type =
post">POST</span><span class=3D"log-item-endpoint">/v1/threads/thread_w2V0P=
3dCwHIEDQdADnMa4Z2p/messages</span></div></div></div><div class=3D"log-item=
"><div class=3D"log-item-header"><span class=3D"log-item-toggle"><svg xmlns=
=3D"http://www.w3.org/2000/svg" width=3D"16px" height=3D"16px" fill=3D"curr=
entColor" viewBox=3D"0 0 24 24"><path fill-rule=3D"evenodd" d=3D"M8.293 4.2=
93a1 1 0 0 1 1.414 0l7 7a1 1 0 0 1 0 1.414l-7 7a1 1 0 0 1-1.414-1.414L14.58=
6 12 8.293 5.707a1 1 0 0 1 0-1.414Z" clip-rule=3D"evenodd"></path></svg></s=
pan><div><div class=3D"log-item-description"><span>Run the thread</span><sp=
an class=3D"log-item-response-count"><span class=3D"pill pill-neutral pill-=
small">1417 events</span></span></div><span class=3D"request-type post">POS=
T</span><span class=3D"log-item-endpoint">/v1/threads/thread_w2V0P3dCwHIEDQ=
dADnMa4Z2p/runs</span></div></div></div><div class=3D"log-item"><div class=
=3D"log-context"><div><span>Run</span><span class=3D"log-context-status">co=
mpleted</span></div><div class=3D"run-tokens-container" aria-haspopup=3D"tr=
ue" aria-expanded=3D"false"><span class=3D"tokens-count">40174</span><span =
class=3D"tokens-label">tokens</span><svg xmlns=3D"http://www.w3.org/2000/sv=
g" width=3D"1em" height=3D"1em" fill=3D"currentColor" viewBox=3D"0 0 24 24"=
><path d=3D"M13 12a1 1 0 1 0-2 0v4a1 1 0 1 0 2 0v-4Zm-1-2.5A1.25 1.25 0 1 0=
 12 7a1.25 1.25 0 0 0 0 2.5Z"></path><path fill-rule=3D"evenodd" d=3D"M12 2=
C6.477 2 2 6.477 2 12s4.477 10 10 10 10-4.477 10-10S17.523 2 12 2ZM4 12a8 8=
 0 1 1 16 0 8 8 0 0 1-16 0Z" clip-rule=3D"evenodd"></path></svg></div></div=
></div><div class=3D"log-item"><div class=3D"log-item-header"><span class=
=3D"log-item-toggle"><svg xmlns=3D"http://www.w3.org/2000/svg" width=3D"16p=
x" height=3D"16px" fill=3D"currentColor" viewBox=3D"0 0 24 24"><path fill-r=
ule=3D"evenodd" d=3D"M8.293 4.293a1 1 0 0 1 1.414 0l7 7a1 1 0 0 1 0 1.414l-=
7 7a1 1 0 0 1-1.414-1.414L14.586 12 8.293 5.707a1 1 0 0 1 0-1.414Z" clip-ru=
le=3D"evenodd"></path></svg></span><div><div class=3D"log-item-description"=
><span>Add a message</span></div><span class=3D"request-type post">POST</sp=
an><span class=3D"log-item-endpoint">/v1/threads/thread_w2V0P3dCwHIEDQdADnM=
a4Z2p/messages</span></div></div></div><div class=3D"log-item"><div class=
=3D"log-item-header"><span class=3D"log-item-toggle"><svg xmlns=3D"http://w=
ww.w3.org/2000/svg" width=3D"16px" height=3D"16px" fill=3D"currentColor" vi=
ewBox=3D"0 0 24 24"><path fill-rule=3D"evenodd" d=3D"M8.293 4.293a1 1 0 0 1=
 1.414 0l7 7a1 1 0 0 1 0 1.414l-7 7a1 1 0 0 1-1.414-1.414L14.586 12 8.293 5=
.707a1 1 0 0 1 0-1.414Z" clip-rule=3D"evenodd"></path></svg></span><div><di=
v class=3D"log-item-description"><span>Run the thread</span><span class=3D"=
log-item-response-count"><span class=3D"pill pill-neutral pill-small">1166 =
events</span></span></div><span class=3D"request-type post">POST</span><spa=
n class=3D"log-item-endpoint">/v1/threads/thread_w2V0P3dCwHIEDQdADnMa4Z2p/r=
uns</span></div></div></div><div class=3D"log-item"><div class=3D"log-conte=
xt"><div><span>Run</span><span class=3D"log-context-status">completed</span=
></div><div class=3D"run-tokens-container" aria-haspopup=3D"true" aria-expa=
nded=3D"false"><span class=3D"tokens-count">47291</span><span class=3D"toke=
ns-label">tokens</span><svg xmlns=3D"http://www.w3.org/2000/svg" width=3D"1=
em" height=3D"1em" fill=3D"currentColor" viewBox=3D"0 0 24 24"><path d=3D"M=
13 12a1 1 0 1 0-2 0v4a1 1 0 1 0 2 0v-4Zm-1-2.5A1.25 1.25 0 1 0 12 7a1.25 1.=
25 0 0 0 0 2.5Z"></path><path fill-rule=3D"evenodd" d=3D"M12 2C6.477 2 2 6.=
477 2 12s4.477 10 10 10 10-4.477 10-10S17.523 2 12 2ZM4 12a8 8 0 1 1 16 0 8=
 8 0 0 1-16 0Z" clip-rule=3D"evenodd"></path></svg></div></div></div><div c=
lass=3D"log-item"><div class=3D"log-item-header"><span class=3D"log-item-to=
ggle"><svg xmlns=3D"http://www.w3.org/2000/svg" width=3D"16px" height=3D"16=
px" fill=3D"currentColor" viewBox=3D"0 0 24 24"><path fill-rule=3D"evenodd"=
 d=3D"M8.293 4.293a1 1 0 0 1 1.414 0l7 7a1 1 0 0 1 0 1.414l-7 7a1 1 0 0 1-1=
.414-1.414L14.586 12 8.293 5.707a1 1 0 0 1 0-1.414Z" clip-rule=3D"evenodd">=
</path></svg></span><div><div class=3D"log-item-description"><span>Add a me=
ssage</span></div><span class=3D"request-type post">POST</span><span class=
=3D"log-item-endpoint">/v1/threads/thread_w2V0P3dCwHIEDQdADnMa4Z2p/messages=
</span></div></div></div><div class=3D"log-item"><div class=3D"log-item-hea=
der"><span class=3D"log-item-toggle"><svg xmlns=3D"http://www.w3.org/2000/s=
vg" width=3D"16px" height=3D"16px" fill=3D"currentColor" viewBox=3D"0 0 24 =
24"><path fill-rule=3D"evenodd" d=3D"M8.293 4.293a1 1 0 0 1 1.414 0l7 7a1 1=
 0 0 1 0 1.414l-7 7a1 1 0 0 1-1.414-1.414L14.586 12 8.293 5.707a1 1 0 0 1 0=
-1.414Z" clip-rule=3D"evenodd"></path></svg></span><div><div class=3D"log-i=
tem-description"><span>Run the thread</span><span class=3D"log-item-respons=
e-count"><span class=3D"pill pill-neutral pill-small">4608 events</span></s=
pan></div><span class=3D"request-type post">POST</span><span class=3D"log-i=
tem-endpoint">/v1/threads/thread_w2V0P3dCwHIEDQdADnMa4Z2p/runs</span></div>=
</div></div><div class=3D"log-item"><div class=3D"log-context"><div><span>R=
un</span><span class=3D"log-context-status">failed</span></div><div class=
=3D"run-tokens-container" aria-haspopup=3D"true" aria-expanded=3D"false"><s=
pan class=3D"tokens-count">132042</span><span class=3D"tokens-label">tokens=
</span><svg xmlns=3D"http://www.w3.org/2000/svg" width=3D"1em" height=3D"1e=
m" fill=3D"currentColor" viewBox=3D"0 0 24 24"><path d=3D"M13 12a1 1 0 1 0-=
2 0v4a1 1 0 1 0 2 0v-4Zm-1-2.5A1.25 1.25 0 1 0 12 7a1.25 1.25 0 0 0 0 2.5Z"=
></path><path fill-rule=3D"evenodd" d=3D"M12 2C6.477 2 2 6.477 2 12s4.477 1=
0 10 10 10-4.477 10-10S17.523 2 12 2ZM4 12a8 8 0 1 1 16 0 8 8 0 0 1-16 0Z" =
clip-rule=3D"evenodd"></path></svg></div></div></div></div></div></div></di=
v></div></div></div></div></div></div></div></div></div></div></div></div><=
/main><div data-testid=3D"compliance-management-wrapper"><span data-testid=
=3D"cookie-consent-modal-header"></span></div><div class=3D"layers-root"></=
div></div>
     =20
     =20
     =20
   =20

<div class=3D"CRjGu"></div><iframe id=3D"intercom-frame" style=3D"position:=
 absolute !important; opacity: 0 !important; width: 1px !important; height:=
 1px !important; top: 0 !important; left: 0 !important; border: none !impor=
tant; display: block !important; z-index: -1 !important; pointer-events: no=
ne;" aria-hidden=3D"true" tabindex=3D"-1" title=3D"Intercom"></iframe><div =
class=3D"intercom-lightweight-app"></div></body><app-ls-content ng-version=
=3D"17.3.7"><template shadowmode=3D"open"><!----><app-similar-tools _nghost=
-ng-c2697620354=3D""><!----><!----><!----></app-similar-tools><!----><!----=
></template></app-ls-content></html>
------MultipartBoundary--PgNM4SiMWaLkxzj6oY7Q8DPIEjAagNM0CL6X4tuFha----
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: cid:css-da7b1e51-06f2-4544-9e81-171550453d07@mhtml.blink

@charset "utf-8";

[_nghost-ng-c2697620354] { font-family: "Open Sans", sans-serif; color: rgb=
(18, 18, 18); }
------MultipartBoundary--PgNM4SiMWaLkxzj6oY7Q8DPIEjAagNM0CL6X4tuFha----
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: cid:css-0a83b9c0-0096-479d-922f-266f0305ecf1@mhtml.blink

@charset "utf-8";

.css-19bdfrz { width: 100%; max-height: none; }

.css-19bdfrz .tiptap:focus-visible { outline: none !important; }

.css-19bdfrz .tiptap:focus-visible img.ProseMirror-selectednode { border: 4=
px solid var(--input-border-focus); border-radius: 8px; }

.css-19bdfrz .tiptap img { border: 4px solid transparent; max-height: 100px=
; max-width: 100%; border-radius: 8px; }

.css-19bdfrz .tiptap img:not([src]) { height: 100px; width: 100px; border-r=
adius: 8px; background-color: transparent; background-image: linear-gradien=
t(
                90deg,var(--gray-50) 25%,var(--gray-100) 50%,var(--gray-50)=
 75%
            ); background-size: 400% 100%; background-repeat: no-repeat; an=
imation: 1s ease 0s infinite alternate none running skeleton; }

.css-19bdfrz .tiptap .is-editor-empty:first-child::before { color: var(--te=
xt-disabled); content: attr(data-placeholder); float: left; height: 0px; po=
inter-events: none; }

.css-19bdfrz .tiptap > * { margin: 0px; }

.css-1250m6d { height: 60px; width: 100%; position: absolute; z-index: 1; }

.css-10iewir { border-radius: 8px; display: flex; -webkit-box-align: center=
; align-items: center; -webkit-box-pack: center; justify-content: center; p=
adding: 0px; }

.css-1e54c44-container { position: relative; box-sizing: border-box; height=
: 100%; width: 100%; }

.css-7pg0cj-a11yText { z-index: 9999; border: 0px; clip: rect(1px, 1px, 1px=
, 1px); height: 1px; width: 1px; position: absolute; overflow: hidden; padd=
ing: 0px; white-space: nowrap; }

.css-1ymebvp-control { -webkit-box-align: center; align-items: center; curs=
or: default; display: flex; flex-wrap: wrap; -webkit-box-pack: justify; jus=
tify-content: space-between; min-height: 36px; outline: none; position: rel=
ative; transition: 200ms ease-in-out; background-color: transparent; border=
-radius: 8px; box-shadow: none; box-sizing: border-box; height: 100%; color=
: var(--text-default); font-size: 16px; line-height: 20px; text-overflow: e=
llipsis; font-weight: 700; padding: 0px 4px; border: none; }

.css-1ymebvp-control:hover { border-color: var(--gray-300); }

.css-1ymebvp-control:active { border: none; box-shadow: none; outline: none=
; background-color: transparent; }

.css-1k1yrrs { -webkit-box-align: center; align-items: center; display: gri=
d; flex: 1 1 0%; flex-wrap: wrap; position: relative; overflow: hidden; pad=
ding: 2px 8px 2px 0px; box-sizing: border-box; height: 34px; min-height: 34=
px; font-size: 16px; line-height: 18px; }

.css-1k1yrrs .select-check { display: none; }

.css-2mna9q-singleValue { grid-area: 1 / 1 / 2 / 3; max-width: 100%; overfl=
ow: hidden; text-overflow: ellipsis; white-space: nowrap; color: var(--gray=
-800); margin-left: 2px; margin-right: 2px; box-sizing: border-box; }

.css-1szb2xj { display: flex; gap: 5px; -webkit-box-align: center; align-it=
ems: center; }

.css-17wv8nz { visibility: visible; flex: 1 1 auto; display: inline-grid; g=
rid-area: 1 / 1 / 2 / 3; grid-template-columns: 0px min-content; margin: 2p=
x; padding-bottom: 2px; padding-top: 2px; color: var(--gray-800); box-sizin=
g: border-box; }

.css-17wv8nz::after { content: attr(data-value) " "; visibility: hidden; wh=
ite-space: pre; grid-area: 1 / 2; font: inherit; min-width: 2px; border: 0p=
x; margin: 0px; outline: 0px; padding: 0px; }

.css-1xgy2si { -webkit-box-align: center; align-items: center; align-self: =
stretch; display: flex; flex-shrink: 0; box-sizing: border-box; height: 100=
%; }

.css-ir5cwv-indicatorContainer { display: flex; transition: color 150ms; co=
lor: var(--text-default); padding: 7px; box-sizing: border-box; }

.css-ir5cwv-indicatorContainer:hover { color: var(--gray-400); }

.css-ir5cwv-indicatorContainer:not(:first-of-type) { padding-left: 0px; }

.css-ir5cwv-indicatorContainer svg { width: 20px; height: 20px; }

.css-a7n8v4 { overflow-y: auto; flex: 1 1 0%; margin-top: 60px; padding: 8p=
x 24px; position: relative; }

.css-uewl2b { margin-bottom: 20px; }

.css-y4dpym { overflow: hidden; color: var(--gray-500); text-overflow: elli=
psis; font-family: var(--monospace); font-size: 12px; font-style: normal; f=
ont-weight: 400; line-height: 16px; margin-top: 4px; margin-left: 12px; }

.css-79elbk { position: relative; }

.css-5d6l6w { resize: none; }

.css-7425ew { position: absolute; right: 0px; bottom: 0px; margin: 8px; pad=
ding: 2px; color: var(--gray-500) !important; }

.css-zk4pm3 { font-size: 12px; font-weight: 500; color: var(--text-secondar=
y); line-height: 24px; letter-spacing: 0.24px; text-transform: uppercase; p=
adding: 0px 0px 8px; border-bottom: 1px solid var(--gray-100); }

.css-i95kyk { padding: 8px 0px; display: flex; flex-direction: column; }

.css-i95kyk:not(:last-of-type) { border-bottom: 1px solid var(--gray-100); =
}

.css-1olxsos { display: flex; -webkit-box-pack: justify; justify-content: s=
pace-between; -webkit-box-align: center; align-items: center; width: 100%; =
}

.css-1olxsos:hover .e1gwek9z6 { opacity: 1; }

.css-1olxsos .e1gwek9z6 { opacity: 0; }

.css-axw7ok { display: flex; -webkit-box-align: center; align-items: center=
; gap: 8px; }

.css-j5v2yw { font-size: 14px; font-weight: 500; line-height: 20px; display=
: flex; gap: 4px; -webkit-box-align: center; align-items: center; cursor: d=
efault; padding: 5px 0px; }

.css-j5v2yw .label { margin-left: 2px; }

.css-1falsb5 { display: flex; -webkit-box-align: center; align-items: cente=
r; padding-top: 1px; }

.css-r2hvuq { display: flex; gap: 2px; -webkit-box-align: center; align-ite=
ms: center; }

.css-1i31g7f { padding: 4px 6px; font-weight: 500; box-shadow: none !import=
ant; }

.css-1i31g7f:hover, .css-1i31g7f:focus-visible, .css-1i31g7f:active, .css-1=
i31g7f:hover { color: var(--text-primary); }

.css-11eld9l { padding: 8px 0px; display: flex; flex-direction: column; bor=
der-bottom: none; }

.css-24u3a0 { font-size: 12px; font-weight: 500; color: var(--text-secondar=
y); line-height: 24px; letter-spacing: 0.24px; text-transform: uppercase; p=
adding: 0px 0px 8px; border-bottom: 1px solid var(--gray-100); margin-top: =
24px; }

.css-2h0a61 { padding: 8px 8px 8px 0px; display: flex; flex-direction: colu=
mn; }

.css-svv2z7 { display: flex; width: auto; flex-direction: column; gap: 0px;=
 }

.css-svv2z7 .slider { width: 100%; }

.css-svv2z7 > * { width: auto; }

.css-svv2z7 .body-small { font-weight: 500; }

.css-1kh4d9p { width: 100%; }

.css-1kh4d9p .slider { width: 100%; }

.css-nw0oqs { width: 12em; max-width: 100%; }

.css-nw0oqs .text-input:not(:focus) { border-color: transparent; }

.css-nw0oqs:hover .text-input:not(:focus) { border-color: var(--gray-200); =
}

.css-nw0oqs .rc-slider-rail { background-color: var(--gray-100); }

.css-nw0oqs .rc-slider-track { background-color: var(--gray-300); }

.css-nw0oqs .rc-slider-handle, .css-nw0oqs .rc-slider-handle:focus { border=
-color: var(--gray-300); }

.css-nw0oqs .rc-slider-handle:hover, .css-nw0oqs .rc-slider-handle:focus:ho=
ver { border-color: var(--gray-400); }

.css-nw0oqs .rc-slider-handle:active, .css-nw0oqs .rc-slider-handle:focus:a=
ctive { box-shadow: rgba(0, 0, 0, 0.2) 0px 0px 4px; border-color: var(--gra=
y-500) !important; }

.css-nw0oqs .rc-slider-handle .rc-slider-handle-dragging, .css-nw0oqs .rc-s=
lider-handle:focus .rc-slider-handle-dragging { border-color: var(--gray-50=
0) !important; }

.css-nw0oqs .rc-slider-handle:focus-visible { border-color: var(--green-600=
); }

.css-nw0oqs .rc-slider-disabled { background-color: var(--bg-color); }

.css-nw0oqs .rc-slider-disabled .rc-slider-handle { background-color: var(-=
-gray-200); }

.css-1eeb091 { flex: 0 1 auto; width: 80px; padding: 4px 5px 3px; line-heig=
ht: 15px; text-align: right; font-variant: tabular-nums; }

.css-l2z0vi { margin-top: 0.5em; }

.css-cfk0kw { width: 100%; bottom: 0px; border-radius: 0px 0px 0px 12px; bo=
rder: none; }

.css-s132ad { width: 100%; bottom: 0px; display: flex; -webkit-box-align: c=
enter; align-items: center; border-radius: 0px 0px 0px 12px; -webkit-box-pa=
ck: justify; justify-content: space-between; gap: 12px; padding: 24px; }

.css-njrzxh { display: flex; -webkit-box-align: center; align-items: center=
; gap: 4px; font-size: 12px; color: var(--text-secondary); }

.css-1dgfh34 { font-size: 14px; font-weight: 500; line-height: 20px; displa=
y: flex; gap: 4px; -webkit-box-align: center; align-items: center; cursor: =
default; color: var(--text-disabled); padding: 5px 0px; }

.css-1dgfh34 .label { margin-left: 2px; }

.css-4ip17j { display: flex; flex-direction: column; gap: 8px; margin-top: =
8px; }

.css-1nsq4nu { display: flex; -webkit-box-pack: justify; justify-content: s=
pace-between; -webkit-box-align: center; align-items: center; height: 100%;=
 padding: 16px 24px 0px; }

.css-1ontq4c { color: var(--text-primary); font-size: 16px; font-style: nor=
mal; font-weight: 500; display: flex; -webkit-box-align: center; align-item=
s: center; gap: 4px; }

.css-kklyd7 { padding: 5px 8px 4px; margin-right: 4px; }

.css-pt7q4m { overflow-y: auto; height: calc(100% - 60px); margin-top: 60px=
; padding: 8px 24px; position: relative; }

.css-1gvjzgy { height: 100%; resize: none; border-radius: 0px; font-size: 1=
4px; border: none; padding: 0px; }

.css-1gvjzgy:focus { box-shadow: none; }

.css-y0cja1 { font-size: 16px; display: flex; -webkit-box-align: center; al=
ign-items: center; gap: 8px; }

.css-1ck0o1v { color: var(--text-secondary); }

.css-1ck0o1v svg { position: relative; top: 2px; }

.css-14ue3a9 { font-weight: 500; color: var(--text-secondary); }

.css-zu879h { color: var(--red-500); }

.css-zu879h svg { position: relative; top: 2px; }

.css-v61b9e { font-weight: 500; color: var(--red-500); }
------MultipartBoundary--PgNM4SiMWaLkxzj6oY7Q8DPIEjAagNM0CL6X4tuFha----
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: cid:css-2ffd352b-510a-4f44-bd4e-7f0c40b346e3@mhtml.blink

@charset "utf-8";

.ProseMirror { position: relative; }

.ProseMirror { overflow-wrap: break-word; white-space: break-spaces; font-v=
ariant-ligatures: none; font-feature-settings: "liga" 0; }

.ProseMirror [contenteditable=3D"false"] { white-space: normal; }

.ProseMirror [contenteditable=3D"false"] [contenteditable=3D"true"] { white=
-space: pre-wrap; }

.ProseMirror pre { white-space: pre-wrap; }

img.ProseMirror-separator { display: inline !important; border: none !impor=
tant; margin: 0px !important; width: 1px !important; height: 1px !important=
; }

.ProseMirror-gapcursor { display: none; pointer-events: none; position: abs=
olute; margin: 0px; }

.ProseMirror-gapcursor::after { content: ""; display: block; position: abso=
lute; top: -2px; width: 20px; border-top: 1px solid black; animation: 1.1s =
steps(2, start) 0s infinite normal none running ProseMirror-cursor-blink; }

@keyframes ProseMirror-cursor-blink {=20
  100% { visibility: hidden; }
}

.ProseMirror-hideselection ::selection { background: transparent; }

.ProseMirror-hideselection * { caret-color: transparent; }

.ProseMirror-focused .ProseMirror-gapcursor { display: block; }

.tippy-box[data-animation=3D"fade"][data-state=3D"hidden"] { opacity: 0; }
------MultipartBoundary--PgNM4SiMWaLkxzj6oY7Q8DPIEjAagNM0CL6X4tuFha----
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: cid:css-79b730a2-a656-48c5-8787-133b938df4f6@mhtml.blink

@charset "utf-8";

@keyframes intercom-lightweight-app-launcher {=20
  0% { opacity: 0; transform: scale(0.5); }
  100% { opacity: 1; transform: scale(1); }
}

@keyframes intercom-lightweight-app-gradient {=20
  0% { opacity: 0; }
  100% { opacity: 1; }
}

@keyframes intercom-lightweight-app-messenger {=20
  0% { opacity: 0; transform: scale(0); }
  40% { opacity: 1; }
  100% { transform: scale(1); }
}

.intercom-lightweight-app { position: fixed; z-index: 2147483001; width: 0p=
x; height: 0px; font-family: intercom-font, "Helvetica Neue", "Apple Color =
Emoji", Helvetica, Arial, sans-serif; }

.intercom-lightweight-app-gradient { position: fixed; z-index: 2147483002; =
width: 500px; height: 500px; bottom: 0px; right: 0px; pointer-events: none;=
 background: radial-gradient(at right bottom, rgba(29, 39, 54, 0.16) 0%, rg=
ba(29, 39, 54, 0) 72%); animation: 200ms ease-out 0s 1 normal none running =
intercom-lightweight-app-gradient; }

.intercom-lightweight-app-launcher { position: fixed; z-index: 2147483003; =
border: none; bottom: 20px; right: 20px; max-width: 48px; width: 48px; max-=
height: 48px; height: 48px; border-radius: 50%; background: rgb(32, 33, 35)=
; cursor: pointer; box-shadow: rgba(0, 0, 0, 0.06) 0px 1px 6px 0px, rgba(0,=
 0, 0, 0.16) 0px 2px 32px 0px; transition: transform 167ms cubic-bezier(0.3=
3, 0, 0, 1); box-sizing: content-box; padding: 0px !important; margin: 0px =
!important; }

.intercom-lightweight-app-launcher:hover { transition: transform 250ms cubi=
c-bezier(0.33, 0, 0, 1); transform: scale(1.1); }

.intercom-lightweight-app-launcher:active { transform: scale(0.85); transit=
ion: transform 134ms cubic-bezier(0.45, 0, 0.2, 1); }

.intercom-lightweight-app-launcher:focus { outline: none; }

.intercom-lightweight-app-launcher-icon { display: flex; align-items: cente=
r; justify-content: center; position: absolute; top: 0px; left: 0px; width:=
 48px; height: 48px; transition: transform 100ms linear, opacity 80ms linea=
r; }

.intercom-lightweight-app-launcher-icon-open { opacity: 1; transform: rotat=
e(0deg) scale(1); }

.intercom-lightweight-app-launcher-icon-open svg { width: 24px; height: 24p=
x; }

.intercom-lightweight-app-launcher-icon-open svg path { fill: rgb(255, 255,=
 255); }

.intercom-lightweight-app-launcher-icon-self-serve { opacity: 1; transform:=
 rotate(0deg) scale(1); }

.intercom-lightweight-app-launcher-icon-self-serve svg { height: 44px; }

.intercom-lightweight-app-launcher-icon-self-serve svg path { fill: rgb(255=
, 255, 255); }

.intercom-lightweight-app-launcher-custom-icon-open { max-height: 24px; max=
-width: 24px; opacity: 1; transform: rotate(0deg) scale(1); }

.intercom-lightweight-app-launcher-icon-minimize { opacity: 0; transform: r=
otate(-60deg) scale(0); }

.intercom-lightweight-app-launcher-icon-minimize svg path { fill: rgb(255, =
255, 255); }

.intercom-lightweight-app-messenger { position: fixed; z-index: 2147483003;=
 overflow: hidden; background-color: white; animation: 250ms cubic-bezier(0=
, 1, 1, 1) 0s 1 normal none running intercom-lightweight-app-messenger; tra=
nsform-origin: right bottom; width: 400px; height: calc(100% - 40px); max-h=
eight: 704px; min-height: 250px; right: 20px; bottom: 20px; box-shadow: rgb=
a(0, 0, 0, 0.16) 0px 5px 40px; border-radius: 16px; }

.intercom-lightweight-app-messenger-header { height: 64px; border-bottom: n=
one; background: rgb(32, 33, 35); }

.intercom-lightweight-app-messenger-footer { position: absolute; bottom: 0p=
x; width: 100%; height: 80px; background: rgb(255, 255, 255); font-size: 14=
px; line-height: 21px; border-top: 1px solid rgba(0, 0, 0, 0.05); box-shado=
w: rgba(0, 0, 0, 0.05) 0px 0px 25px; }

@media print {
  .intercom-lightweight-app { display: none; }
}
------MultipartBoundary--PgNM4SiMWaLkxzj6oY7Q8DPIEjAagNM0CL6X4tuFha----
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: https://fonts.googleapis.com/css2?family=Roboto+Mono:wght@400;700&display=swap

@charset "utf-8";

@font-face { font-family: "Roboto Mono"; font-style: normal; font-weight: 4=
00; font-display: swap; src: url("https://fonts.gstatic.com/s/robotomono/v2=
3/L0xTDF4xlVMF-BfR8bXMIhJHg45mwgGEFl0_3vrtSM1J-gEPT5Ese6hmHSV0mf0h.woff2") =
format("woff2"); unicode-range: U+460-52F, U+1C80-1C88, U+20B4, U+2DE0-2DFF=
, U+A640-A69F, U+FE2E-FE2F; }

@font-face { font-family: "Roboto Mono"; font-style: normal; font-weight: 4=
00; font-display: swap; src: url("https://fonts.gstatic.com/s/robotomono/v2=
3/L0xTDF4xlVMF-BfR8bXMIhJHg45mwgGEFl0_3vrtSM1J-gEPT5Ese6hmHSx0mf0h.woff2") =
format("woff2"); unicode-range: U+301, U+400-45F, U+490-491, U+4B0-4B1, U+2=
116; }

@font-face { font-family: "Roboto Mono"; font-style: normal; font-weight: 4=
00; font-display: swap; src: url("https://fonts.gstatic.com/s/robotomono/v2=
3/L0xTDF4xlVMF-BfR8bXMIhJHg45mwgGEFl0_3vrtSM1J-gEPT5Ese6hmHSt0mf0h.woff2") =
format("woff2"); unicode-range: U+370-377, U+37A-37F, U+384-38A, U+38C, U+3=
8E-3A1, U+3A3-3FF; }

@font-face { font-family: "Roboto Mono"; font-style: normal; font-weight: 4=
00; font-display: swap; src: url("https://fonts.gstatic.com/s/robotomono/v2=
3/L0xTDF4xlVMF-BfR8bXMIhJHg45mwgGEFl0_3vrtSM1J-gEPT5Ese6hmHSd0mf0h.woff2") =
format("woff2"); unicode-range: U+102-103, U+110-111, U+128-129, U+168-169,=
 U+1A0-1A1, U+1AF-1B0, U+300-301, U+303-304, U+308-309, U+323, U+329, U+1EA=
0-1EF9, U+20AB; }

@font-face { font-family: "Roboto Mono"; font-style: normal; font-weight: 4=
00; font-display: swap; src: url("https://fonts.gstatic.com/s/robotomono/v2=
3/L0xTDF4xlVMF-BfR8bXMIhJHg45mwgGEFl0_3vrtSM1J-gEPT5Ese6hmHSZ0mf0h.woff2") =
format("woff2"); unicode-range: U+100-2AF, U+304, U+308, U+329, U+1E00-1E9F=
, U+1EF2-1EFF, U+2020, U+20A0-20AB, U+20AD-20C0, U+2113, U+2C60-2C7F, U+A72=
0-A7FF; }

@font-face { font-family: "Roboto Mono"; font-style: normal; font-weight: 4=
00; font-display: swap; src: url("https://fonts.gstatic.com/s/robotomono/v2=
3/L0xTDF4xlVMF-BfR8bXMIhJHg45mwgGEFl0_3vrtSM1J-gEPT5Ese6hmHSh0mQ.woff2") fo=
rmat("woff2"); unicode-range: U+0-FF, U+131, U+152-153, U+2BB-2BC, U+2C6, U=
+2DA, U+2DC, U+304, U+308, U+329, U+2000-206F, U+2074, U+20AC, U+2122, U+21=
91, U+2193, U+2212, U+2215, U+FEFF, U+FFFD; }

@font-face { font-family: "Roboto Mono"; font-style: normal; font-weight: 7=
00; font-display: swap; src: url("https://fonts.gstatic.com/s/robotomono/v2=
3/L0xTDF4xlVMF-BfR8bXMIhJHg45mwgGEFl0_3vrtSM1J-gEPT5Ese6hmHSV0mf0h.woff2") =
format("woff2"); unicode-range: U+460-52F, U+1C80-1C88, U+20B4, U+2DE0-2DFF=
, U+A640-A69F, U+FE2E-FE2F; }

@font-face { font-family: "Roboto Mono"; font-style: normal; font-weight: 7=
00; font-display: swap; src: url("https://fonts.gstatic.com/s/robotomono/v2=
3/L0xTDF4xlVMF-BfR8bXMIhJHg45mwgGEFl0_3vrtSM1J-gEPT5Ese6hmHSx0mf0h.woff2") =
format("woff2"); unicode-range: U+301, U+400-45F, U+490-491, U+4B0-4B1, U+2=
116; }

@font-face { font-family: "Roboto Mono"; font-style: normal; font-weight: 7=
00; font-display: swap; src: url("https://fonts.gstatic.com/s/robotomono/v2=
3/L0xTDF4xlVMF-BfR8bXMIhJHg45mwgGEFl0_3vrtSM1J-gEPT5Ese6hmHSt0mf0h.woff2") =
format("woff2"); unicode-range: U+370-377, U+37A-37F, U+384-38A, U+38C, U+3=
8E-3A1, U+3A3-3FF; }

@font-face { font-family: "Roboto Mono"; font-style: normal; font-weight: 7=
00; font-display: swap; src: url("https://fonts.gstatic.com/s/robotomono/v2=
3/L0xTDF4xlVMF-BfR8bXMIhJHg45mwgGEFl0_3vrtSM1J-gEPT5Ese6hmHSd0mf0h.woff2") =
format("woff2"); unicode-range: U+102-103, U+110-111, U+128-129, U+168-169,=
 U+1A0-1A1, U+1AF-1B0, U+300-301, U+303-304, U+308-309, U+323, U+329, U+1EA=
0-1EF9, U+20AB; }

@font-face { font-family: "Roboto Mono"; font-style: normal; font-weight: 7=
00; font-display: swap; src: url("https://fonts.gstatic.com/s/robotomono/v2=
3/L0xTDF4xlVMF-BfR8bXMIhJHg45mwgGEFl0_3vrtSM1J-gEPT5Ese6hmHSZ0mf0h.woff2") =
format("woff2"); unicode-range: U+100-2AF, U+304, U+308, U+329, U+1E00-1E9F=
, U+1EF2-1EFF, U+2020, U+20A0-20AB, U+20AD-20C0, U+2113, U+2C60-2C7F, U+A72=
0-A7FF; }

@font-face { font-family: "Roboto Mono"; font-style: normal; font-weight: 7=
00; font-display: swap; src: url("https://fonts.gstatic.com/s/robotomono/v2=
3/L0xTDF4xlVMF-BfR8bXMIhJHg45mwgGEFl0_3vrtSM1J-gEPT5Ese6hmHSh0mQ.woff2") fo=
rmat("woff2"); unicode-range: U+0-FF, U+131, U+152-153, U+2BB-2BC, U+2C6, U=
+2DA, U+2DC, U+304, U+308, U+329, U+2000-206F, U+2074, U+20AC, U+2122, U+21=
91, U+2193, U+2212, U+2215, U+FEFF, U+FFFD; }
------MultipartBoundary--PgNM4SiMWaLkxzj6oY7Q8DPIEjAagNM0CL6X4tuFha----
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: https://platform.openai.com/static/C3Xoh84X2h.css

@charset "utf-8";

.pointer-events-auto { pointer-events: auto; }

.\!visible { visibility: visible !important; }

.visible { visibility: visible; }

.invisible { visibility: hidden; }

.collapse { visibility: collapse; }

.static { position: static; }

.fixed { position: fixed; }

.absolute { position: absolute; }

.relative { position: relative; }

.sticky { position: sticky; }

.order-1 { order: 1; }

.float-right { float: right; }

.mx-auto { margin-left: auto; margin-right: auto; }

.-mb-0 { margin-bottom: 0px; }

.-mb-0\.5 { margin-bottom: -0.125rem; }

.mb-1 { margin-bottom: 0.25rem; }

.mb-10 { margin-bottom: 2.5rem; }

.mb-2 { margin-bottom: 0.5rem; }

.mb-3 { margin-bottom: 0.75rem; }

.mb-4 { margin-bottom: 1rem; }

.mb-6 { margin-bottom: 1.5rem; }

.ml-1 { margin-left: 0.25rem; }

.ml-2 { margin-left: 0.5rem; }

.ml-4 { margin-left: 1rem; }

.mr-1 { margin-right: 0.25rem; }

.mr-2 { margin-right: 0.5rem; }

.mt-0 { margin-top: 0px; }

.mt-0\.5 { margin-top: 0.125rem; }

.mt-1 { margin-top: 0.25rem; }

.mt-12 { margin-top: 3rem; }

.mt-2 { margin-top: 0.5rem; }

.mt-24 { margin-top: 6rem; }

.mt-3 { margin-top: 0.75rem; }

.mt-4 { margin-top: 1rem; }

.mt-6 { margin-top: 1.5rem; }

.mt-8 { margin-top: 2rem; }

.block { display: block; }

.inline-block { display: inline-block; }

.inline { display: inline; }

.flex { display: flex; }

.inline-flex { display: inline-flex; }

.table { display: table; }

.grid { display: grid; }

.contents { display: contents; }

.hidden { display: none; }

.size-3 { width: 0.75rem; height: 0.75rem; }

.size-3\.5 { width: 0.875rem; height: 0.875rem; }

.h-full { height: 100%; }

.w-\[140px\] { width: 140px; }

.w-\[300px\] { width: 300px; }

.w-\[55px\] { width: 55px; }

.w-full { width: 100%; }

.min-w-0 { min-width: 0px; }

.flex-1 { flex: 1 1 0%; }

.flex-\[1_0_auto\] { flex: 1 0 auto; }

.flex-shrink { flex-shrink: 1; }

.flex-shrink-0 { flex-shrink: 0; }

.shrink { flex-shrink: 1; }

.flex-grow, .grow { flex-grow: 1; }

.border-collapse { border-collapse: collapse; }

.transform { transform: translate(var(--tw-translate-x),var(--tw-translate-=
y)) rotate(var(--tw-rotate)) skew(var(--tw-skew-x)) skewY(var(--tw-skew-y))=
 scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y)); }

.cursor-pointer { cursor: pointer; }

.resize { resize: both; }

.flex-row { flex-direction: row; }

.flex-col { flex-direction: column; }

.flex-wrap { flex-wrap: wrap; }

.items-start { align-items: flex-start; }

.items-center { align-items: center; }

.items-baseline { align-items: baseline; }

.items-stretch { align-items: stretch; }

.justify-center { justify-content: center; }

.justify-between { justify-content: space-between; }

.gap-1 { gap: 0.25rem; }

.gap-1\.5 { gap: 0.375rem; }

.gap-2 { gap: 0.5rem; }

.gap-3 { gap: 0.75rem; }

.gap-4 { gap: 1rem; }

.overflow-x-scroll { overflow-x: scroll; }

.border { border-width: 1px; }

.px-4 { padding-left: 1rem; padding-right: 1rem; }

.pb-2 { padding-bottom: 0.5rem; }

.pb-5 { padding-bottom: 1.25rem; }

.pb-6 { padding-bottom: 1.5rem; }

.pt-0 { padding-top: 0px; }

.pt-0\.5 { padding-top: 0.125rem; }

.pt-2 { padding-top: 0.5rem; }

.pt-2\.5 { padding-top: 0.625rem; }

.pt-3 { padding-top: 0.75rem; }

.pt-5 { padding-top: 1.25rem; }

.pt-8 { padding-top: 2rem; }

.text-2xl { font-size: 1.5rem; line-height: 2rem; }

.text-base { font-size: 1rem; line-height: 1.5rem; }

.text-lg { font-size: 1.125rem; line-height: 1.75rem; }

.text-sm { font-size: 0.875rem; line-height: 1.25rem; }

.text-xs { font-size: 0.75rem; line-height: 1rem; }

.font-bold { font-weight: 700; }

.font-medium { font-weight: 500; }

.font-normal { font-weight: 400; }

.font-thin { font-weight: 100; }

.uppercase { text-transform: uppercase; }

.lowercase { text-transform: lowercase; }

.capitalize { text-transform: capitalize; }

.leading-5 { line-height: 1.25rem; }

.text-neutral-100 { --tw-text-opacity: 1; color: rgb(245 245 245 / var(--tw=
-text-opacity)); }

.underline { text-decoration-line: underline; }

.opacity-70 { opacity: 0.7; }

.shadow-md { --tw-shadow: 0 4px 6px -1px rgb(0 0 0 / .1), 0 2px 4px -2px rg=
b(0 0 0 / .1); --tw-shadow-colored: 0 4px 6px -1px var(--tw-shadow-color), =
0 2px 4px -2px var(--tw-shadow-color); box-shadow: var(--tw-ring-offset-sha=
dow, 0 0 #0000),var(--tw-ring-shadow, 0 0 #0000),var(--tw-shadow); }

.outline { outline-style: solid; }

.blur { --tw-blur: blur(8px); filter: var(--tw-blur) var(--tw-brightness) v=
ar(--tw-contrast) var(--tw-grayscale) var(--tw-hue-rotate) var(--tw-invert)=
 var(--tw-saturate) var(--tw-sepia) var(--tw-drop-shadow); }

.filter { filter: var(--tw-blur) var(--tw-brightness) var(--tw-contrast) va=
r(--tw-grayscale) var(--tw-hue-rotate) var(--tw-invert) var(--tw-saturate) =
var(--tw-sepia) var(--tw-drop-shadow); }

.transition { transition-property: color, background-color, border-color, t=
ext-decoration-color, fill, stroke, opacity, box-shadow, transform, filter,=
 backdrop-filter, -webkit-backdrop-filter; transition-timing-function: cubi=
c-bezier(0.4, 0, 0.2, 1); transition-duration: 0.15s; }

.ease-in-out { transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1); }

.ease-out { transition-timing-function: cubic-bezier(0, 0, 0.2, 1); }

@font-face { font-family: S=C3=B6hne; src: url("https://cdn.openai.com/comm=
on/fonts/soehne/soehne-buch.woff2") format("woff2"); font-style: normal; fo=
nt-weight: 400; font-display: swap; }

@font-face { font-family: S=C3=B6hne; src: url("https://cdn.openai.com/comm=
on/fonts/soehne/soehne-buch-kursiv.woff2") format("woff2"); font-style: ita=
lic; font-weight: 400; font-display: swap; }

@font-face { font-family: S=C3=B6hne; src: url("https://cdn.openai.com/comm=
on/fonts/soehne/soehne-kraftig.woff2") format("woff2"); font-style: normal;=
 font-weight: 500; font-display: swap; }

@font-face { font-family: S=C3=B6hne; src: url("https://cdn.openai.com/comm=
on/fonts/soehne/soehne-kraftig-kursiv.woff2") format("woff2"); font-style: =
italic; font-weight: 500; font-display: swap; }

@font-face { font-family: S=C3=B6hne; src: url("https://cdn.openai.com/comm=
on/fonts/soehne/soehne-halbfett.woff2") format("woff2"); font-style: normal=
; font-weight: 700; font-display: swap; }

@font-face { font-family: S=C3=B6hne; src: url("https://cdn.openai.com/comm=
on/fonts/soehne/soehne-halbfett-kursiv.woff2") format("woff2"); font-style:=
 italic; font-weight: 700; font-display: swap; }

@font-face { font-family: "S=C3=B6hne Mono"; src: url("https://cdn.openai.c=
om/common/fonts/soehne/soehne-mono-buch.woff2") format("woff2"); font-style=
: normal; font-weight: 400; font-display: swap; }

@font-face { font-family: "S=C3=B6hne Mono"; src: url("https://cdn.openai.c=
om/common/fonts/soehne/soehne-mono-halbfett.woff2") format("woff2"); font-s=
tyle: normal; font-weight: 700; font-display: swap; }

@font-face { font-family: "S=C3=B6hne Mono"; src: url("https://cdn.openai.c=
om/common/fonts/soehne/soehne-mono-buch-kursiv.woff2") format("woff2"); fon=
t-style: italic; font-weight: 400; font-display: swap; }

body { --green-50: #ebfaeb; --green-100: #d2f4d3; --green-200: #b9eebc; --g=
reen-300: #93e69c; --green-400: #68de7a; --green-500: #19c37d; --green-600:=
 #10a37f; --green-700: #1a7f64; --green-800: #1b5d4a; --green-900: #183d31;=
 --green-50a: #10a37f33; --green-100a: #10a37f4d; --purple-50: #ecebf9; --p=
urple-100: #d2cff2; --purple-200: #b9b4ec; --purple-300: #a198e6; --purple-=
400: #897ce2; --purple-500: #715fde; --purple-600: #5436da; --purple-700: #=
482da8; --purple-800: #3b2479; --purple-900: #281852; --purple-100a: #5436d=
a4d; --blue-100: #86e3e9; --blue-200: #72dee5; --blue-300: #5ed9e1; --blue-=
400: #4ad5de; --blue-500: #36d0da; --blue-600: #31bbc4; --blue-700: #2ba6ae=
; --blue-800: #269299; --blue-900: #207d83; --red-50: #fdebeb; --red-100: #=
f9cfcf; --red-200: #f6b2b3; --red-300: #f49394; --red-400: #f17173; --red-5=
00: #ef4146; --red-600: #c23539; --red-700: #9d2b2e; --red-800: #7b2124; --=
red-900: #59181a; --red-100a: #ef41464d; --gray-0: #fff; --gray-25: #fcfcfd=
; --gray-50: #f7f7f8; --gray-75: #f2f2f5; --gray-100: #ececf1; --gray-150: =
#e3e3eb; --gray-200: #d9d9e3; --gray-250: #d1d1dc; --gray-300: #c5c5d2; --g=
ray-350: #b8b8cb; --gray-400: #acacbe; --gray-450: #9d9dae; --gray-500: #8e=
8ea0; --gray-550: #7e7e90; --gray-600: #6e6e80; --gray-650: #5f5f75; --gray=
-700: #565869; --gray-750: #46464d; --gray-800: #353740; --gray-850: #28283=
2; --gray-900: #202123; --gray-950: #101014; --gray-1000: #000; --gray-10a:=
 rgba(0, 0, 0, .1); --gray-15a: rgba(0, 0, 0, .15); --gray-20a: rgba(0, 0, =
0, .2); --warm-gray-100: #e6f3f3; --gold-100: #ffe8c4; --gold-700: #945e0c;=
 --pink-100: #dd5ce5; --primary: var(--green-600); --primary-50: var(--gree=
n-50); --primary-100: var(--green-100); --primary-200: var(--green-200); --=
primary-300: var(--green-300); --primary-400: var(--green-400); --primary-5=
00: var(--green-500); --primary-600: var(--green-600); --primary-700: var(-=
-green-700); --primary-800: var(--green-800); --primary-900: var(--green-90=
0); --primary-50a: var(--green-50a); --primary-100a: var(--green-100a); --s=
econdary: var(--purple-600); --secondary-50: var(--purple-50); --secondary-=
100: var(--purple-100); --secondary-200: var(--purple-200); --secondary-300=
: var(--purple-300); --secondary-400: var(--purple-400); --secondary-500: v=
ar(--purple-500); --secondary-600: var(--purple-600); --secondary-700: var(=
--purple-700); --secondary-800: var(--purple-800); --secondary-900: var(--p=
urple-900); --secondary-100a: var(--purple-100a); --positive: #47b881; --wa=
rning: #d9822b; --medium-wash: #eff7f8; --deep-bg-color: #f5f5f5; --bg-colo=
r: var(--gray-0); --text-primary: var(--gray-900); --text-default: var(--gr=
ay-800); --text-secondary: var(--gray-600); --text-disabled: var(--gray-500=
); --text-error: var(--red-500); --nav-color: var(--gray-50); --global-nav:=
 var(--text-secondary); --divider: var(--gray-100); --nav-bg: var(--gray-10=
0); --nav-bg-hover: var(--gray-100); --nav-text: var(--gray-900); --pill-su=
ccess-text: var(--green-800); --pill-success-bg: var(--green-100); --pill-d=
anger-text: var(--red-700); --pill-danger-bg: var(--red-100); --pill-warnin=
g-bg: #ffe8c4; --pill-warning-text: #945e0c; --code-snippet-bg: var(--gray-=
900); --code-snippet-header: var(--gray-800); --white: #f7f7f8; --dark: var=
(--gray-800); --elevated: var(--gray-0); --shadow: 0 10px 15px -3px rgba(0,=
 0, 0, .1), 0 4px 6px -4px rgba(0, 0, 0, .1); --button-primary: var(--green=
-600); --button-primary-hover: var(--green-700); --highlighted-text: var(--=
green-100); --disabled-input: var(--gray-50); --light-wash: rgba(255, 255, =
255, .5); --button-focus-ring: 0px 0px 0px 2px var(--bg-color), 0px 0px 0px=
 4px var(--green-600); --input-border: var(--gray-200); --input-border-focu=
s: var(--primary-600); --input-focus-ring: 0px 0px 0px 1px var(--green-600)=
; --icon-warning-color: #f4ac36; --border-radius-sm: 4px; --border-radius: =
8px; --global-header-height: 54px; --global-header-nav-item-margin: 64px; -=
-global-page-gutter: 8px; --heading-margin-top: 30px; --heading-margin-bott=
om: 16px; --side-nav-width: 210px; --side-nav-collapsed-width: 56px; --cont=
ent-width: 850px; --content-v-padding: 40px; --content-h-padding: 56px; --f=
ont-size-small: 16px; --sans-serif: "S=C3=B6hne", helvetica, sans-serif; --=
monospace: "S=C3=B6hne Mono", sfmono-regular, consolas, liberation mono, me=
nlo, courier, monospace; --card-gradient: linear-gradient( 238deg, rgba(247=
, 247, 248, .5) 0%, rgba(247, 247, 248, 1) 100% ); --card-gradient-hover: l=
inear-gradient( 238deg, rgba(255, 255, 255, .5) 0%, rgba(250, 250, 250, 1) =
100% ); --card-shadow-hover: 0px 16px 24px -8px rgba(0, 0, 0, .07); }

.dark { --gray-0: #000; --gray-25: #101014; --gray-50: #202123; --gray-75: =
#282832; --gray-100: #353740; --gray-150: #46464d; --gray-200: #565869; --g=
ray-250: #5f5f75; --gray-300: #6e6e80; --gray-350: #7e7e90; --gray-400: #8e=
8ea0; --gray-450: #9d9dae; --gray-500: #acacbe; --gray-550: #b8b8cb; --gray=
-600: #c5c5d2; --gray-650: #d1d1dc; --gray-700: #d9d9e3; --gray-750: #e3e3e=
b; --gray-800: #ececf1; --gray-850: #f2f2f5; --gray-900: #f7f7f8; --gray-95=
0: #fcfcfd; --gray-1000: #fff; --gray-10a: rgba(255, 255, 255, .1); --gray-=
15a: rgba(255, 255, 255, .15); --gray-20a: rgba(255, 255, 255, .2); --warm-=
gray-100: var(--green-900); --highlighted-text: var(--green-800); --seconda=
ry-50: var(--purple-700); --secondary-100: var(--purple-600); --secondary-6=
00: var(--purple-200); --deep-bg-color: var(--gray-0); --bg-color: var(--gr=
ay-50); --divider: var(--gray-0); --elevated: #2b2c32; --shadow: 0 10px 15p=
x -3px rgba(0, 0, 0, .2), 0 4px 6px -4px rgba(0, 0, 0, .2); --primary-butto=
n-text: var(--gray-1000); --text-primary: var(--gray-900); --text-default: =
var(--gray-700); --text-secondary: var(--gray-600); --text-disabled: var(--=
gray-400); --text-error: var(--red-400); --nav-color: #171719; --nav-text: =
var(--gray-900); --nav-bg: var(--gray-150); --nav-bg-hover: var(--gray-100)=
; --global-nav: var(--text-disabled); --pill-success-text: var(--green-100)=
; --pill-success-bg: var(--green-800); --pill-danger-text: var(--red-100); =
--pill-danger-bg: var(--red-800); --pill-warning-text: #ffe8c4; --pill-warn=
ing-bg: #945e0c; --button-primary: var(--green-700); --button-primary-hover=
: var(--green-600); --disabled-input: var(--gray-100); --code-snippet-bg: v=
ar(--gray-0); --code-snippet-header: var(--gray-50); --input-border: var(--=
gray-200); --light-wash: rgba(32, 33, 35, .5); --card-gradient: linear-grad=
ient( 85deg, rgba(86, 88, 105, .25) 0%, rgba(86, 88, 105, .5) 99.54% ); --c=
ard-gradient-hover: linear-gradient( 85deg, rgba(86, 88, 105, .4) 0%, rgba(=
86, 88, 105, .6) 99.54% ); --card-shadow-hover: 0px 16px 24px -8px rgba(17,=
 24, 39, .25); }

.dark .switch-field { background-color: var(--gray-0); border: 2px solid va=
r(--gray-0); }

.dark .switch-theme-default label, .dark .switch-theme-xsmall label { color=
: var(--text-disabled); }

.dark .switch-theme-default label:hover, .dark .switch-theme-xsmall label:h=
over { color: var(--text-secondary); }

.dark .switch-theme-default input:checked + label, .dark .switch-theme-xsma=
ll input:checked + label { color: var(--green-600); background-color: var(-=
-gray-100); }

@media (max-width: 767px) {
  body { --content-v-padding: 24px; --content-h-padding: 24px; }
}

html, body { background-color: var(--deep-bg-color); padding: 0px; margin: =
0px; height: 100%; font-family: var(--sans-serif); font-size: var(--font-si=
ze-small); color: var(--text-default); -webkit-font-smoothing: antialiased;=
 }

*, ::before, ::after { box-sizing: border-box; }

* { scrollbar-width: thin; }

svg { flex-shrink: 0; }

input, textarea, button { font-family: var(--sans-serif); }

a, .link-style { color: var(--primary); text-decoration: none; cursor: poin=
ter; }

a:hover, .link-style:hover { color: var(--primary-700); }

h1, h2, h3, h4, h5, h6 { line-height: 1.25; font-weight: 500; color: var(--=
gray-900); margin-top: var(--heading-margin-top); margin-bottom: var(--head=
ing-margin-bottom); }

h1:first-child, h2:first-child, h3:first-child, h4:first-child, h5:first-ch=
ild, h6:first-child { margin-top: 0px; }

h1 { font-size: 28px; line-height: 40px; }

h2 { font-size: 24px; line-height: 32px; }

h3 { font-size: 20px; line-height: 28px; }

h4 { font-size: 18px; line-height: 24px; }

h5 { font-size: 16px; }

h6 { font-size: 12px; }

.monospace { font-family: var(--monospace); }

.text-title { color: var(--gray-900); font-weight: 700; font-size: 32px; li=
ne-height: 40px; }

.heading-large { color: var(--gray-900); font-weight: 700; font-size: 24px;=
 line-height: 32px; }

.heading-medium { color: var(--gray-900); font-weight: 700; font-size: 20px=
; line-height: 28px; }

.heading-small { color: var(--gray-900); font-weight: 700; font-size: 18px;=
 line-height: 24px; }

.subheading { color: var(--gray-900); text-transform: uppercase; font-size:=
 12px; line-height: 16px; letter-spacing: 0.08em; font-weight: 700; }

.text-intro { font-size: 18px; line-height: 16px; }

.caption-mono { font-weight: 400; font-size: 12px; line-height: 20px; font-=
family: var(--monospace); }

.body-large { font-weight: 400; font-size: 16px; line-height: 24px; }

.body-large-mono { font-family: var(--monospace); font-size: 15px; line-hei=
ght: 24px; font-weight: 400; }

.body-small { font-weight: 400; font-size: 14px; line-height: 20px; }

.body-small-bold { font-weight: 500; font-size: 14px; line-height: 20px; }

.body-small-secondary { color: var(--text-secondary); font-weight: 400; fon=
t-size: 14px; line-height: 20px; }

.body-small-mono { font-family: var(--monospace); font-size: 14px; line-hei=
ght: 20px; font-weight: 400; }

figcaption, caption, .caption { font-weight: 400; font-size: 12px; line-hei=
ght: 16px; color: var(--text-secondary); }

pre, pre > code { font-family: var(--monospace); }

.mono { font-family: var(--monospace); background-color: rgb(236, 236, 236)=
; padding: 0.5em 0.2em; word-break: break-all; }

.bold { font-weight: 700; }

.italic { font-style: italic; }

.tabular-nums { font-variant-numeric: tabular-nums; }

.nowrap { white-space: nowrap; }

p { line-height: 1.5em; }

.inline-code, p code, li code { font-family: var(--monospace); font-size: 1=
4px; font-weight: 500; background: var(--gray-50); border: 1px solid var(--=
gray-100); border-radius: 4px; padding: 2px 4px; margin: 0px 2px; }

.radio { margin: 5px; }

.radio input[type=3D"radio"] { position: absolute; opacity: 0; }

.radio input[type=3D"radio"] + .radio-label { cursor: pointer; font-weight:=
 400; }

.radio input[type=3D"radio"] + .radio-label::before { content: ""; backgrou=
nd: var(--bg-color); border-radius: 100%; border: 1px solid var(--gray-200)=
; box-shadow: inset 0 0 0 4px var(--bg-color); display: inline-block; width=
: 1em; height: 1em; position: relative; margin-right: 0.5em; vertical-align=
: top; cursor: pointer; text-align: center; transition: background-color 0.=
25s, border-color 0.25s; }

.radio input[type=3D"radio"]:checked + .radio-label::before { background-co=
lor: var(--primary); }

.radio input[type=3D"radio"]:checked:disabled + .radio-label::before { back=
ground-color: var(--green-500); }

.radio input[type=3D"radio"]:focus + .radio-label::before { outline: none; =
border-color: var(--gray-500); }

.radio input[type=3D"radio"] + .radio-label:empty::before { margin-right: 0=
px; }

#storybook-root { height: 100%; }

@keyframes blink {=20
  0% { opacity: 0; }
  50% { opacity: 1; }
  100% { opacity: 0; }
}

@keyframes grow-vertical {=20
  0% { height: 20%; }
  50% { height: 100%; }
  100% { height: 20%; }
}

.color-gray-600 { color: var(--gray-600); }

.color-gray-900 { color: var(--gray-900); }

.color-error { color: var(--text-error); }

.green-gradient-bg { background-color: rgb(25, 195, 125); background-image:=
 url("https://cdn.openai.com/API/images/icon_bg_green.svg"); background-siz=
e: cover; }

.red-gradient-bg { background-color: rgb(239, 65, 70); background-image: ur=
l("https://cdn.openai.com/API/images/icon_bg_red.svg"); background-size: co=
ver; }

.purple-gradient-bg { background-color: rgb(84, 54, 218); background-image:=
 url("https://cdn.openai.com/API/images/icon_bg_blue.svg"); background-size=
: cover; }

.pink-gradient-bg { background-color: rgb(221, 92, 229); background-image: =
url("https://cdn.openai.com/API/images/icon_bg_magenta.svg"); background-si=
ze: cover; }

.orange-gradient-bg { background-color: rgb(244, 172, 54); background-image=
: url("https://cdn.openai.com/API/images/icon_bg_orange.svg"); background-s=
ize: cover; }

.noselect { user-select: none; }

.spacer { flex-grow: 1; }

@media (min-width: 768px) {
  .md\:order-none { order: 0; }
  .md\:mb-0 { margin-bottom: 0px; }
  .md\:w-auto { width: auto; }
  .md\:flex-row { flex-direction: row; }
  .md\:items-start { align-items: flex-start; }
}

.alert-root { padding: 8px 16px 9px; background: var(--gray-0); border-radi=
us: 8px; display: inline-flex; flex-direction: row; color: var(--gray-0); }

.alert-full { display: flex; }

.alert-info { background-color: var(--gray-800); }

.alert-neutral { background-color: var(--gray-50); border: 1px solid var(--=
gray-100); color: var(--gray-900); }

.alert-neutral .alert-icon { color: var(--gray-500); }

.alert-success { background-color: var(--positive); }

.alert-warning { background-color: var(--warning); }

.alert-danger { background-color: var(--red-500); }

.alert-icon { flex: 0 0 auto; margin-right: 10px; }

.alert-body { flex: 1 1 auto; font-size: 15px; font-weight: 500; display: f=
lex; flex-direction: column; justify-content: center; }

.alert-title { font-weight: 500; line-height: 1.4; }

.alert-close { flex: 0 0 auto; margin-left: 10px; }

.alert-close button { border: none; background: transparent; color: var(--g=
ray-0); cursor: pointer; text-align: center; font-size: 20px; font-weight: =
400; line-height: 1; outline: none; padding: 4px; transition: opacity 0.3s;=
 width: 100%; }

.alert-close button:hover { opacity: 0.8; }

@keyframes spin {=20
  0% { transform: rotate(0deg); }
  100% { transform: rotate(360deg); }
}

.spinner { display: flex; align-items: center; }

.spinner-spin { animation: 1s linear 0s infinite normal none running spin; =
}

.spinner-color-default { color: var(--text-default); }

.dots-container { display: flex; gap: 1px; }

.loading-dot:first-child { animation: 1s ease 0s infinite normal none runni=
ng loading; }

.loading-dot:nth-child(2) { animation: 1s ease 0.2s infinite normal none ru=
nning loading; }

.loading-dot:nth-child(3) { animation: 1s ease 0.4s infinite normal none ru=
nning loading; }

@keyframes loading {=20
  0% { opacity: 0.15; }
  50% { opacity: 0.65; }
  100% { opacity: 0.15; }
}

.btn { display: inline-flex; justify-content: center; position: relative; f=
ont-weight: 500; text-decoration: none; border: none; cursor: pointer; line=
-height: 1.4; border-radius: 8px; box-sizing: border-box; transition: box-s=
hadow 0.2s, background-color 0.2s, color 0.2s, border 0.2s; user-select: no=
ne; white-space: nowrap; }

.btn .icon-node { display: flex; }

.btn:not(:hover) .show-on-hover { display: none; }

.btn:hover { text-decoration: none; }

.btn:hover .hide-on-hover { display: none; }

.btn:focus { outline: none; }

.btn:not(.btn-full):not(.btn-no-auto-margin) + .btn { margin-left: 8px; }

.btn-small-caps { font-size: 12px; letter-spacing: 0.15em; font-weight: 700=
; text-transform: uppercase; }

.btn-xsm { font-size: 12px; padding: 2px 8px; }

.btn-sm { font-size: 14px; padding: 6px 12px; }

.btn-sm.btn-small-caps { font-size: 12px; }

.btn-md { font-size: 16px; padding: 6px 12px; line-height: 24px; }

.btn-md.btn-small-caps { font-size: 13px; }

.btn-lg { font-size: 16px; padding: 11px 14px; line-height: 24px; }

.btn-lg.btn-small-caps { font-size: 14px; }

.btn-filled, .btn-filled:hover, .btn-filled:visited { color: var(--gray-100=
); }

.btn-outlined { background: transparent; border-width: 1px; border-style: s=
olid; }

.btn-minimal { background-color: transparent; }

.btn-primary.btn-filled { background-color: var(--button-primary); color: v=
ar(--white); }

.btn-primary.btn-filled:hover { background-color: var(--button-primary-hove=
r); color: var(--white); }

.btn-primary.btn-filled:active { background-color: var(--button-primary-hov=
er); }

.btn-primary.btn-filled:focus { box-shadow: var(--primary-100a) 0 0 0 3px; =
}

.btn-primary.btn-filled:focus-visible { box-shadow: var(--button-focus-ring=
); }

.btn-primary.btn-outlined { border-color: var(--button-primary); color: var=
(--button-primary); transition: 0.15s ease-in-out; background-color: var(--=
gray-0); }

.btn-primary.btn-outlined:active { border-color: var(--button-primary-hover=
); }

.btn-primary.btn-outlined:focus { box-shadow: var(--primary-100a) 0 0 0 3px=
; }

.btn-primary.btn-minimal { color: var(--green-600); background-color: trans=
parent; }

.btn-primary.btn-minimal:hover { background-color: var(--gray-100); color: =
var(--green-700); }

.btn-primary.btn-minimal:active { background-color: var(--gray-100); color:=
 var(--green-600); }

.btn-primary.btn-minimal:focus { box-shadow: var(--primary-100a) 0 0 0 3px;=
 }

.btn-primary.btn-minimal:disabled { background-color: transparent !importan=
t; }

.btn-secondary { color: var(--text-secondary); background-color: var(--gray=
-0); }

.btn-secondary:hover { color: var(--text-primary); }

.btn-secondary.btn-filled { background-color: var(--gray-200); }

.btn-secondary.btn-filled:hover, .btn-secondary.btn-filled:active { backgro=
und-color: var(--gray-300); }

.btn-secondary.btn-filled:focus { box-shadow: var(--input-focus-ring); }

.btn-secondary.btn-outlined { border-color: var(--gray-200); color: var(--t=
ext-default); }

.btn-secondary.btn-outlined:hover, .btn-secondary.btn-outlined:active { bor=
der-color: var(--gray-300); }

.btn-secondary.btn-outlined:focus { box-shadow: var(--secondary-100a) 0 0 0=
 3px; }

.btn-secondary.btn-minimal { color: var(--secondary-600); }

.btn-secondary.btn-minimal:hover { background-color: transparent; color: va=
r(--text-primary); }

.btn-secondary.btn-minimal:active { background-color: var(--secondary-100);=
 }

.btn-secondary.btn-minimal:focus { box-shadow: var(--secondary-100a) 0 0 0 =
3px; }

.btn-dark.btn-filled { background-color: rgb(110, 110, 128); color: rgb(255=
, 255, 255); }

.btn-dark.btn-filled:hover { background-color: rgb(86, 88, 105); color: rgb=
(255, 255, 255); }

.btn-dark.btn-filled:active { background-color: rgb(86, 88, 105); }

.btn-dark.btn-filled:focus { box-shadow: var(--gray-15a) 0 0 0 3px; }

.btn-dark.btn-filled:focus-visible { box-shadow: 0 0 0 2px var(--bg-color),=
0 0 0 4px var(--gray-600); }

.btn-dark.btn-outlined { border-color: rgb(110, 110, 128); color: var(--gra=
y-600); transition: 0.15s ease-in-out; background-color: var(--gray-0); }

.btn-dark.btn-outlined:active { border-color: rgb(86, 88, 105); }

.btn-dark.btn-outlined:focus { box-shadow: var(--gray-15a) 0 0 0 3px; }

.btn-dark.btn-minimal { color: rgb(110, 110, 128); background-color: transp=
arent; }

.btn-dark.btn-minimal:hover { background-color: var(--gray-100); color: rgb=
(86, 88, 105); }

.btn-dark.btn-minimal:active { background-color: var(--gray-100); color: rg=
b(110, 110, 128); }

.btn-dark.btn-minimal:focus { box-shadow: var(--gray-15a) 0 0 0 3px; }

.btn-dark.btn-minimal:disabled { background-color: transparent !important; =
}

.btn-neutral.btn-filled { background-color: var(--gray-100); color: var(--t=
ext-default); }

.btn-neutral.btn-filled:hover, .btn-neutral.btn-filled:active { background-=
color: var(--gray-150); }

.btn-neutral.btn-filled:focus-visible { box-shadow: var(--button-focus-ring=
); }

.btn-neutral.btn-outlined { border-color: var(--gray-100); color: var(--tex=
t-default); background-color: var(--gray-0); }

.btn-neutral.btn-outlined:hover { border-color: var(--gray-150); color: var=
(--text-primary); }

.btn-neutral.btn-outlined:active { border-color: var(--gray-150); }

.btn-neutral.btn-minimal { color: var(--text-default); }

.btn-neutral.btn-minimal:hover, .btn-neutral.btn-minimal:active { backgroun=
d-color: var(--gray-100); color: var(--text-primary); }

.btn-neutral.btn-minimal:disabled { background-color: transparent !importan=
t; }

.btn-negative.btn-filled { background-color: var(--red-500); color: var(--w=
hite); }

.btn-negative.btn-filled:hover, .btn-negative.btn-filled:active { backgroun=
d-color: var(--red-400); }

.btn-negative.btn-filled:focus { box-shadow: var(--red-100) 0 0 0 3px; }

.btn-negative.btn-outlined { border-color: var(--red-500); color: var(--red=
-500); }

.btn-negative.btn-outlined:hover, .btn-negative.btn-outlined:active { backg=
round-color: var(--red-50); }

.btn-negative.btn-outlined:focus { box-shadow: var(--red-100) 0 0 0 3px; }

.btn-negative.btn-minimal { color: var(--red-500); }

.btn-negative.btn-minimal:hover, .btn-negative.btn-minimal:active { color: =
var(--red-600); background-color: var(--gray-100); }

.btn-negative.btn-minimal:focus { box-shadow: var(--red-100) 0 0 0 3px; }

.btn-negative.btn-minimal:disabled { background-color: transparent !importa=
nt; }

.btn-none { color: unset; line-height: unset; padding: 0px; }

.btn-none.btn-minimal { background-color: unset; }

.btn-disabled { cursor: default; pointer-events: none; }

.btn.btn-disabled-style { background-color: var(--gray-50); border-color: t=
ransparent; color: var(--text-disabled); }

.btn.btn-disabled-style.btn-minimal { background-color: transparent; }

body.dark .btn.btn-disabled-style { background-color: var(--gray-100); }

.btn-loading { opacity: 0.7; }

.btn-full { display: flex; width: 100%; }

.btn-label-wrap { opacity: 1; width: 100%; display: flex; align-items: cent=
er; justify-content: center; }

.btn-label-wrap-loading { opacity: 0; }

.btn-label-inner { display: flex; align-items: center; justify-content: cen=
ter; }

.btn-label-inner:not(:first-child) { margin-left: 2px; }

.btn-label-inner:not(:last-child) { margin-right: 2px; }

.btn-label-inner svg { font-size: 18px; }

.btn-spinner { position: absolute; inset: 0px; display: flex; align-items: =
center; justify-content: center; }

.btn-node { display: flex; }

.btn-pill { border-radius: 9999px; }

.btn-action-wrapper { width: fit-content; height: max-content; display: fle=
x; align-items: stretch; }

.btn-action-wrapper .btn-action-primary { border-top-right-radius: 0px; bor=
der-bottom-right-radius: 0px; }

.btn-action-wrapper .btn-action-primary:focus { box-shadow: none; }

.btn-action-wrapper .btn-action-primary:focus-visible { box-shadow: none; }

.btn-action-wrapper .btn-action-secondary { display: flex; align-items: cen=
ter; border-top-left-radius: 0px; border-bottom-left-radius: 0px; border-le=
ft: 1px solid var(--bg-color); padding: 0px 8px 0px 6px; margin-left: 0px !=
important; }

.btn-action-wrapper .btn-action-secondary:focus { box-shadow: none; }

.btn-action-wrapper .btn-action-secondary:focus-visible { box-shadow: none;=
 }

body { --avatar-size: 28px; --avatar-initial-nudge: 1px; --avatar-interacti=
ve-ring-color: rgba(0, 0, 0, .06); --avatar-image-border-color: rgba(0, 0, =
0, .03); }

body[data-theme=3D"dark"] { --avatar-interactive-ring-color: rgba(255, 255,=
 255, .2); --avatar-image-border-color: rgba(255, 255, 255, .15); }

.jYGOC { cursor: pointer; border-radius: 100%; border: 0px; padding: 0px; b=
ackground: 0px center; appearance: button; transition: box-shadow 0.3s cubi=
c-bezier(0.19, 1, 0.22, 1); }

.jYGOC:hover { box-shadow: 0 0 0 2px var(--avatar-interactive-ring-color); =
}

.jYGOC:focus-visible { outline: 0px; box-shadow: 0 0 0 2px var(--green-600)=
; }

.jYGOC[data-state=3D"open"], .jYGOC:active { box-shadow: none; }

.qCm0E { display: inline-flex; align-items: center; justify-content: center=
; position: relative; width: var(--avatar-size); height: var(--avatar-size)=
; background: var(--gray-200); color: var(--text-default); border-radius: 1=
00%; overflow: hidden; user-select: none; flex-shrink: 0; flex-grow: 0; tra=
nsition: background-color 0.3s cubic-bezier(0.19, 1, 0.22, 1); }

.qCm0E[data-variant=3D"dark"] { background: var(--gray-650); color: var(--g=
ray-50); }

._8ufcO::before { content: ""; border-radius: 100%; display: block; positio=
n: absolute; inset: 0px; z-index: 1; pointer-events: none; border: 1px soli=
d var(--avatar-image-border-color); }

.mImKu { position: absolute; top: 0px; left: 0px; width: 100%; height: 100%=
; object-fit: cover; opacity: 0; border-radius: inherit; transition: 0.15s;=
 pointer-events: none; }

.mImKu[data-loaded] { opacity: 1; }

._9uyMP { font-size: calc(var(--avatar-size) * .5); font-weight: 500; line-=
height: 1; padding-bottom: var(--avatar-initial-nudge); }

.ar3Zu { flex-shrink: 0; flex-grow: 0; display: block; font-size: calc(var(=
--avatar-size) * .7); }

body { --indicator-size: 1em; --indicator-stroke: 2px; --indicator-color: v=
ar(--text-primary); }

._3eM4t { width: var(--indicator-size); height: var(--indicator-size); posi=
tion: relative; animation: 0.8s linear 0s infinite normal none running WvIO=
g; transition: opacity 0.15s; }

._3eM4t::before { content: ""; display: block; position: absolute; inset: 0=
px; border: var(--indicator-stroke) solid var(--indicator-color); mask-imag=
e: conic-gradient(rgba(0, 0, 0, 0), rgb(0, 0, 0)); border-radius: 50%; }

._3eM4t::after { content: ""; display: block; position: absolute; top: 0px;=
 left: 50%; width: var(--indicator-stroke); height: var(--indicator-stroke)=
; margin-left: calc(var(--indicator-stroke) * -1 / 2); background-color: va=
r(--indicator-color); border-radius: 100%; }

@keyframes WvIOg {=20
  0% { transform: rotate(0deg); }
  100% { transform: rotate(1turn); }
}

.dPoa8 { padding: 4px; border: 0px; background: none; appearance: button; c=
ursor: pointer; }

.dPoa8 svg { display: block; }

.h0vJs { max-width: 300px; font-size: 14px; padding: 7px 12px 8px; backgrou=
nd: var(--elevated); border-radius: 6px; box-shadow: var(--shadow),0 0 0 1p=
x var(--gray-100); animation-duration: 0.3s; animation-timing-function: cub=
ic-bezier(0.19, 1, 0.25, 0.95); animation-name: Bax0F; transform-origin: va=
r(--radix-tooltip-content-transform-origin); }

.h0vJs[data-state=3D"closed"] { animation: 0.2s cubic-bezier(0.55, 0, 0.1, =
1) 0s 1 normal none running e0f6V; }

@keyframes Bax0F {=20
  0% { opacity: 0; transform: scale(0.9); }
  100% { opacity: 1; transform: scale(1); }
}

@keyframes e0f6V {=20
  0% { opacity: 1; transform: scale(1); }
  100% { opacity: 0; transform: scale(0.9); }
}

body { --select-color-border: var(--gray-200); --select-color-border-hover:=
 var(--gray-400); --select-list-gutter: 5px; --select-list-min-width: 300px=
; --select-list-max-height: 400px; }

.ICo9Y { position: relative; display: flex; align-items: center; justify-co=
ntent: space-between; gap: 8px; min-width: 0px; width: auto; font-size: 14p=
x; padding: 0px 12px; min-height: 30px; cursor: pointer; transition: border=
 0.15s, background-color 0.15s; user-select: none; border: 0px; margin: 0px=
; color: inherit; background: none; appearance: button; }

.ICo9Y:disabled { opacity: 0.5; cursor: default; }

.ICo9Y::before { display: block; position: absolute; inset: 0px; opacity: 0=
; transition-duration: 0.4s; transition-timing-function: cubic-bezier(0.19,=
 1, 0.22, 1); transition-property: opacity, background-color, box-shadow, t=
ransform; border-radius: 6px; will-change: opacity, transform; }

.ICo9Y:active::before { transition-duration: 0.15s; }

.ICo9Y[data-loading] { pointer-events: none; }

.ICo9Y[data-block] { width: 100%; }

.ICo9Y[data-size=3D"xs"] { min-height: 26px; }

.ICo9Y[data-size=3D"sm"] { min-height: 28px; }

.ICo9Y[data-size=3D"lg"] { min-height: 32px; }

.ICo9Y[data-size=3D"xl"] { min-height: 36px; }

.ICo9Y[data-gutter-size=3D"xs"], .ICo9Y[data-gutter-size=3D"sm"] { padding:=
 0px 8px; }

.ICo9Y[data-gutter-size=3D"xl"] { padding: 0px 16px; }

.ICo9Y[data-variant=3D"bare"]::before { content: ""; background: var(--gray=
-150); }

.bvkc-:focus-visible + .ICo9Y[data-variant=3D"bare"]::before, .ICo9Y[data-v=
ariant=3D"bare"]:focus-visible::before { opacity: 1; transform: scale(1); b=
ox-shadow: 0 0 0 2px var(--green-600); background: transparent; }

.bvkc-:hover + .ICo9Y[data-variant=3D"bare"]::before, .ICo9Y[data-variant=
=3D"bare"][data-state=3D"open"]::before, .ICo9Y[data-variant=3D"bare"]:hove=
r::before { background: var(--gray-150); opacity: 0.7; transform: scale(1);=
 }

.ICo9Y[data-variant=3D"bare"]:active::before { transform: scale(var(--scale=
)); opacity: 1; }

.ICo9Y[data-variant=3D"bare"][disabled]::before { transform: scale(1); }

.ICo9Y[data-variant=3D"outline"]::before { content: ""; opacity: 1; backgro=
und: transparent; box-shadow: 0 0 0 1px var(--select-color-border); }

.bvkc-:hover:not(:disabled) + .ICo9Y[data-variant=3D"outline"]::before, .IC=
o9Y[data-variant=3D"outline"][data-state=3D"open"]::before, .ICo9Y[data-var=
iant=3D"outline"]:hover:not(:disabled)::before { box-shadow: 0 0 0 1px var(=
--select-color-border-hover); }

.bvkc-:focus-visible + .ICo9Y[data-variant=3D"outline"]::before, .ICo9Y[dat=
a-variant=3D"outline"]:focus-visible::before { opacity: 1; transform: scale=
(1); box-shadow: 0 0 0 2px var(--green-600); }

.ICo9Y[data-variant=3D"fill"]::before { content: ""; background: var(--gray=
-100); opacity: 1; }

.bvkc-:hover:not(:disabled) + .ICo9Y[data-variant=3D"fill"]::before, .ICo9Y=
[data-variant=3D"fill"]:hover:not(:disabled)::before { background: var(--gr=
ay-150); }

.ICo9Y[data-variant=3D"fill"]:active::before { transform: scale(var(--scale=
)); }

.bvkc-:focus-visible + .ICo9Y[data-variant=3D"fill"]::before, .ICo9Y[data-v=
ariant=3D"fill"]:focus-visible::before { opacity: 1; transform: scale(1); b=
ox-shadow: 0 0 0 2px var(--green-600); }

.ICo9Y:focus { outline: none; }

.RWOJJ { position: relative; max-width: 100%; white-space: nowrap; overflow=
: hidden; text-overflow: ellipsis; padding-bottom: 1px; }

.RWOJJ[data-placeholder] { color: var(--gray-600); }

.uF-Qb { display: block; flex-shrink: 0; opacity: 0.65; transition: opacity=
 0.15s; will-change: opacity; }

.bvkc-:hover + .ICo9Y .uF-Qb, [data-state=3D"open"] .uF-Qb, .ICo9Y:hover:no=
t(:disabled) .uF-Qb { opacity: 1; }

.WbByO { display: flex; position: relative; background: none; appearance: b=
utton; cursor: pointer; align-items: center; justify-content: center; width=
: 22px; height: 22px; margin-right: -2px; }

.WbByO:focus { outline: none; }

.WbByO::before { content: ""; display: block; position: absolute; inset: 0p=
x; opacity: 0; background: rgba(0, 0, 0, 0.1); transform: scale(var(--scale=
, 1)); transition-duration: 0.15s; transition-timing-function: ease; transi=
tion-property: opacity, background-color, transform; border-radius: 6px; wi=
ll-change: opacity, transform; }

.WbByO:hover::before { opacity: 0.7; transform: scale(1); }

.WbByO:focus-visible::before { opacity: 1; transform: scale(1); background-=
color: transparent; box-shadow: 0 0 0 2px var(--green-600); }

.WbByO:active::before { opacity: 1; transform: scale(var(--scale)); }

.tij3F { display: block; flex-shrink: 0; opacity: 0.5; transition: opacity =
0.15s; will-change: opacity; }

.WbByO:focus-visible .tij3F, .WbByO:active .tij3F, .ICo9Y:hover:not(:disabl=
ed) .tij3F, [data-state=3D"open"] .tij3F { opacity: 1; }

.bvkc- { position: absolute; inset: 0px; z-index: 2; opacity: 0; cursor: po=
inter; font-size: 16px; }

._4F2D7 { display: flex; flex-direction: column; max-height: min(var(--sele=
ct-list-max-height),var(--radix-popover-content-available-height)); }

._4F2D7:focus { outline: 0px; }

.iP0qP { width: var(--radix-popover-trigger-width); min-width: var(--select=
-list-min-width); background: var(--elevated); box-shadow: var(--shadow),0 =
0 0 1px var(--gray-100); border-radius: 8px; user-select: none; transform-o=
rigin: var(--radix-popover-content-transform-origin); will-change: opacity,=
 transform; }

[data-entering] .iP0qP { opacity: 0; transform: scale(0.95); }

[data-entering-active] .iP0qP, [data-entering][data-interrupted] .iP0qP { o=
pacity: 1; transform: scale(1); transition-duration: 0.3s; transition-timin=
g-function: cubic-bezier(0.19, 1, 0.22, 1); transition-property: opacity, t=
ransform; }

[data-exiting] .iP0qP { opacity: 1; transform: scale(1); }

[data-exiting-active] .iP0qP, [data-exiting][data-interrupted] .iP0qP { opa=
city: 0; transform: scale(0.95); transition-duration: 0.25s; transition-tim=
ing-function: cubic-bezier(0.19, 1, 0.22, 1); transition-property: opacity,=
 transform; }

.nKesF { flex: 1 1 0%; padding: var(--select-list-gutter); overflow: auto; =
}

._30r04 { position: relative; padding: 6px 12px 6px 8px; font-size: 14px; s=
croll-margin: 15px 0px; cursor: pointer; overflow-wrap: anywhere; }

._30r04::before { content: ""; display: block; position: absolute; inset: 0=
px; opacity: 0; background: var(--gray-100); transform: scale(var(--scale, =
.98)); transition-duration: 0.15s; transition-timing-function: cubic-bezier=
(0.19, 1, 0.22, 1); transition-property: opacity, background-color, transfo=
rm; border-radius: 6px; will-change: opacity, transform; }

[data-theme=3D"dark"] ._30r04::before { background: var(--gray-25); }

._30r04[data-selected] { font-weight: 500; }

._30r04[data-highlight]::before { opacity: 1; transform: scale(1); }

._30r04[data-highlight]:active::before { transform: scale(var(--scale, .98)=
); }

._30r04[data-disabled] { opacity: 0.4; cursor: default; }

._30r04[data-disabled]::before { display: none; }

.EWV4V { position: relative; }

.cHmWN { display: flex; align-items: center; justify-content: flex-start; g=
ap: 4px; }

.VJ-L2 { display: block; flex-shrink: 0; width: 16px; height: 16px; positio=
n: relative; top: 1px; }

.GCymC { flex-shrink: 0; flex-grow: 0; width: 16px; height: 16px; }

.cIpfX { margin-top: 1px; }

.UDVGW { display: flex; align-items: center; justify-content: flex-start; g=
ap: 4px; margin-top: 6px; padding: 6px 12px 6px 8px; font-size: 11px; text-=
transform: uppercase; letter-spacing: 1px; font-weight: 600; color: var(--g=
ray-600); }

.UDVGW:first-child { margin-top: 0px; }

[data-theme=3D"dark"] .UDVGW { color: var(--gray-450); }

.oQzxY { display: flex; align-items: center; justify-content: flex-start; g=
ap: 4px; padding: 6px 12px 6px 8px; font-size: 14px; color: var(--gray-600)=
; }

[data-theme=3D"dark"] .oQzxY { color: var(--gray-450); }

.rAeS9 { color: var(--primary); font-weight: 500; }

.qakOU { position: relative; padding: 6px 12px; font-size: 14px; border-rad=
ius: 6px; transition: background-color 0.15s; cursor: pointer; }

.qakOU::before { content: ""; display: block; position: absolute; inset: 0p=
x; opacity: 0; background: var(--gray-100); transform: scale(var(--scale, .=
98)); transition-duration: 0.15s; transition-timing-function: cubic-bezier(=
0.19, 1, 0.22, 1); transition-property: opacity, background-color, transfor=
m, box-shadow; border-radius: 6px; will-change: opacity, transform; }

[data-theme=3D"dark"] .qakOU::before { background: var(--gray-25); }

.qakOU:hover::before { opacity: 0.7; transform: scale(1); }

.qakOU:focus { outline: none; }

.qakOU:focus-visible::before { opacity: 1; transform: scale(1); box-shadow:=
 0 0 0 2px var(--green-600); }

.qakOU:focus-visible:not(:hover)::before { background-color: transparent; }

.qakOU:active::before { transform: scale(var(--scale, .98)); }

.qakOU svg { flex-shrink: 0; width: 16px; height: 16px; }

.F4CEK { position: relative; display: flex; align-items: center; justify-co=
ntent: flex-start; gap: 6px; }

.kX9Jo { position: relative; padding: var(--select-list-gutter); border-top=
: 1px solid var(--gray-100); }

.kX9Jo::before { content: ""; mask-image: linear-gradient(rgba(0, 0, 0, 0),=
 rgb(0, 0, 0)); height: 9px; width: 100%; position: absolute; bottom: 100%;=
 left: 0px; background: var(--elevated); margin-bottom: 1px; pointer-events=
: none; }

[data-theme=3D"dark"] .kX9Jo { border-top-color: var(--gray-150); }

.ZU8lN { position: relative; padding: var(--select-list-gutter) var(--selec=
t-list-gutter) 0; }

.ZU8lN::before { mask-image: linear-gradient(rgba(0, 0, 0, 0), rgb(0, 0, 0)=
); height: 9px; width: 100%; position: absolute; bottom: 100%; left: 0px; b=
ackground: var(--elevated); margin-bottom: 1px; pointer-events: none; }

.-mAGD { display: flex; justify-content: flex-start; align-items: center; g=
ap: 8px; width: 100%; padding: 4px 10px; color: var(--text-default); backgr=
ound: none; border: 1px solid var(--select-color-border); border-radius: 6p=
x; transition: border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out=
; }

.-mAGD[data-focused] { outline: none; border-color: var(--input-border-focu=
s); box-shadow: var(--input-focus-ring); }

.Q5cos { display: block; width: 100%; margin: 0px; padding: 0px; font-famil=
y: var(--sans-serif); font-size: 16px; transform: scale(0.875); font-weight=
: 400; line-height: 1.4; color: var(--text-default); background: none; bord=
er: 0px; border-radius: 0px; transform-origin: left center; }

.Q5cos:focus { outline: none; }

.jL4GQ { opacity: 0.5; font-size: 14px; padding: var(--select-list-gutter);=
 text-align: center; }

.select-dropdown-indicator { transition: color 0.15s; }

.select-base:hover .select-dropdown-indicator, .select-base:hover .select-c=
lear-indicator { color: var(--text-default); }

.form-label { display: block; }

.form-label-inline { display: inline-block; }

.text-input { display: inline-block; vertical-align: top; margin: 0px; widt=
h: 200px; font-family: var(--sans-serif); font-weight: 400; line-height: 1.=
4; color: var(--text-default); background-color: transparent; background-cl=
ip: padding-box; box-sizing: border-box; border: 1px solid var(--gray-200);=
 border-radius: 8px; transition: border-color 0.15s ease-in-out, box-shadow=
 0.15s ease-in-out; }

.text-input::placeholder { color: var(--text-disabled); }

.text-input.text-input-error { border-color: var(--red-500); }

.text-input:focus { border-color: var(--input-border-focus); box-shadow: va=
r(--input-focus-ring); outline: 0px; }

.text-input:focus-visible { box-shadow: var(--input-focus-ring); }

.text-input-sm { font-size: 14px; padding: 6px 12px; line-height: 18px; }

.text-input-md { font-size: 16px; padding: 5px 10px; line-height: 24px; }

.text-input-lg { font-size: 16px; padding: 10px 14px; line-height: 24px; }

.text-input[disabled] { background-color: var(--disabled-input); color: var=
(--text-disabled); }

.text-input[disabled]::placeholder { color: var(--text-disabled); }

.text-input-full { display: block; width: 100%; }

.text-input-with-custom-placeholder { position: relative; }

.text-input-with-custom-placeholder .text-input-custom-placeholder { positi=
on: absolute; top: 0px; left: 0px; color: var(--text-disabled); pointer-eve=
nts: none; }

.text-input-with-header.disabled .text-input-header-wrapper, .text-input-wi=
th-header.disabled .text-input { background-color: var(--gray-100); }

.text-input-with-header .subheading { position: absolute; padding: 22px 16p=
x 12px; }

.text-input-with-header .text-input-header-wrapper { padding-top: 50px; wid=
th: 100%; }

.text-input-with-header .text-input-header-wrapper::placeholder { color: va=
r(--text-disabled); }

.text-input-with-header .text-input-header-wrapper .text-input-header-buffe=
r { height: 100%; width: 100%; overflow: auto; border: none; padding: 0px 1=
4px 10px; }

.text-input-adorned { display: flex; align-items: stretch; border: 1px soli=
d var(--input-border); border-radius: 8px; transition: border-color 0.15s e=
ase-in-out, box-shadow 0.15s ease-in-out; }

.text-input-adorned:focus-within { border-color: var(--input-border-focus);=
 box-shadow: var(--input-focus-ring); }

.text-input-adorned .text-input-adornment { background: transparent; color:=
 var(--gray-700); flex: 0 0 auto; line-height: 1; display: flex; align-item=
s: center; padding: 0px 8px; }

.text-input-adorned .text-input-left-adornment { border-top-left-radius: 8p=
x; border-bottom-left-radius: 8px; border-right: none; }

.text-input-adorned .text-input { border-left: none transparent; padding-le=
ft: 0px; border-top-color: transparent; border-right-color: transparent; bo=
rder-bottom-color: transparent; }

.text-input-adorned .text-input:focus { box-shadow: none; outline: 0px; }

.text-input-adorned .text-input:not(:first-child) { border-top-left-radius:=
 0px; border-bottom-left-radius: 0px; }

.layers-root { position: absolute; top: 0px; left: 0px; right: 0px; z-index=
: 2; }

.modal-root { position: fixed; overflow: auto; inset: 0px; pointer-events: =
none; }

.modal-root.modal-is-open { pointer-events: auto; }

.modal-root.modal-is-open .modal-backdrop { opacity: 1; }

.modal-root.modal-is-open .modal-dialog { opacity: 1; transform: translateY=
(0px); pointer-events: all; }

.modal-backdrop { position: fixed; inset: 0px; background-color: rgba(0, 0,=
 0, 0.5); user-select: none; -webkit-tap-highlight-color: transparent; opac=
ity: 0; transition: opacity 0.4s cubic-bezier(0.2, 0.8, 0.4, 1); }

.modal-dialog-container { position: absolute; display: flex; align-items: c=
enter; justify-content: center; width: 100%; min-height: 100%; pointer-even=
ts: none; outline: none; user-select: none; }

.modal-dialog { position: relative; background: var(--elevated); color: var=
(--text-default); border-radius: 16px; margin: 20px 12px; opacity: 0; max-w=
idth: 100%; transform: translateY(20px); transition: transform 0.4s cubic-b=
ezier(0.2, 0.8, 0.4, 1), opacity 0.4s; user-select: text; }

.modal-dialog:focus { outline: none; }

.modal-dialog.modal-size-small { width: 400px; }

.modal-dialog.modal-size-medium { width: 520px; }

.modal-dialog.modal-size-large { width: 640px; }

.modal-dialog.modal-size-full { width: 100%; }

.modal-dialog.modal-size-auto { width: auto; }

@media (max-width: 600px) {
  .modal-dialog { margin: 20px 8px; }
}

.modal-close { position: absolute; top: 18px; right: 14px; display: flex; a=
lign-items: center; justify-content: center; line-height: 1; }

.modal-header { padding: 20px 24px 0px; margin-bottom: 24px; }

.modal-closeable .modal-header { margin-right: 40px; }

.modal-body { margin: 16px 24px 24px; }

.modal-body:first-child { margin-top: 20px; }

.modal-footer { display: flex; align-items: center; justify-content: flex-e=
nd; margin: 32px 24px 24px; }

.modal-footer.modal-footer-shrink-margin { margin-top: 24px; }

._5Amyn { font-weight: 400; display: flex; align-items: center; font-size: =
14px; gap: 4px; margin-left: -8px; }

.u-pgg { color: var(--gray-400); }

.popover-body { position: absolute; top: 0px; left: 0px; border-radius: var=
(--border-radius); transition-property: opacity, transform; will-change: tr=
ansform; box-shadow: var(--shadow),0 0 0 1px var(--gray-100); background-co=
lor: rgba(0, 0, 0, 0.3); }

@media (max-width: 576px) {
  .popover-body.popover-body-mobile-enabled { position: fixed; inset: auto =
0px 0px; border-radius: 0px; border: none; height: 100%; width: 100%; margi=
n: 0px !important; transform: none !important; }
  .popover-body.popover-body-mobile-enabled .popover-inner { position: abso=
lute; bottom: 0px; width: 100%; min-height: 50vh; border-bottom-left-radius=
: 0px; border-bottom-right-radius: 0px; }
}

.popover-noninteractive { pointer-events: none; }

.popover-arrow { background: var(--bg-color); box-shadow: rgba(5, 5, 5, 0.0=
8) 0px 2px 20px; transform: rotate(45deg); position: absolute; opacity: 0; =
}

.popover-arrow.visible { opacity: 1; }

.popover-inner { position: relative; border-radius: var(--border-radius); b=
ackground-color: var(--elevated); overflow: hidden; }

.popover-padding { padding: 12px; }

.tooltip { max-width: 300px; font-size: 14px; line-height: 20px; text-align=
: left; }

.tooltip.tooltip-normal { color: var(--text-default); }

.tooltip.tooltip-normal .tooltip-header { background-color: var(--elevated)=
; padding: 2px 16px; border-bottom: 1px solid var(--gray-100); }

.tooltip.tooltip-normal.tooltip-with-padding .popover-inner { padding: 16px=
 20px; }

.tooltip.tooltip-normal.tooltip-with-padding .tooltip-header { margin: -16p=
x -20px 16px; }

.tooltip.tooltip-compact { color: var(--gray-0); border: none; background: =
var(--gray-700); }

.tooltip.tooltip-compact .popover-inner { padding: 4px 8px; background: var=
(--gray-700); }

body { --menu-gutter: 5px; }

.Vuw0R { width: var(--menu-width, auto); min-width: var(--menu-min-width, 3=
00px); padding: var(--menu-gutter); background: var(--elevated); box-shadow=
: var(--shadow),0 0 0 1px var(--gray-100); max-height: var(--radix-popper-a=
vailable-height); max-width: var(--radix-popper-available-width); overflow:=
 auto; border-radius: 8px; font-size: 14px; color: var(--text-default); tra=
nsform-origin: var(--radix-dropdown-menu-content-transform-origin); will-ch=
ange: transform; }

[data-entering] .Vuw0R { opacity: 0; transform: scale(0.95); }

[data-entering-active] .Vuw0R, [data-entering][data-interrupted] .Vuw0R { o=
pacity: 1; transform: scale(1); transition-duration: 0.3s; transition-timin=
g-function: cubic-bezier(0.19, 1, 0.22, 1); transition-property: opacity, t=
ransform; }

[data-exiting] .Vuw0R { opacity: 1; transform: scale(1); }

[data-exiting-active] .Vuw0R, [data-exiting][data-interrupted] .Vuw0R { opa=
city: 0; transform: scale(0.95); transition-duration: 0.25s; transition-tim=
ing-function: cubic-bezier(0.19, 1, 0.22, 1); transition-property: opacity,=
 transform; }

.SMFQU { padding: 6px 8px; }

.I0eEM { position: relative; display: block; padding: 6px 8px; color: var(-=
-text-default); cursor: pointer; }

.I0eEM:focus { outline: none; }

.I0eEM:hover { color: var(--text-default); }

.I0eEM::before { content: ""; display: block; position: absolute; inset: 0p=
x; opacity: 0; background: var(--gray-100); transform: scale(var(--scale, .=
98)); transition-duration: 0.15s; transition-timing-function: cubic-bezier(=
0.19, 1, 0.22, 1); transition-property: opacity, background-color, transfor=
m; border-radius: 6px; will-change: opacity, transform; }

[data-theme=3D"dark"] .I0eEM::before { background: var(--gray-25); }

.I0eEM[data-highlighted]::before { opacity: 1; transform: scale(1); }

.I0eEM[data-highlighted]:active::before { transform: scale(var(--scale, .98=
)); }

.I0eEM[data-disabled] { opacity: 0.4; cursor: default; }

.I0eEM[data-disabled]::before { display: none; }

.RupgQ { position: relative; }

.YtvuM { height: 1px; margin: var(--menu-gutter) calc(-1 * var(--menu-gutte=
r)); background: var(--gray-100); }

[data-theme=3D"dark"] .YtvuM { background: var(--gray-150); }

body { --segmented-control-gutter: 2px; --segmented-control-option-highligh=
t-gutter: 2px; --segmented-control-option-opacity-off: .55; --segmented-con=
trol-background: var(--gray-100); --segmented-control-thumb-background: var=
(--gray-0); --segmented-control-highlight-background: var(--gray-200); --se=
gmented-control-highlight-opacity: .5; --segmented-control-highlight-active=
-opacity: .8; }

body[data-theme=3D"dark"] { --segmented-control-background: var(--gray-0); =
--segmented-control-thumb-background: var(--gray-100); --segmented-control-=
highlight-background: var(--gray-100); --segmented-control-highlight-opacit=
y: .55; --segmented-control-highlight-active-opacity: .65; }

.Z6PRs { position: relative; display: inline-flex; flex-wrap: nowrap; gap: =
1px; white-space: nowrap; overflow: auto; padding: var(--segmented-control-=
gutter); background: var(--segmented-control-background); border-radius: 8p=
x; }

.fC8KU { position: relative; z-index: 2; font-size: 14px; font-weight: 500;=
 color: var(--text-secondary); padding: 0px 12px; height: 30px; transition:=
 opacity 0.15s, background-color 0.15s, color 0.15s; cursor: pointer; line-=
height: 1.5; border: 0px; background: 0px center; appearance: button; }

.fC8KU:focus { outline: 0px; }

[data-size=3D"xs"] .fC8KU { height: 26px; padding: 0px 8px; }

[data-size=3D"sm"] .fC8KU { height: 28px; }

[data-size=3D"lg"] .fC8KU { height: 32px; }

[data-size=3D"xl"] .fC8KU { height: 36px; }

.fC8KU[data-state=3D"on"]:focus-visible { box-shadow: 0 1px 4px -1px rgba(0=
,0,0,.2),0 0 0 1px var(--green-500),0 0 2px 1px #d2f4d3; border-radius: 5px=
; }

.fC8KU::before { content: ""; position: absolute; top: var(--segmented-cont=
rol-option-highlight-gutter); right: var(--segmented-control-option-highlig=
ht-gutter); bottom: var(--segmented-control-option-highlight-gutter); left:=
 var(--segmented-control-option-highlight-gutter); background: var(--segmen=
ted-control-highlight-background); opacity: 0; transform: scale(1); transit=
ion: opacity 0.15s, transform 0.15s; border-radius: 6px; will-change: trans=
form; pointer-events: none; }

.fC8KU:active::before { transform: scale(0.95); }

.fC8KU svg { display: block; }

.fC8KU[data-state=3D"off"]:focus-visible, .fC8KU[data-state=3D"off"]:hover =
{ color: var(--text-primary); }

.fC8KU[data-state=3D"off"]:focus-visible::before, .fC8KU[data-state=3D"off"=
]:hover::before { opacity: var(--segmented-control-highlight-opacity); }

.fC8KU[data-state=3D"off"]:active::before { opacity: var(--segmented-contro=
l-highlight-active-opacity); }

.fC8KU[data-state=3D"on"] { color: var(--text-primary); }

.fC8KU[data-disabled] { cursor: not-allowed; opacity: 0.5; }

.fC8KU[data-disabled]::before { opacity: 0 !important; }

.ZDw29 { position: relative; }

.-X3Ew { position: absolute; top: var(--segmented-control-gutter); bottom: =
var(--segmented-control-gutter); left: 0px; background: var(--segmented-con=
trol-thumb-background); border-radius: 6px; box-shadow: rgba(0, 0, 0, 0.2) =
0px 1px 4px -1px; pointer-events: none; will-change: transform; }

.LwKwt { padding: 0px 8px 0px 14px; }

@media (min-width: 768px) {
  .LwKwt { padding: 0px; }
}

.qMH4e { margin-top: 2px; max-width: 100%; overflow: hidden; white-space: n=
owrap; text-overflow: ellipsis; font-size: 13px; color: var(--gray-700); }

._8dPNb { position: relative; display: block; width: 32px; height: 32px; cu=
rsor: pointer; background: none; border: 0px; padding: 0px; appearance: but=
ton; transition: box-shadow 0.3s cubic-bezier(0.19, 1, 0.22, 1); border-rad=
ius: 8px; }

._8dPNb::before { content: ""; display: block; position: absolute; inset: 0=
px; opacity: 0; background: var(--bg-color); transition: opacity 0.15s; bor=
der-radius: 8px; }

._8dPNb:hover::before { opacity: 0.65; }

._8dPNb:active::before, ._8dPNb[data-expanded]::before { opacity: 1; }

._8dPNb:focus-visible { outline: 0px; box-shadow: 0 0 0 2px var(--green-600=
); }

.tfB-7 { display: block; position: relative; top: 0px; left: 7px; width: 18=
px; height: 18px; overflow: hidden; }

._3Tbwl { display: block; position: absolute; top: 4px; left: 0px; width: 1=
8px; height: 2px; transition: transform 0.15s 0.15s; }

._3Tbwl::before { content: ""; display: block; width: 18px; height: 2px; ba=
ckground: var(--gray-900); transition: transform 0.15s; }

[data-expanded] .UuUwq { transform: translateY(4px); transition-delay: 0s; =
}

[data-expanded] .UuUwq::before { transform: rotate(45deg); transition-delay=
: 0.15s; }

.RMlM5 { top: 12px; }

[data-expanded] .RMlM5 { transform: translate(0px) translateY(-4px); transi=
tion-delay: 0s; }

[data-expanded] .RMlM5::before { transform: rotate(-45deg); transition-dela=
y: 0.15s; }

.gw2x5 { display: block; transition: transform 0.15s; transform: translate(=
-6px); }

[data-expanded] .gw2x5 { transform: translate(0px); }

.okBd0 { display: flex; align-items: stretch; gap: 4px; }

@media (min-width: 768px) {
  .okBd0 { flex: 0 1 0%; gap: 11px; align-items: center; justify-content: s=
pace-around; height: var(--global-header-height); min-height: var(--global-=
header-height); }
}

.w9s17 { flex-grow: 1; text-decoration: none; font-size: 14px; color: var(-=
-global-nav); cursor: pointer; padding: 10px 0px; text-align: center; borde=
r-radius: 8px; transition-duration: 0.2s; transition-timing-function: ease;=
 transition-property: color, background-color, box-shadow; }

.w9s17:hover { color: var(--text-primary); }

@media (min-width: 768px) {
  .w9s17 { flex-grow: 0; text-align: left; padding: 6px; }
  .w9s17:focus-visible { outline: 0px; box-shadow: 0 0 0 2px var(--green-60=
0); }
}

._1T-tk { color: var(--text-primary); font-weight: 500; background-color: v=
ar(--gray-150); }

@media (min-width: 768px) {
  ._1T-tk { background: none; }
}

.EsOWR { white-space: nowrap; }

.EsOWR::before { display: block; content: attr(data-title); font-weight: 70=
0; height: 0px; overflow: hidden; visibility: hidden; }

.vaD2P { display: none; }

@media (min-width: 1024px) {
  .vaD2P { display: block; }
  .ksWxL { display: none; }
}

.menu-root { text-align: left; padding-bottom: 2px; }

.menu-root .menu-item { padding: 0.4em 1em; box-sizing: border-box; font-si=
ze: 14px; color: var(--text-default); margin-bottom: 2px; }

.menu-root .menu-item:last-of-type { margin-bottom: 0px; }

.menu-root a.menu-item { display: block; color: var(--text-default); text-d=
ecoration: none; }

.menu-root .menu-item-selectable:hover { cursor: pointer; background: var(-=
-nav-bg-hover); color: var(--text-default); }

.menu-root .menu-item-selected { cursor: pointer; background: var(--gray-10=
0); color: var(--green-600); font-weight: 500; }

.menu-root .menu-item-disabled { pointer-events: none; color: var(--text-di=
sabled); }

.menu-root .menu-separator { border-top: 1px solid var(--gray-100); margin:=
 0px 0px 4px; }

.menu-root .menu-header { font-size: 12px; font-weight: 700; color: var(--t=
ext-primary); padding: 0px 14px 3px; display: flex; align-items: center; ju=
stify-content: space-between; }

.menu-root .menu-group { padding: 8px 0px; }

.uOzP5 { display: flex; gap: 12px; margin-top: 12px; }

@media (min-width: 768px) {
  .uOzP5 { margin-top: 0px; }
}

.VwKvp { align-items: center; flex: 1 1 0%; height: 36px; margin: 0px !impo=
rtant; }

@media (min-width: 768px) {
  .VwKvp { height: 32px; }
}

.hDvly { position: fixed; top: 0px; right: var(--global-page-gutter); left:=
 var(--global-page-gutter); display: flex; justify-content: space-between; =
align-items: center; height: var(--global-header-height); padding: 0px 12px=
; }

.vpev1, .Aip-a { display: flex; align-items: center; flex-shrink: 0; gap: 1=
6px; position: relative; z-index: 2; }

.qcq-H { display: block; }

.qcq-H svg { display: block; fill: var(--text-primary); }

.KAMRO { display: flex; align-items: center; justify-content: center; text-=
decoration: none; position: relative; height: 28px; width: 28px; border-rad=
ius: 100%; transition-duration: 0.3s; transition-timing-function: cubic-bez=
ier(0.19, 1, 0.22, 1); transition-property: background-color, box-shadow; p=
adding: 0px !important; color: var(--text-primary) !important; }

.KAMRO:hover { background-color: var(--gray-150); }

.KAMRO:focus-visible { outline: 0px; box-shadow: 0 0 0 2px var(--green-600)=
; }

.KAMRO svg { width: 20px; height: 20px; color: inherit; fill: currentcolor;=
 }

.nwsve { background-color: var(--gray-150); }

#root { height: 100%; }

.console-navigation { display: flex; flex-direction: column; position: abso=
lute; inset: 0px 0px 0px 100%; z-index: 301; background: rgb(255, 255, 255)=
; border: 1px solid var(--gray-100); border-radius: 8px; opacity: 0; }

.mobile-menu-expanded .console-navigation { left: 0px; opacity: 1; }

@media (min-width: 768px) {
  .console-navigation { flex-direction: column; position: absolute; top: 0p=
x; left: 0px; bottom: 0px; z-index: 101; width: var(--side-nav-width); bord=
er: 0px; padding-top: 20px; transition: width 0.25s, opacity 0.25s; backgro=
und: none; border-radius: 0px; opacity: 1; }
  .prefer-sidebar-collapsed .console-navigation { width: var(--side-nav-col=
lapsed-width); }
  .force-full-width .console-navigation { opacity: 0; pointer-events: none;=
 }
}

.console-navigation-stretch { flex: 1 1 0%; }

.console-body { position: absolute; inset: 0px; z-index: 201; background: v=
ar(--bg-color); border-radius: 8px; border: 1px solid var(--gray-100); over=
flow: auto; transition: left 0.25s; }

.dark .console-body { border-color: var(--gray-75); }

@media (min-width: 768px) {
  .with-sidebar .console-body { left: var(--side-nav-width); }
  .with-sidebar.prefer-sidebar-collapsed .console-body { left: var(--side-n=
av-collapsed-width); }
  .force-full-width .console-body { left: 0px !important; }
}

.console-sidebar-title { display: flex; align-items: center; gap: 6px; colo=
r: var(--gray-900); text-transform: uppercase; letter-spacing: 1px; font-si=
ze: 12px; font-weight: 500; line-height: 16px; padding: 0px 6px; margin: 0p=
x 0px 20px; }

.settings-page-container { display: flex; flex-direction: column; width: 10=
0%; }

@media (min-width: 1280px) {
  .settings-page-container { padding: 32px 0px; }
}

.api-key-page-container { display: flex; flex-direction: column; padding: 0=
px; margin: 24px; align-items: center; justify-content: center; }

.api-key-page-content { width: 100%; }

.settings-page-title-only { font-size: 20px; line-height: 24px; font-weight=
: 600; color: var(--text-primary); padding: 12px 0px 0px; margin: 0px; }

.settings-page-title { margin-bottom: 20px; padding: 12px 0px; width: 100%;=
 border-bottom: 1px solid var(--gray-100); display: flex; justify-content: =
space-between; }

.settings-page-title h1 { font-size: 20px; line-height: 24px; font-weight: =
600; color: var(--text-primary); padding: 0px; margin: 0px; }

.settings-page-title .align-right { margin-left: auto; }

.settings-page-title.settings-subnav { display: flex; flex-direction: colum=
n; align-items: flex-start; padding-bottom: 0px; gap: 12px; }

.settings-button-wrapper { display: flex; }

.settings-page-content { padding-bottom: 40px; width: 100%; }

.settings-page-content p { margin-top: 0px; }

.settings-page-content.flush { max-width: none; }

.page-body { flex: 1 0 auto; padding: var(--content-v-padding) var(--conten=
t-h-padding); width: calc(var(--content-width) + var(--content-h-padding) *=
 2); max-width: 100%; margin: 0px auto; font-size: 16px; line-height: 24px;=
 }

.page-body.full-width { width: 100%; }

.page-body.full-height { height: 100%; }

.page-body.short-width { width: 670px; }

.page-body.medium-width { width: 900px; }

.page-body.large-width { width: 1040px; }

.page-body.flush { padding: 0px; }

.container { padding: 0 var(--content-h-padding); width: calc(var(--content=
-width) + var(--content-h-padding) * 2); max-width: 100%; margin: 0px auto;=
 }

.container.full-width { width: 100%; }

.cb { display: flex; font-size: 16px; position: relative; cursor: pointer; =
}

.cb-disabled { cursor: not-allowed; }

.cb-input { border: none; clip: rect(1px, 1px, 1px, 1px); height: 1px; opac=
ity: 0; overflow: hidden; padding: 0px; position: absolute; white-space: no=
wrap; width: 1px; }

.cb-input + .cb-checkbox { color: rgb(255, 255, 255); }

.cb-input[disabled] + .cb-checkbox { color: var(--gray-200); border: 1px so=
lid var(--gray-400); background-color: var(--gray-400); }

.cb-input:not([disabled]):hover + .cb-checkbox { border-color: var(--gray-6=
00); }

.cb-input:not([disabled]):active + .cb-checkbox { background-color: var(--g=
ray-50); }

.cb-input:not([disabled]):focus + .cb-checkbox { box-shadow: var(--primary-=
100a) 0 0 0 2px; }

.cb-input.cb-checked:not([disabled]) + .cb-checkbox { border-color: var(--p=
rimary-600); background-color: var(--primary-600); }

.cb-input.cb-checked:not([disabled]):hover + .cb-checkbox { border-color: v=
ar(--primary-700); }

.cb-input.cb-checked:not([disabled]):active + .cb-checkbox { border-color: =
var(--primary-500); background-color: var(--primary-500); }

.cb-label { margin-left: 8px; line-height: 1.3; letter-spacing: -0.05px; }

.cb-label-disabled { color: var(--gray-500); }

.cb-checkbox { border-radius: 3px; display: flex; flex: 0 0 auto; align-ite=
ms: center; justify-content: center; width: 18px; height: 18px; border: 1px=
 solid var(--gray-500); transition: box-shadow 0.3s, border 0.3s; }

.cb-toggle { width: 26px; height: 16px; flex: 0 0 auto; background: var(--g=
ray-300); border-radius: 12px; margin-top: 1px; transition: background-colo=
r 0.3s, box-shadow 0.3s; }

.cb-input.cb-checked:not([disabled]) + .cb-toggle { background: var(--prima=
ry); }

.cb-input.cb-checked[disabled] + .cb-toggle { background: var(--primary); o=
pacity: 0.5; }

.cb-input.cb-checked:not([disabled]):focus + .cb-toggle { box-shadow: var(-=
-primary-100a) 0 0 0 2px; }

.cb-toggle-knob { width: 12px; height: 12px; border-radius: 12px; backgroun=
d: rgb(255, 255, 255); box-shadow: rgba(19, 21, 26, 0.1) 0px 1px; transform=
: translate(2px) translateY(2px); transition: transform 0.3s; }

.cb-input.cb-checked + .cb-toggle .cb-toggle-knob { transform: translate(12=
px) translateY(2px); }

._7j8ow { position: absolute; inset: 0px; z-index: 201; background: var(--b=
g-color); border-radius: 8px; border: 1px solid var(--gray-100); overflow: =
auto; scrollbar-gutter: stable; transition: left 0.2s; }

[data-theme=3D"dark"] ._7j8ow { border-color: var(--gray-75); }

@media (min-width: 768px) {
  [data-sidebar=3D"expanded"] ._7j8ow { left: var(--side-nav-width); }
  [data-sidebar=3D"collapsed"] ._7j8ow { left: var(--side-nav-collapsed-wid=
th); }
  [data-sidebar=3D"hidden"] ._7j8ow { left: 0px; }
}

.qLnXc { position: absolute; inset: 0px; transition: opacity 0.3s 0.15s; }

[data-mobile-menu=3D"visible"] .qLnXc { opacity: 0; visibility: hidden; tra=
nsition: opacity 0.4s, visibility 0.4s; }

@media (min-width: 768px) {
  .qLnXc { transition: none; }
  [data-mobile-menu=3D"visible"] .qLnXc { opacity: 1; visibility: visible; =
transition: none; }
}

.EpwGB { display: flex; flex-direction: column; position: absolute; inset: =
0px 0px 0px 100%; z-index: 301; padding: 12px 12px 0px; visibility: hidden;=
 user-select: none; overflow: hidden; }

[data-mobile-menu=3D"visible"] .EpwGB { left: 0px; visibility: visible; tra=
nsition: none; }

.VO47n { transition: visibility 0.5s, left 0.5s; }

.EpwGB > * { opacity: 0; transform: translateY(-6px); transition: opacity 0=
.5s cubic-bezier(0.19, 1, 0.22, 1), transform 0.8s cubic-bezier(0.19, 1, 0.=
22, 1); }

.EpwGB > :nth-child(1) { transition-delay: 0.08s; }

.EpwGB > :nth-child(2) { transition-delay: 0.04s; }

[data-mobile-menu=3D"visible"] .EpwGB > * { opacity: 1; transform: translat=
eY(0px); transition: opacity 0.8s cubic-bezier(0.19, 1, 0.22, 1) 0.33s, tra=
nsform 0.7s cubic-bezier(0.19, 1, 0.22, 1) 0.33s; will-change: opacity, tra=
nsform; }

[data-mobile-menu=3D"visible"] .EpwGB > :nth-child(1) { transition-delay: 0=
.15s; }

[data-mobile-menu=3D"visible"] .EpwGB > :nth-child(2) { transition-delay: 0=
.21s; }

[data-mobile-menu=3D"visible"] .EpwGB > :nth-child(3) { transition-delay: 0=
.27s; }

.qyrrQ { padding-right: 11px; padding-left: 11px; margin-right: -11px; marg=
in-left: -11px; }

.GVIPA { display: flex; flex-direction: column; flex: 1 1 0%; min-height: 0=
px; }

.aTuAl { height: 100%; display: flex; flex-direction: column; }

.DH-HY { padding-top: 16px; padding-bottom: 16px; overflow: auto; }

.FDGXZ { position: relative; cursor: pointer; user-select: none; border: 0p=
x; margin: 0px; color: inherit; background: none; appearance: button; }

.FDGXZ::before { content: ""; display: block; position: absolute; inset: 0p=
x; opacity: 0; background: var(--gray-150); transform: scale(1); transition=
-duration: 0.4s; transition-timing-function: cubic-bezier(0.19, 1, 0.22, 1)=
; transition-property: opacity, background-color, transform, box-shadow, co=
lor; border-radius: 6px; will-change: opacity, transform; }

.FDGXZ:focus { outline: 0px; }

.FDGXZ[data-state=3D"open"]::before, .FDGXZ:hover::before { opacity: 0.5; }

.FDGXZ:focus-visible::before { opacity: 1; transform: scale(1); box-shadow:=
 0 0 0 2px var(--green-600); background: transparent; }

.FDGXZ:focus-visible:hover::before { opacity: 1; background: var(--gray-150=
); }

.FDGXZ:active::before { transform: scale(0.98); opacity: 0.7; }

._1h-SG { display: flex; align-items: center; position: relative; height: 3=
8px; }

.-ySo1 { width: 100%; display: flex; align-items: center; margin: 0px 0px 2=
px; padding: 0px; color: var(--text-secondary); cursor: pointer; transition=
: color 0.15s; font-weight: 400; font-size: 14px; line-height: 20px; }

.-ySo1:hover { color: var(--text-default); }

.lT-iZ { color: var(--nav-text); font-weight: 500; cursor: default; }

.lT-iZ:hover { color: var(--nav-text); }

.lT-iZ::before, .lT-iZ:hover::before { opacity: 1; }

.lT-iZ:focus-visible::before { background: var(--gray-150); }

.lT-iZ[data-section-heading]::before { opacity: 0; }

.-k7Gw { display: flex; justify-content: center; align-items: center; flex:=
 0 0 auto; width: 32px; margin: 0px 2px 0px 4px; transition: color 0.15s; }

.-k7Gw svg { width: 20px; height: 20px; }

._0MyKb { position: relative; }

._0MyKb::before { content: ""; mask-image: linear-gradient(0deg, rgba(0, 0,=
 0, 0), rgb(0, 0, 0)); height: 16px; position: absolute; top: 100%; right: =
10px; left: 0px; z-index: 2; opacity: 1; background: var(--bg-color); point=
er-events: none; transition: opacity 0.1s; }

.ia2hd ._0MyKb { opacity: 0; }

.iCKi8 { display: none; }

.EDOEc { display: flex; flex-direction: column; position: relative; margin:=
 0px -12px; padding: 12px; flex-shrink: 0; flex-grow: 0; box-shadow: rgba(0=
, 0, 0, 0.06) 0px -2px 10px; }

.EDOEc .-ySo1 { margin: 0px; justify-content: center; }

@media (min-width: 350px) {
  .EDOEc .-k7Gw { margin: 0px 2px 0px 0px; }
}

.EDOEc ._0LIzz { display: none; }

@media (min-width: 350px) {
  .EDOEc ._0LIzz { display: inline; }
}

[data-theme=3D"dark"] .EDOEc { box-shadow: rgba(0, 0, 0, 0.35) 0px -2px 10p=
x; }

.q3jBs { display: flex; align-items: center; gap: 4px; }

@media (min-width: 768px) {
  [data-sidebar-collapsible] { white-space: nowrap; }
  .EpwGB { flex-direction: column; position: absolute; top: 0px; left: 0px;=
 bottom: 0px; z-index: 101; width: var(--side-nav-width); border: 0px; padd=
ing: 14px 0px 0px; overflow: visible; background: none; border-radius: 0px;=
 opacity: 1; visibility: visible; transition: opacity 0.2s; }
  [data-sidebar=3D"hidden"] .EpwGB { opacity: 0; pointer-events: none; visi=
bility: hidden; transition: opacity 0.2s, visibility 0.2s; }
  .EpwGB > * { opacity: 1; transform: none; will-change: auto; transition: =
none; }
  .qyrrQ { padding-right: 12px; padding-left: 12px; margin-left: calc(-1 * =
var(--global-page-gutter)); margin-right: 0px; }
  .aTuAl { width: var(--side-nav-width); }
  .aTuAl[data-sidebar-collapsible] { transition: width 0.2s; }
  [data-sidebar-prefer-collapse] .aTuAl[data-sidebar-collapsible] { width: =
var(--side-nav-collapsed-width); }
  .QeXPj { border-bottom: 1px solid var(--gray-150); }
  [data-theme=3D"dark"] .QeXPj { border-color: var(--gray-100); }
  .EDOEc { width: var(--side-nav-width); margin: 0px; padding: 6px 12px 6px=
 calc(12px - var(--global-page-gutter)); box-shadow: none; transition: widt=
h 0.2s; }
  [data-sidebar=3D"collapsed"] .EDOEc { width: var(--side-nav-collapsed-wid=
th); }
  .EDOEc .-ySo1 { margin-bottom: 4px; justify-content: flex-start; }
  .EDOEc .-k7Gw { margin: 0px 2px 0px 4px; }
  .q3jBs { display: block; }
  ._0MyKb::before { background: var(--deep-bg-color); }
  ._1h-SG { height: 32px; overflow: hidden; }
  .-ySo1 { margin: 0px 0px 4px; }
  .iCKi8 { position: relative; z-index: 2; width: 100%; display: flex; alig=
n-items: center; gap: 6px; padding: 0px; color: var(--gray-900); text-trans=
form: uppercase; letter-spacing: 1px; font-size: 11px; font-weight: 500; li=
ne-height: 16px; }
  .tFBvw { padding: 6px 0px 6px 14px; }
  ._0LIzz, ._9EWJR { transition: opacity 0.2s; }
  [data-sidebar-prefer-collapse] [data-sidebar-collapsible] ._0LIzz, [data-=
sidebar=3D"collapsed"] .EDOEc ._0LIzz, [data-sidebar-prefer-collapse] [data=
-sidebar-collapsible] ._9EWJR, [data-sidebar=3D"collapsed"] .EDOEc ._9EWJR =
{ opacity: 0; }
  [data-sidebar=3D"collapsed"] .FDGXZ:active::before { transform: scale(0.9=
5); }
}

.unjkE { position: fixed; top: var(--global-header-height); bottom: var(--g=
lobal-page-gutter); left: var(--global-page-gutter); right: var(--global-pa=
ge-gutter); }

.lgGza { position: relative; }

.P2ff0 { --fade-enter-duration: .2s; --fade-enter-delay: .1s; --fade-exit-d=
uration: .15s; --fade-exit-delay: 0s; --fade-timing-function: ease; }

.P2ff0[data-exiting] { position: absolute; top: 0px; left: 0px; width: 100%=
; }

.P2ff0[data-entering] > .RRe2A { opacity: 0; }

.P2ff0[data-exiting] > .RRe2A { opacity: 1; pointer-events: none; }

.P2ff0[data-entering-active] > .RRe2A, .P2ff0[data-entering][data-interrupt=
ed] .RRe2A { opacity: 1; transition: opacity var(--fade-enter-duration) var=
(--fade-timing-function) var(--fade-enter-delay); }

.P2ff0[data-exiting-active] > .RRe2A, .P2ff0[data-exiting][data-interrupted=
] > .RRe2A { opacity: 0; transition: opacity var(--fade-exit-duration) var(=
--fade-timing-function) var(--fade-exit-delay); }

.lgGza, .P2ff0, .RRe2A, .-jCTM, .sXRUo, .bSX-Q, .YfuCO { height: 100%; }

.-jCTM { position: relative; }

.sXRUo { --fade-enter-duration: .2s; --fade-enter-delay: .1s; --fade-exit-d=
uration: .15s; --fade-exit-delay: 0s; --fade-timing-function: ease; }

.sXRUo[data-exiting] { position: absolute; top: 0px; left: 0px; width: 100%=
; }

.sXRUo[data-exiting] > .bSX-Q { pointer-events: none; }

.sXRUo[data-exiting-active] > .bSX-Q, .sXRUo[data-exiting][data-interrupted=
] > .bSX-Q { opacity: 0; transition: opacity var(--fade-exit-duration) var(=
--fade-timing-function) var(--fade-exit-delay); }

.YfuCO { height: 100%; }

.YfuCO[data-entering] { opacity: 0; }

.YfuCO[data-entering-active] { opacity: 1; transition: opacity var(--fade-e=
nter-duration) var(--fade-timing-function) var(--fade-enter-delay); }

@keyframes scale-in-center {=20
  0% { transform: scale(0.7); opacity: 0; }
  100% { transform: scale(1); opacity: 1; }
}

@keyframes puff-in-center {=20
  0% { transform: scale(1.1); filter: blur(3px); opacity: 0; }
  100% { transform: scale(1); filter: blur(0px); opacity: 1; }
}

.launcher { width: 100%; max-width: 100%; min-height: 100%; display: flex; =
align-items: center; justify-content: center; padding: 40px 0px; }

@media (max-width: 900px) {
  .launcher { align-items: flex-start; }
}

.launcher-body { width: 100%; display: flex; flex-direction: column; align-=
items: center; justify-content: center; }

.launcher-header { flex: 0 1 0%; animation: 0.5s cubic-bezier(0.25, 0.46, 0=
.45, 0.94) 0s 1 normal both running scale-in-center; }

.launcher-menu { display: grid; grid-template-columns: repeat(2, 280px); ga=
p: 12px; margin-top: 60px; }

@media (max-width: 900px) {
  .launcher-menu { grid-template-columns: repeat(1, 295px); margin-top: 32p=
x; }
}

.launcher-item { background: var(--gray-50); border-radius: 8px; padding: 3=
2px; min-height: 400px; transition: background 0.1s ease-in-out; animation:=
 0.3s cubic-bezier(0.47, 0, 0.745, 0.715) 0s 1 normal both running puff-in-=
center; }

.launcher-item:hover { background: var(--gray-100); }

@media (max-width: 900px) {
  .launcher-item { min-height: 0px; }
}

.launcher-item:nth-child(2) { animation-delay: 0.1s; }

.launcher-item:nth-child(3) { animation-delay: 0.2s; }

.launcher-item-header { display: flex; align-items: center; justify-content=
: space-between; color: var(--gray-900); }

.launcher-item-header h1 { font-size: 20px; line-height: 28px; margin: 0px;=
 }

.launcher-item-header svg { margin-bottom: 4px; }

.launcher-item-desc { margin-top: 12px; color: var(--gray-700); font-size: =
16px; line-height: 24px; }

@media (prefers-reduced-motion) {
  .launcher-header, .launcher-item { animation: auto ease 0s 1 normal none =
running none; }
}

.sess-expiry-modal .modal-body { margin: 40px 32px; }

.sess-expiry-body { display: flex; flex-direction: column; align-items: cen=
ter; }

.sess-expiry-body h3 { margin: 0px 0px 12px; }

.sess-expiry-actions { margin-top: 12px; display: flex; align-items: center=
; }

body.dark .syntax-highlighter { --sh-fg: 255, 255, 255; --sh-bg: var(--code=
-snippet-bg); }

body.light .syntax-highlighter { --sh-fg: 25, 25, 39; --sh-bg: var(--code-s=
nippet-bg); }

.syntax-highlighter { background: var(--sh-bg); color: rgba(var(--sh-fg),1)=
; overflow-x: auto; }

.syntax-highlighter.dark-mode { --sh-fg: 255, 255, 255 !important; --sh-bg:=
 black !important; }

.syntax-highlighter.light-mode { --sh-fg: 25, 25, 39 !important; --sh-bg: #=
f7f7f8 !important; }

.syntax-highlighter > code { font-family: var(--monospace); }

.syntax-highlighter > code > code { font-family: var(--monospace); float: l=
eft; padding-right: 16px; }

.syntax-highlighter .react-syntax-highlighter-line-number { color: var(--gr=
ay-300); user-select: none; }

.syntax-highlighter .highlighted-row { background-color: rgba(158, 156, 18,=
 0.37); display: block; width: 150%; margin-left: -25%; }

.hljs-comment { color: rgba(var(--sh-fg),.5); }

.hljs-meta { color: rgba(var(--sh-fg),.6); }

.hljs-built_in, .hljs-class .hljs-title { color: rgb(233, 149, 12); }

.hljs-doctag, .hljs-keyword, .hljs-formula, .hljs-literal { color: rgb(46, =
149, 211); }

.hljs-string, .hljs-regexp, .hljs-addition, .hljs-attribute, .hljs-meta-str=
ing { color: rgb(0, 166, 125); }

.hljs-attr, .hljs-variable, .hljs-template-variable, .hljs-type, .hljs-sele=
ctor-class, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-number { colo=
r: rgb(223, 48, 121); }

.hljs-symbol, .hljs-bullet, .hljs-link, .hljs-selector-id, .hljs-title { co=
lor: rgb(242, 44, 61); }

.code-sample { display: flex; flex-direction: column; background: var(--cod=
e-snippet-bg); border-radius: 8px; }

.code-sample + .code-sample { margin-top: 1em; }

.code-sample .python-upgrade-banner { background: var(--code-snippet-bg); c=
olor: rgb(255, 255, 255); text-align: center; padding: 2px; font-size: 0.8e=
m; font-weight: 700; display: flex; }

.code-sample .python-upgrade-banner svg { margin-right: 8px; margin-left: 8=
px; margin-top: 6px; }

.code-sample .python-upgrade-banner path { stroke: rgb(255, 255, 255); }

.code-sample-header { display: flex; align-items: center; background: rgb(0=
, 0, 0); color: var(--gray-500); padding: 6px 10px 6px 12px; border-top-lef=
t-radius: 8px; border-top-right-radius: 8px; border-bottom: 1px solid var(-=
-code-snippet-header); overflow: auto; flex-shrink: 0; }

.code-sample-title { flex: 1 1 auto; white-space: nowrap; overflow: hidden;=
 text-overflow: ellipsis; margin-right: 10px; }

.code-sample-copy { flex: 0 0 auto; display: flex; align-items: center; mar=
gin-left: 8px; }

.code-sample-copy .btn-neutral.btn-minimal { background: var(--code-sample-=
bg); color: var(--gray-500); border: 1px solid transparent; }

.code-sample-copy .btn-neutral:hover { background-color: var(--code-snippet=
-header); color: var(--white); }

.code-sample-copy .btn-minimal:hover { background-color: var(--code-snippet=
-header); }

.code-sample-sep { flex: 0 0 auto; border-left: 1px solid var(--gray-100); =
padding-left: 8px; margin-left: 8px; min-width: 1px; height: 22px; }

.code-sample-body { flex-grow: 1; flex-shrink: 0; position: relative; }

.code-sample-body .code-sample-pre { margin: 0px; border-radius: 8px; paddi=
ng: 12px 16px; font-size: 13px; line-height: 20px; height: 100%; min-height=
: 44px; }

.code-sample-body.code-sample-body-with-header .code-sample-pre { border-to=
p-left-radius: 0px; border-top-right-radius: 0px; }

.code-sample-body.code-sample-body-large .code-sample-pre { font-size: 15px=
; line-height: 24px; }

.code-sample-copy-float { position: absolute; top: 6px; right: 6px; opacity=
: 1; transition: opacity 0.2s, background-color 0.2s, border 0.2s; border: =
none; background: var(--code-snippet-bg); color: var(--gray-500) !important=
; }

.code-sample-oneliner .code-sample-copy-float { top: 50%; transform: transl=
ateY(-50%); }

.code-sample-copy-float:hover { color: var(--white) !important; background-=
color: var(--code-snippet-bg) !important; }

.code-sample-select-wrap { flex: 0 0 auto; display: flex; align-items: cent=
er; position: relative; cursor: pointer; }

.code-sample-select-wrap svg { width: 14px; height: 14px; pointer-events: n=
one; margin-left: 2px; }

.code-sample-select-wrap + .code-sample-select-wrap { margin-left: 12px; }

.code-sample-select-wrap:hover { color: var(--white); }

.code-sample-select { cursor: pointer; appearance: none; background: none; =
border-radius: 8px; font-size: 14px; border: none; padding: 5px 24px 5px 6p=
x; margin: 0px; max-width: 120px; text-align: right; text-align-last: right=
; font-family: var(--sans-serif); position: absolute; inset: 0px; opacity: =
0; }

.code-sample-select:focus { outline: none; border: none; }

.code-sample-select-val { font-size: 14px; line-height: 20px; max-width: 15=
0px; text-overflow: ellipsis; overflow-x: hidden; white-space: nowrap; font=
-weight: 500; }

.example-chat-container { background-color: var(--nav-bg); border-radius: 8=
px; overflow: hidden; margin: 24px 0px; }

.example-chat-messages { padding: 10px 0px; }

.example-chat-message { display: grid; grid-template-columns: 100px 1fr; pa=
dding: 8px 16px; white-space: pre-wrap; }

.example-chat-role { padding-top: 5px; }

.example-chat-link { display: block; background-color: var(--nav-bg); paddi=
ng: 8px 16px; font-size: 14px; line-height: 20px; }

.example-chat-link, .example-chat-link:visited { color: var(--gray-800); }

.example-chat-link:hover { color: var(--gray-700); }

.example-chat-link svg { vertical-align: middle; margin: 0px 0px 2px 3px; }

.example-chat-code { margin: 0px; }

.example-content { background-color: var(--gray-50); border-radius: 4px; ov=
erflow: hidden; margin: 24px 0px; }

.example-content-value { padding: 12px 16px; font-family: var(--monospace);=
 font-size: 13px; line-height: 20px; white-space: pre-wrap; color: var(--gr=
ay-800); }

.example-content-large .example-content-value { font-size: 15px; line-heigh=
t: 24px; }

.example-content-link { display: block; background-color: var(--gray-100); =
padding: 8px 16px; font-size: 14px; line-height: 20px; }

.example-content-link, .example-content-link:visited { color: var(--gray-80=
0); }

.example-content-link:hover { color: var(--gray-700); }

.example-content-link svg { vertical-align: middle; margin: 0px 0px 2px 3px=
; }

.example-content-code { margin: 0px; }

.anchor-heading-root { margin-top: var(--heading-margin-top); margin-bottom=
: var(--heading-margin-bottom); }

.anchor-heading-root .anchor-heading { margin: 0px; }

.anchor-heading-root:first-child { margin-top: 0px; }

.anchor-heading-link { display: inline-block; }

.anchor-heading-link .anchor-heading { position: relative; }

.anchor-heading-icon { position: absolute; top: 45%; transform: translateY(=
-50%); left: calc(100% + 6px); opacity: 0; color: var(--primary); transitio=
n: opacity 0.3s; }

.anchor-heading-link:hover .anchor-heading-icon { opacity: 1; }

._8eKfC { will-change: opacity, transform, margin; text-align: center; }

[data-entering] ._8eKfC { opacity: 0; margin-bottom: calc(-1 * var(--toast-=
height)); transform: translateY(-120%); }

[data-entering-active] ._8eKfC, [data-entering][data-interrupted] ._8eKfC {=
 opacity: 1; margin-bottom: 0px; transform: translateY(0px); transition-dur=
ation: 0.3s; transition-timing-function: cubic-bezier(0.19, 1, 0.22, 1); tr=
ansition-property: margin, opacity, transform; }

[data-exiting] ._8eKfC { opacity: 1; margin-bottom: 0px; transform: scale(1=
); }

[data-exiting-active] ._8eKfC, [data-exiting][data-interrupted] ._8eKfC { o=
pacity: 0; transform: scale(0.9); margin-bottom: calc(-1 * var(--toast-heig=
ht)); transition-duration: 0.25s; transition-timing-function: cubic-bezier(=
0.19, 1, 0.22, 1); transition-property: opacity, transform, margin; }

.CRjGu { max-width: 560px; margin: 0px auto; top: 0px; left: 0px; right: 0p=
x; position: fixed; z-index: 200; pointer-events: none; display: flex; flex=
-direction: column-reverse; }
------MultipartBoundary--PgNM4SiMWaLkxzj6oY7Q8DPIEjAagNM0CL6X4tuFha----
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: https://platform.openai.com/static/9dWNNV5ZwJ.css

@charset "utf-8";

.pill { display: inline-block; padding: 8px 12px; border-radius: 16px; font=
-weight: 700; font-family: var(--sans-serif); text-transform: none; }

.pill-small { display: inline-block; padding: 4px 8px; border-radius: 8px; =
font-weight: 500; font-size: 12px; line-height: 16px; }

.pill-neutral { background-color: var(--gray-100); }

.pill-success { background-color: var(--pill-success-bg); color: var(--pill=
-success-text); }

.pill-danger { background-color: var(--pill-danger-bg); color: var(--pill-d=
anger-text); }
------MultipartBoundary--PgNM4SiMWaLkxzj6oY7Q8DPIEjAagNM0CL6X4tuFha----
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: https://platform.openai.com/static/De_M7uH0yx.css

@charset "utf-8";

@keyframes skeleton {=20
  0% { background-position: -200px 0px; }
  100% { background-position: calc(100% + 200px) 0px; }
}

.skeleton { background-color: var(--gray-75); background-image: linear-grad=
ient(90deg,var(--gray-50) 25%,var(--gray-100) 50%,var(--gray-50) 75%); back=
ground-size: 400% 100%; background-repeat: no-repeat; border-radius: 8px; a=
nimation: 1.5s linear 0s infinite normal none running skeleton; display: in=
line-block; line-height: 1; width: 100%; }

.skeleton-children { visibility: hidden; }
------MultipartBoundary--PgNM4SiMWaLkxzj6oY7Q8DPIEjAagNM0CL6X4tuFha----
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: https://platform.openai.com/static/BxCTKkk_aX.css

@charset "utf-8";

.no-focus:focus { border: none; outline: none; }

.upload-wrapper { background-color: var(--nav-bg-hover); border: 1px solid =
var(--gray-100); border-radius: 8px; padding: 20px; flex: 1 1 0%; display: =
flex; flex-direction: column; align-items: center; justify-content: center;=
 cursor: pointer; transition: border 0.2s ease-in-out; }

.upload-wrapper:hover { border: 1px solid var(--gray-200); }

.upload-wrapper.disabled { cursor: no-drop; color: var(--gray-400); }

.upload-wrapper.disabled .upload-title, .upload-wrapper.disabled .upload-su=
btitle, .upload-wrapper.disabled .upload-file-icon { color: var(--gray-400)=
; }

.upload-subtitle { margin-top: -8px; margin-bottom: 12px; color: var(--text=
-secondary); }

.upload-subtitle:last-child { margin-bottom: 0px; }

.upload-drag-active { border-color: var(--gray-600); position: relative; }

.upload-drag-active::after { content: ""; display: block; width: 100%; heig=
ht: 100%; position: absolute; background-color: transparent; opacity: 0.5; =
}

.upload-file-icon { vertical-align: text-top; margin-right: 4px; }

.selected-file-container { display: inline-flex; align-items: center; }
------MultipartBoundary--PgNM4SiMWaLkxzj6oY7Q8DPIEjAagNM0CL6X4tuFha----
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: https://platform.openai.com/static/Dhy7yJcvdn.css

@charset "utf-8";

.rc-slider { position: relative; height: 14px; padding: 5px 0px; width: 100=
%; border-radius: 6px; touch-action: none; box-sizing: border-box; -webkit-=
tap-highlight-color: rgba(0, 0, 0, 0); }

.rc-slider * { box-sizing: border-box; -webkit-tap-highlight-color: rgba(0,=
 0, 0, 0); }

.rc-slider-rail { position: absolute; width: 100%; background-color: rgb(23=
3, 233, 233); height: 4px; border-radius: 6px; }

.rc-slider-track { position: absolute; left: 0px; height: 4px; border-radiu=
s: 6px; background-color: rgb(171, 226, 251); }

.rc-slider-handle { position: absolute; width: 14px; height: 14px; margin-t=
op: -5px; cursor: grab; border-radius: 50%; border: 2px solid rgb(150, 219,=
 250); background-color: rgb(255, 255, 255); touch-action: pan-x; }

.rc-slider-handle-dragging.rc-slider-handle-dragging.rc-slider-handle-dragg=
ing { border-color: rgb(87, 197, 247); box-shadow: rgb(150, 219, 250) 0px 0=
px 0px 5px; }

.rc-slider-handle:focus { outline: none; }

.rc-slider-handle-click-focused:focus { border-color: rgb(150, 219, 250); b=
ox-shadow: unset; }

.rc-slider-handle:hover { border-color: rgb(87, 197, 247); }

.rc-slider-handle:active { border-color: rgb(87, 197, 247); box-shadow: rgb=
(87, 197, 247) 0px 0px 5px; cursor: grabbing; }

.rc-slider-mark { position: absolute; top: 18px; left: 0px; width: 100%; fo=
nt-size: 12px; }

.rc-slider-mark-text { position: absolute; display: inline-block; vertical-=
align: middle; text-align: center; cursor: pointer; color: rgb(153, 153, 15=
3); }

.rc-slider-mark-text-active { color: rgb(102, 102, 102); }

.rc-slider-step { position: absolute; width: 100%; height: 4px; background:=
 transparent; }

.rc-slider-dot { position: absolute; bottom: -2px; margin-left: -4px; width=
: 8px; height: 8px; border: 2px solid rgb(233, 233, 233); background-color:=
 rgb(255, 255, 255); cursor: pointer; border-radius: 50%; vertical-align: m=
iddle; }

.rc-slider-dot-active { border-color: rgb(150, 219, 250); }

.rc-slider-dot-reverse { margin-right: -4px; }

.rc-slider-disabled { background-color: rgb(233, 233, 233); }

.rc-slider-disabled .rc-slider-track { background-color: rgb(204, 204, 204)=
; }

.rc-slider-disabled .rc-slider-handle, .rc-slider-disabled .rc-slider-dot {=
 border-color: rgb(204, 204, 204); box-shadow: none; background-color: rgb(=
255, 255, 255); cursor: not-allowed; }

.rc-slider-disabled .rc-slider-mark-text, .rc-slider-disabled .rc-slider-do=
t { cursor: not-allowed !important; }

.rc-slider-vertical { width: 14px; height: 100%; padding: 0px 5px; }

.rc-slider-vertical .rc-slider-rail { height: 100%; width: 4px; }

.rc-slider-vertical .rc-slider-track { left: 5px; bottom: 0px; width: 4px; =
}

.rc-slider-vertical .rc-slider-handle { margin-left: -5px; touch-action: pa=
n-y; }

.rc-slider-vertical .rc-slider-mark { top: 0px; left: 18px; height: 100%; }

.rc-slider-vertical .rc-slider-step { height: 100%; width: 4px; }

.rc-slider-vertical .rc-slider-dot { left: 2px; margin-bottom: -4px; }

.rc-slider-vertical .rc-slider-dot:first-child { margin-bottom: -4px; }

.rc-slider-vertical .rc-slider-dot:last-child { margin-bottom: -4px; }

.rc-slider-tooltip-zoom-down-enter, .rc-slider-tooltip-zoom-down-appear, .r=
c-slider-tooltip-zoom-down-leave { animation-duration: 0.3s; animation-fill=
-mode: both; animation-play-state: paused; display: block !important; }

.rc-slider-tooltip-zoom-down-enter.rc-slider-tooltip-zoom-down-enter-active=
, .rc-slider-tooltip-zoom-down-appear.rc-slider-tooltip-zoom-down-appear-ac=
tive { animation-name: rcSliderTooltipZoomDownIn; animation-play-state: run=
ning; }

.rc-slider-tooltip-zoom-down-leave.rc-slider-tooltip-zoom-down-leave-active=
 { animation-name: rcSliderTooltipZoomDownOut; animation-play-state: runnin=
g; }

.rc-slider-tooltip-zoom-down-enter, .rc-slider-tooltip-zoom-down-appear { t=
ransform: scale(0); animation-timing-function: cubic-bezier(0.23, 1, 0.32, =
1); }

.rc-slider-tooltip-zoom-down-leave { animation-timing-function: cubic-bezie=
r(0.755, 0.05, 0.855, 0.06); }

@keyframes rcSliderTooltipZoomDownIn {=20
  0% { opacity: 0; transform-origin: 50% 100%; transform: scale(0); }
  100% { transform-origin: 50% 100%; transform: scale(1); }
}

@keyframes rcSliderTooltipZoomDownOut {=20
  0% { transform-origin: 50% 100%; transform: scale(1); }
  100% { opacity: 0; transform-origin: 50% 100%; transform: scale(0); }
}

.rc-slider-tooltip { position: absolute; left: -9999px; top: -9999px; visib=
ility: visible; box-sizing: border-box; -webkit-tap-highlight-color: rgba(0=
, 0, 0, 0); }

.rc-slider-tooltip * { box-sizing: border-box; -webkit-tap-highlight-color:=
 rgba(0, 0, 0, 0); }

.rc-slider-tooltip-hidden { display: none; }

.rc-slider-tooltip-placement-top { padding: 4px 0px 8px; }

.rc-slider-tooltip-inner { padding: 6px 2px; min-width: 24px; height: 24px;=
 font-size: 12px; line-height: 1; color: rgb(255, 255, 255); text-align: ce=
nter; text-decoration: none; background-color: rgb(108, 108, 108); border-r=
adius: 6px; box-shadow: rgb(217, 217, 217) 0px 0px 4px; }

.rc-slider-tooltip-arrow { position: absolute; width: 0px; height: 0px; bor=
der-color: transparent; border-style: solid; }

.rc-slider-tooltip-placement-top .rc-slider-tooltip-arrow { bottom: 4px; le=
ft: 50%; margin-left: -4px; border-width: 4px 4px 0px; border-top-color: rg=
b(108, 108, 108); }

.rc-tooltip.rc-tooltip-zoom-appear, .rc-tooltip.rc-tooltip-zoom-enter { opa=
city: 0; }

.rc-tooltip.rc-tooltip-zoom-enter, .rc-tooltip.rc-tooltip-zoom-leave { disp=
lay: block; }

.rc-tooltip-zoom-enter, .rc-tooltip-zoom-appear { opacity: 0; animation-dur=
ation: 0.3s; animation-fill-mode: both; animation-timing-function: cubic-be=
zier(0.18, 0.89, 0.32, 1.28); animation-play-state: paused; }

.rc-tooltip-zoom-leave { animation-duration: 0.3s; animation-fill-mode: bot=
h; animation-timing-function: cubic-bezier(0.6, -0.3, 0.74, 0.05); animatio=
n-play-state: paused; }

.rc-tooltip-zoom-enter.rc-tooltip-zoom-enter-active, .rc-tooltip-zoom-appea=
r.rc-tooltip-zoom-appear-active { animation-name: rcToolTipZoomIn; animatio=
n-play-state: running; }

.rc-tooltip-zoom-leave.rc-tooltip-zoom-leave-active { animation-name: rcToo=
lTipZoomOut; animation-play-state: running; }

@keyframes rcToolTipZoomIn {=20
  0% { opacity: 0; transform-origin: 50% 50%; transform: scale(0); }
  100% { opacity: 1; transform-origin: 50% 50%; transform: scale(1); }
}

@keyframes rcToolTipZoomOut {=20
  0% { opacity: 1; transform-origin: 50% 50%; transform: scale(1); }
  100% { opacity: 0; transform-origin: 50% 50%; transform: scale(0); }
}

.rc-tooltip { position: absolute; z-index: 1070; display: block; visibility=
: visible; font-size: 12px; line-height: 1.5; opacity: 0.9; }

.rc-tooltip-hidden { display: none; }

.rc-tooltip-placement-top, .rc-tooltip-placement-topLeft, .rc-tooltip-place=
ment-topRight { padding: 5px 0px 9px; }

.rc-tooltip-placement-right, .rc-tooltip-placement-rightTop, .rc-tooltip-pl=
acement-rightBottom { padding: 0px 5px 0px 9px; }

.rc-tooltip-placement-bottom, .rc-tooltip-placement-bottomLeft, .rc-tooltip=
-placement-bottomRight { padding: 9px 0px 5px; }

.rc-tooltip-placement-left, .rc-tooltip-placement-leftTop, .rc-tooltip-plac=
ement-leftBottom { padding: 0px 9px 0px 5px; }

.rc-tooltip-inner { padding: 8px 10px; color: rgb(255, 255, 255); text-alig=
n: left; text-decoration: none; background-color: rgb(55, 55, 55); border-r=
adius: 6px; box-shadow: rgba(0, 0, 0, 0.17) 0px 0px 4px; min-height: 34px; =
}

.rc-tooltip-arrow { position: absolute; width: 0px; height: 0px; border-col=
or: transparent; border-style: solid; }

.rc-tooltip-placement-top .rc-tooltip-arrow, .rc-tooltip-placement-topLeft =
.rc-tooltip-arrow, .rc-tooltip-placement-topRight .rc-tooltip-arrow { botto=
m: 4px; margin-left: -5px; border-width: 5px 5px 0px; border-top-color: rgb=
(55, 55, 55); }

.rc-tooltip-placement-top .rc-tooltip-arrow { left: 50%; }

.rc-tooltip-placement-topLeft .rc-tooltip-arrow { left: 15%; }

.rc-tooltip-placement-topRight .rc-tooltip-arrow { right: 15%; }

.rc-tooltip-placement-right .rc-tooltip-arrow, .rc-tooltip-placement-rightT=
op .rc-tooltip-arrow, .rc-tooltip-placement-rightBottom .rc-tooltip-arrow {=
 left: 4px; margin-top: -5px; border-width: 5px 5px 5px 0px; border-right-c=
olor: rgb(55, 55, 55); }

.rc-tooltip-placement-right .rc-tooltip-arrow { top: 50%; }

.rc-tooltip-placement-rightTop .rc-tooltip-arrow { top: 15%; margin-top: 0p=
x; }

.rc-tooltip-placement-rightBottom .rc-tooltip-arrow { bottom: 15%; }

.rc-tooltip-placement-left .rc-tooltip-arrow, .rc-tooltip-placement-leftTop=
 .rc-tooltip-arrow, .rc-tooltip-placement-leftBottom .rc-tooltip-arrow { ri=
ght: 4px; margin-top: -5px; border-width: 5px 0px 5px 5px; border-left-colo=
r: rgb(55, 55, 55); }

.rc-tooltip-placement-left .rc-tooltip-arrow { top: 50%; }

.rc-tooltip-placement-leftTop .rc-tooltip-arrow { top: 15%; margin-top: 0px=
; }

.rc-tooltip-placement-leftBottom .rc-tooltip-arrow { bottom: 15%; }

.rc-tooltip-placement-bottom .rc-tooltip-arrow, .rc-tooltip-placement-botto=
mLeft .rc-tooltip-arrow, .rc-tooltip-placement-bottomRight .rc-tooltip-arro=
w { top: 4px; margin-left: -5px; border-width: 0px 5px 5px; border-bottom-c=
olor: rgb(55, 55, 55); }

.rc-tooltip-placement-bottom .rc-tooltip-arrow { left: 50%; }

.rc-tooltip-placement-bottomLeft .rc-tooltip-arrow { left: 15%; }

.rc-tooltip-placement-bottomRight .rc-tooltip-arrow { right: 15%; }
------MultipartBoundary--PgNM4SiMWaLkxzj6oY7Q8DPIEjAagNM0CL6X4tuFha----
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: https://platform.openai.com/static/Dl0ATMOy-l.css

@charset "utf-8";

.tbl { border-collapse: collapse; }

.tbl th:first-child, .tbl td:first-child { padding-left: 0px; }

.tbl th:last-child, .tbl td:last-child { padding-right: 0px; }

.tbl th { border: none; color: var(--text-default); font-weight: 500; font-=
size: 12px; line-height: 16px; letter-spacing: 0.05em; text-transform: uppe=
rcase; text-align: left; padding: 6px 8px; }

.tbl td { border-right: none; border-bottom: none; border-left: none; borde=
r-image: initial; vertical-align: top; padding: 16px 8px; color: var(--text=
-default); border-top: 1px solid var(--gray-100) !important; }

.tbl td.align-center, .tbl th.align-center { text-align: center; }

.tbl td.align-right, .tbl th.align-right { text-align: right; }

.tbl-compact td { padding: 8px; }
------MultipartBoundary--PgNM4SiMWaLkxzj6oY7Q8DPIEjAagNM0CL6X4tuFha----
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: https://platform.openai.com/static/BlOpu6IRE9.css

@charset "utf-8";

.file-manager-v2-drop-area { display: flex; flex-direction: column; gap: 8p=
x; height: 100%; }

.file-manager-table-empty-text { display: flex; align-items: center; justif=
y-content: center; height: 80px; width: 100%; color: var(--text-secondary);=
 font-size: 14px; font-weight: 400; line-height: 20px; }

.file-manager-header-subtext { font-family: var(--monospace); font-size: 13=
px; color: var(--text-secondary); font-weight: 400; }

.file-manager-modal-footer { border-top: 1px solid var(--gray-100); padding=
-top: 24px; display: flex; justify-content: space-between; flex-direction: =
row-reverse; }

.file-manager-modal-footer .file-manager-modal-footer-button-wrapper { disp=
lay: flex; }

.table-wrapper { overflow-y: auto; pointer-events: all; }

.drop-content { position: relative; z-index: 10; pointer-events: none; }

.drop-content button, .drop-content a { pointer-events: all; }

.file-manager-modal-body { display: flex; flex-direction: column; justify-c=
ontent: space-between; gap: 8px; height: 420px; }

.file-manager-v2-wrapper { flex-grow: 1; overflow: hidden; flex-shrink: 1; =
display: flex; flex-direction: column; gap: 8px; }

.no-files-wrapper { display: flex; flex-direction: column; align-items: cen=
ter; justify-content: center; height: 100%; gap: 8px; padding: 35px; }

.no-files-wrapper .no-files-title { font-size: 16px; font-weight: 500; }

.no-files-wrapper .inline-button { font-size: 16px; padding-left: 0px; }

.no-files-wrapper .no-files-description { font-size: 14px; color: var(--tex=
t-secondary); text-align: center; }

.modal-body .file-table .name-span { word-break: break-all; overflow: hidde=
n; white-space: nowrap; text-overflow: ellipsis; display: block; }

.file-table { width: 100%; font-size: 14px; }

.file-table td { padding: 4px 0px !important; vertical-align: middle !impor=
tant; }

.file-table th:first-child, .file-table td:first-child { width: auto; }

.file-table td:last-child { padding-right: 4px !important; }

.file-table .name-wrapper { display: flex; align-items: center; gap: 4px; }

.file-table .file-name-wrapper { display: flex; max-width: 220px; margin-ri=
ght: 12px; }

.file-table .name-span { width: 100%; overflow: hidden; white-space: nowrap=
; text-overflow: ellipsis; }

.file-table .size-wrapper { display: flex; align-items: center; text-align:=
 right; justify-content: end; text-wrap: nowrap; padding-right: 0px; margin=
-right: 12px; }

.file-table .uploaded-header { text-align: left; padding-left: 0px; }

.file-table .uploaded-wrapper { display: flex; justify-content: space-betwe=
en; align-items: center; }

.file-table .uploaded-cell { text-wrap: nowrap; }

.file-table .size-cell { width: 70px; }

.inline-button { font-weight: 500; box-shadow: none !important; }

.inline-button:hover, .inline-button:focus-visible, .inline-button:active, =
.inline-button[aria-expanded=3D"true"] { background-color: transparent !imp=
ortant; }

.inline-button .btn-label-inner { padding-bottom: 0px; }

.number-input { display: inline-block; vertical-align: top; margin: 0px; fo=
nt-family: var(--sans-serif); font-weight: 400; line-height: 1.4; color: va=
r(--text-default); background-color: transparent; background-clip: padding-=
box; box-sizing: border-box; border: 1px solid var(--gray-200); border-radi=
us: 8px; transition: border-color 0.15s ease-in-out, box-shadow 0.15s ease-=
in-out; }

.number-input::placeholder { color: var(--text-disabled); }

.number-input.number-input-error { border-color: var(--red-500); }

.number-input:focus { border-color: var(--input-border-focus); box-shadow: =
var(--input-focus-ring); outline: 0px; }

.number-input:focus-visible { box-shadow: var(--input-focus-ring); }

.number-input-sm { font-size: 14px; padding: 6px 12px; line-height: 18px; }

.number-input-md { font-size: 17px; padding: 5px 10px; line-height: 24px; }

.number-input-lg { font-size: 16px; padding: 10px 14px; line-height: 24px; =
}

.number-input[disabled] { background-color: var(--disabled-input); color: v=
ar(--text-disabled); }

.number-input[disabled]::placeholder { color: var(--text-disabled); }

.number-input-full { display: block; width: 100%; }

.number-input-with-custom-placeholder { position: relative; }

.number-input-with-custom-placeholder .number-input-custom-placeholder { po=
sition: absolute; top: 0px; left: 0px; color: var(--gray-500); pointer-even=
ts: none; }

.number-input-with-header.disabled .number-input-header-wrapper, .number-in=
put-with-header.disabled .number-input { background-color: var(--gray-100);=
 }

.number-input-with-header .subheading { position: absolute; padding: 22px 1=
6px 12px; }

.number-input-with-header .number-input-header-wrapper { padding-top: 50px;=
 width: 100%; }

.number-input-with-header .number-input-header-wrapper::placeholder { color=
: var(--text-disabled); }

.number-input-with-header .number-input-header-wrapper .number-input-header=
-buffer { height: 100%; width: 100%; overflow: auto; border: none; padding:=
 0px 14px 10px; }

.number-input-adorned { display: flex; align-items: stretch; }

.number-input-adorned .number-input-adornment { background: var(--gray-100)=
; color: var(--gray-700); border: 1px solid var(--input-border); flex: 0 0 =
auto; line-height: 1; display: flex; align-items: center; padding: 0px 10px=
; }

.number-input-adorned .number-input-left-adornment { border-top-left-radius=
: 8px; border-bottom-left-radius: 8px; border-right: none; }

.number-input-adorned .number-input:not(:first-child) { border-top-left-rad=
ius: 0px; border-bottom-left-radius: 0px; }

.vector-store-used-by-table { width: 100%; font-size: 12px; }

.vector-store-used-by-table th { font-size: 12px; line-height: 16px; text-t=
ransform: none !important; color: rgb(168, 168, 168) !important; font-weigh=
t: 600 !important; letter-spacing: normal !important; border-bottom: 1px so=
lid var(--gray-100) !important; }

.vector-store-used-by-table td { padding: 4px 6px; }

.vector-store-used-by-table th:first-child, .vector-store-used-by-table td:=
first-child { width: auto; }

.vector-store-field-id { margin: 0px; }

.vector-store-title-wrapper { display: flex; align-items: center; }

.vector-store-detail-expiration-value-wrapper { display: flex; align-items:=
 center; gap: 4px; }

.edit-vector-store-expiration-modal-body { display: flex; flex-direction: c=
olumn; gap: 16px; }

.vector-store-expiration-last-active-input { display: inline-flex; align-it=
ems: center; gap: 8px; margin-top: -8px; }

.vector-store-expiration-number-input { width: 75px; }

.vector-store-expiration-error { color: var(--red-500); font-size: 12px; }

.vector-store-title-header-wrapper { display: flex; align-items: center; ga=
p: 8px; }

.editable-vector-store-title { display: flex; gap: 4px; align-items: center=
; }

.editable-vector-store-title.editing { gap: 8px; }

.vector-store-section { margin-top: 24px; }

.vector-store-section-header { font-size: 16px; display: flex; align-items:=
 center; justify-content: space-between; }

.vector-store-files-wrapper { display: flex; flex-direction: column; align-=
items: center; width: 100%; max-height: 400px; overflow-y: auto; }

.vector-store-files-wrapper .table-wrapper { width: 100%; }

.vector-store-detail-field-container { min-width: 150px; }
------MultipartBoundary--PgNM4SiMWaLkxzj6oY7Q8DPIEjAagNM0CL6X4tuFha----
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: https://platform.openai.com/static/fih_D3fOGc.css

@charset "utf-8";

.pg-root { position: relative; display: flex; flex-direction: row; align-it=
ems: stretch; height: 100%; }

.pg-root .completions { height: 100%; flex: 1 1 0%; min-height: 0px; }

.pg-root .editor-container { background-color: var(--bg-color); }

.pg-root .editor-container.disabled { background-color: var(--gray-50); }

.pg-root .editor-wrapper { height: 100%; box-sizing: border-box; }

.pg-main { display: flex; flex-direction: column; align-items: stretch; fle=
x: 1 1 auto; }

.pg-header { flex: 0 0 auto; border-bottom: 1px solid var(--divider); paddi=
ng: 12px 24px; height: 60px; display: grid; grid-template-columns: 1fr auto=
 auto; align-items: center; }

.pg-header-section { display: flex; align-items: baseline; margin-bottom: 8=
px; }

.pg-header-title { display: flex; align-items: center; }

.pg-page-title { font-size: 20px; line-height: 1.2; margin: 0px; }

.pg-header-section-settings { display: inline-block; margin-left: 8px; vert=
ical-align: middle; }

@media (min-width: 1000px) {
  .pg-header-section-settings { display: none; }
}

.pg-header-actions { margin-bottom: 0px; display: inline-block; vertical-al=
ign: middle; }

.pg-header-actions .btn:not(.btn-full) + .btn { margin-left: 8px; vertical-=
align: middle; }

.pg-action-menu { padding: 4px 0px; }

.pg-action-delete-preset:not(.menu-item-disabled) { color: var(--red-500); =
}

.pg-preset-select-container { width: 250px; margin-right: 8px; }

.pg-preset-select-empty { font-size: 14px; padding: 8px 0px; }

.pg-preset-select-empty-browse { margin-top: 8px; display: flex; align-item=
s: center; justify-content: center; gap: 4px; color: var(--gray-800); font-=
weight: 600; }

.pg-preset-select-empty-browse svg { margin-top: -1px; color: var(--primary=
); font-size: 16px; }

.pg-preset-select-empty-browse:hover { color: var(--gray-600); }

.pg-preset-select-empty-browse:hover svg { color: var(--primary-500); }

.pg-body { flex: 1 1 auto; display: flex; flex-direction: row; align-items:=
 stretch; min-height: 0px; }

.pg-editor { padding: 24px 0px 24px 24px; flex: 1 1 auto; display: flex; fl=
ex-flow: column; }

.pg-right { position: relative; }

.pg-right-content { position: absolute; inset: 0px; padding-top: 24px; over=
flow: auto; }

.pg-right-content .parameter-panel-grid { display: grid; grid-template-colu=
mns: 100%; gap: 16px; }

.pg-right-content .stop-sequence-container { margin: 0px; width: 100%; }

.parameter-panel.disabled { opacity: 0.5; pointer-events: none; filter: gra=
yscale(100%); cursor: not-allowed; }

.pg-right-panel-mobile-close { display: none; font-size: 28px; font-weight:=
 400; color: var(--text-default); border: none; background: transparent; ou=
tline: none; padding: 2px; cursor: pointer; position: absolute; top: 5px; r=
ight: 10px; }

.pg-right-panel-mask { opacity: 0; pointer-events: none; position: absolute=
; z-index: 1; inset: 0px; background: var(--gray-800); transition: opacity =
0.3s; }

.pg-data-privacy-notice { line-height: 1.4; font-size: 13px; margin-top: 10=
px; }

.pg-data-privacy-notice .icon-indent-icon { margin-top: 1px; margin-left: 0=
px; padding-right: 10px; }

.pg-mode-switch label { flex: 1 1 0%; line-height: 0; padding: 6px 0px; }

.pg-submit-btn { flex: 0 0 auto; }

.pg-footer-left { display: flex; align-items: center; flex: 0 0 auto; }

.pg-footer-right { display: flex; align-items: center; justify-content: fle=
x-end; flex: 1 1 auto; }

.pg-cf-manage { display: flex; align-items: center; color: var(--primary); =
cursor: pointer; }

.pg-cf-manage svg { font-size: 18px; margin: -3px 6px 0px 0px; }

.pg-language-syntax-select { margin-left: 1em; }

.pg-probs-popover { width: 300px; border: 1px solid var(--gray-100); box-sh=
adow: rgba(0, 0, 0, 0.16) 0px 0px 15px; z-index: 1; padding: 1em 0px; backg=
round-color: var(--elevated); border-radius: 8px; }

.pg-probs-header { padding: 1em 1em 0px; }

.pg-probs-header:only-child { padding-top: 0px; }

.pg-probs-header .top10 { font-size: 12px; }

.pg-probs-content { padding: 0px 1em; font-size: 13px; color: var(--text-de=
fault); }

.pg-probs-window { background: var(--elevated); }

.pg-probs-window ul { padding: 0px; margin: 0px; }

.pg-probs-window ul li { display: block; padding: 0.2em 1em; }

.pg-probs-window ul li.highlighted { color: rgb(255, 255, 255); background-=
color: var(--red-600); }

.control-label { margin-bottom: 8px; }

.control-label.control-disabled { color: var(--gray-600); }

.control-note { font-size: 12px; color: var(--text-secondary); margin-top: =
2px; line-height: 1; }

@media (max-width: 999px) {
  .pg-editor { padding-right: 24px; }
  .pg-right { position: fixed; z-index: 9999; inset: 0px; pointer-events: n=
one; }
  .pg-right .parameter-panel { padding: 24px; }
  .pg-right .scroll-shadow { display: none !important; }
  .pg-visible-mobile .pg-right-panel-mask { pointer-events: all; opacity: 0=
.7; }
  .pg-right-content { z-index: 2; left: auto; width: 230px; background: var=
(--bg-color); transition: transform 0.3s; transform: translate(100%); paddi=
ng-top: 2em; }
  .pg-visible-mobile .pg-right-content { transform: translate(0px); pointer=
-events: all; }
  .pg-right-panel-mobile-close { display: block; }
  .pg-footer-right { justify-content: flex-start; padding-left: 1em; }
}

@media (min-width: 1000px) {
  .pg-right { width: 240px; flex: 0 0 auto; }
  .pg-right .parameter-panel { padding: 0px 24px 24px; }
  .pg-advanced-toggle, .pg-right-panel-mask { display: none; }
}

.complete-legacy-btn { margin-left: 10px; white-space: nowrap; background-c=
olor: var(--bg-color); color: var(--text-default); padding: 5px 8px 4px; }

.legacy-completions-playground.pg-alert { padding: 14px 20px 12px; }

.legacy-completions-playground.pg-alert .pg-alert-body { align-items: cente=
r; }

@media (max-width: 1000px) {
  .pg-editor { padding: 0px; }
  .pg-editor .completions-container { border: none; }
  .pg-editor .completions-container:focus-within { border: none; }
  .pg-header { padding: 1em 1em 8px; display: flex; align-items: flex-start=
; flex-wrap: wrap; height: auto; border-bottom: 1px solid var(--gray-100); =
}
  .pg-header-actions { flex-grow: 1; }
  .pg-header-title { width: 100%; }
  .pg-preset-select-container { width: auto; flex-grow: 1; max-width: 320px=
; }
  .chat-pg-message .text-input-with-focus { border: 1px solid var(--gray-10=
0); border-radius: 8px; padding: 8px 12px 12px; }
  .chat-pg-message .text-input-with-focus:focus-within { box-shadow: var(--=
input-focus-ring); border: 1px solid var(--input-border-focus); }
  .chat-pg-message .text-input { outline: none !important; box-shadow: none=
 !important; border: 1px solid transparent !important; }
  .chat-pg-message:active { border-radius: 0px; }
}

@media (max-width: 500px) {
  .pg-header { row-gap: 8px; }
  .pg-preset-select-container { width: 100%; max-width: none; margin-right:=
 0px; }
  .pg-header-actions { flex-grow: 1; align-items: flex-start; display: flex=
; }
  .chat-pg-footer { border-top: 1px solid var(--gray-100); }
  .chat-pg-exchange-container .chat-pg-message:not(.add-message) { padding:=
 4px 16px 16px; }
}

@media (max-width: 350px) {
  .pg-header-section-settings { display: none; }
}

@media (max-height: 550px) {
  .pg-header { padding-top: 10px; }
}

.pg-cf-alert.pg-alert button.btn-outlined { background: rgb(255, 255, 255);=
 font-size: 16px; color: rgb(5, 5, 5); padding: 8px 16px 7px; margin: -8px =
0px; }

.pg-cf-alert.pg-alert button.btn-outlined:hover { background: var(--gray-50=
); }

.pg-cf-alert.pg-alert button.btn-outlined:active { background: var(--gray-1=
00); }

@media (max-width: 600px) {
  .pg-cf-alert .pg-alert-exp-body.expanded { max-height: 400px; }
}

.pg-cf-fake-link { color: var(--primary); cursor: pointer; }

.pg-alert { display: flex; align-items: center; white-space: pre-line; colo=
r: var(--text-default); font-size: 16px; line-height: 24px; padding: 20px 2=
0px 18px; max-height: 100%; overflow: auto; position: relative; z-index: 2;=
 }

.pg-alert.danger { background-color: var(--pill-danger-bg); }

.pg-alert.danger .pg-alert-color { color: var(--pill-danger-text); }

.pg-alert.warn { background-color: var(--pill-warning-bg); }

.pg-alert.warn .pg-alert-color { color: var(--pill-warning-text); }

.pg-alert.note { background-color: var(--elevated); color: var(--text-defau=
lt); }

.pg-alert.note .pg-alert-icon { color: var(--text-default); }

.pg-alert.disabled { background-color: var(--gray-100); }

.pg-alert p:first-child { margin-top: 0px; }

.pg-alert p:last-child { margin-bottom: 0px; }

@media (max-width: 600px) {
  .pg-alert { padding: 16px 16px 14px; }
}

.pg-alert-body { flex: 1 1 auto; display: flex; align-items: flex-start; ma=
x-height: 100%; }

.pg-alert-icon { display: flex; flex: 0 0 auto; margin-right: 12px; }

.pg-alert-icon > span, .pg-alert-icon > div { display: flex; }

.pg-alert-icon svg { margin-top: 0px; height: 22px; width: 22px; }

.pg-alert-message { flex: 1 1 auto; }

.pg-alert-actions { flex: 0 0 auto; display: flex; align-items: center; mar=
gin-left: 12px; }

.pg-alert-dismiss { display: flex; align-items: center; margin-left: 12px; =
padding: 2px; color: var(--text-default); cursor: pointer; transition: colo=
r 0.3s; }

.pg-alert-dismiss:hover { color: var(--gray-800); }

.pg-alert-dismiss:focus-visible { outline: none; box-shadow: var(--input-fo=
cus-ring); }

.pg-alert-exp-title { font-weight: 700; color: var(--gray-900); display: bl=
ock; cursor: pointer; }

.pg-alert-exp-title svg { color: var(--text-default); margin: 0px; position=
: relative; left: 8px; top: 3px; }

.pg-alert-exp-body { overflow: hidden; max-height: 0px; transition: max-hei=
ght 0.2s; }

.pg-alert-exp-body.expanded { max-height: 200px; }

.pg-alert-fill-transform-beta { box-shadow: rgb(236, 236, 241) 0px -1px; }

.pg-content-body { flex: 1 1 0%; overflow: auto; }

.pg-content-body > div { height: 100%; }

.pg-content-footer { position: relative; margin-top: 1em; display: flex; al=
ign-items: center; }
------MultipartBoundary--PgNM4SiMWaLkxzj6oY7Q8DPIEjAagNM0CL6X4tuFha----
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: https://platform.openai.com/static/BefcMRU_eu.css

@charset "utf-8";

.vector-store-modal-header { margin-right: 20px !important; }

.vector-store-modal-interactive-header { display: flex; align-items: center=
; justify-content: space-between; }

.vector-store-modal-edit-name-section { display: flex; gap: 8px; align-item=
s: center; margin-right: 8px; }

.vector-store-search-found-button-wrapper { width: 70%; }

.vector-store-search-found-button-wrapper .btn-label-inner { width: 100%; }

.vector-store-search-found-button { color: var(--text-primary); width: 100%=
; }

.vector-store-search-found-button .vector-store-name { font-size: 14px; fon=
t-weight: 500; line-height: 20px; margin-bottom: 4px; white-space: nowrap; =
overflow: hidden; text-overflow: ellipsis; }

.vector-store-search-found-button .vector-store-name-section { display: fle=
x; align-items: center; justify-content: space-between; }

.vector-store-search-found-button .vector-store-info { display: flex; align=
-items: center; justify-content: space-between; color: var(--text-secondary=
); font-size: 12px; font-weight: 400; line-height: 16px; }

.vector-store-modal-details-fields { font-size: 13px; gap: 4px; }

.vector-store-modal-details { font-size: 13px; }

.search-vector-store-modal-body { display: flex; flex-direction: column; al=
ign-items: center; height: 350px; justify-content: center; gap: 10px; }

.search-vector-store-modal-body .text-input-adorned { width: 70%; }

.search-vector-store-modal-body .vector-stores-link { display: flex; align-=
items: center; font-size: 14px; font-style: normal; font-weight: 400; line-=
height: 20px; }

.search-vector-store-title { color: var(--text-primary); font-size: 16px; f=
ont-weight: 500; line-height: 20px; }

.vector-store-search-error-message { color: var(--text-secondary); text-ali=
gn: center; font-size: 14px; font-weight: 400; line-height: 20px; }

.assistant-code-interpreter-file-list { margin-bottom: 8px; }

.file-row-compact { display: flex; align-items: center; justify-content: sp=
ace-between; margin-bottom: 12px; font-size: 12px; }

.file-row-compact-action { display: flex; align-items: center; gap: 4px; pa=
dding: 1px 6px; line-height: 1.5; margin-left: -2px; color: var(--text-defa=
ult); font-weight: 400; border-radius: 8px; background: none; border: 0px; =
cursor: pointer; transition: background-color 0.15s; }

.file-row-compact-action:hover { background-color: var(--gray-100); }

.file-row-compact-remove { padding: 4px; opacity: 0; transition: opacity 0.=
15s, background-color 0.15s; }

.file-row-compact:hover .file-row-compact-remove, .file-row-compact-remove:=
focus-visible { opacity: 1; }
------MultipartBoundary--PgNM4SiMWaLkxzj6oY7Q8DPIEjAagNM0CL6X4tuFha----
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: https://platform.openai.com/static/DqyyrKcaOP.css

@charset "utf-8";

.markdown-content p { margin-top: 0px; margin-bottom: 15px; line-height: 1.=
5; }

.markdown-content .code-sample { margin: 24px 0px; }

.markdown-content ol, .markdown-content ul { padding-left: 0px; list-style:=
 none; }

.markdown-content ol { counter-reset: ordered-listitem 0; }

.markdown-content ol ol, .markdown-content ol ul, .markdown-content ul ol, =
.markdown-content ul ul { margin-top: 8px; margin-bottom: 0px; }

.markdown-content li { padding-left: 32px; position: relative; line-height:=
 1.4; }

.markdown-content li + li { margin-top: 8px; }

.markdown-content ul li::before { content: ""; position: absolute; width: 5=
px; height: 5px; left: 15px; top: 8px; border-radius: 50%; background: var(=
--gray-800); }

.markdown-content .md-nonanchor-heading { position: relative; }

.markdown-content h1.md-nonanchor-heading { font-size: 18px; line-height: 1=
.5; }

.markdown-content h2.md-nonanchor-heading { font-size: 16px; line-height: 1=
.5; }

.markdown-content h3.md-nonanchor-heading { font-size: 14px; line-height: 1=
.5; }

.markdown-content h4.md-nonanchor-heading, .markdown-content h5.md-nonancho=
r-heading, .markdown-content h6.md-nonanchor-heading { font-size: 12px; lin=
e-height: 1.5; }

.markdown-content .md-heading-num, .markdown-content ol > li::after { backg=
round: var(--gray-100); color: var(--gray-600); font-size: 12px; padding-to=
p: 1px; line-height: 19px; font-weight: 400; text-align: center; height: 20=
px; width: 20px; border-radius: 20px; }

@media (min-width: 768px) {
  .markdown-content .md-heading-num { position: absolute; top: 50%; transfo=
rm: translateY(-50%); left: -32px; }
}

@media (max-width: 767px) {
  .markdown-content .md-heading-num { display: inline-block; vertical-align=
: top; margin-right: 10px; }
  .markdown-content h2 .md-heading-num { margin-top: 6px; }
}

.markdown-content ol > li::after { position: absolute; top: 0px; left: 0px;=
 counter-increment: ordered-listitem 1; content: counter(ordered-listitem);=
 }

.markdown-content li > p { margin: 0px; }

.markdown-content li > p + p { margin-top: 15px; }

.markdown-content hr { border: none; width: 100%; margin-bottom: 40px; heig=
ht: 0px; }

.markdown-content blockquote { background: var(--gray-100); color: var(--gr=
ay-700); padding: 0.8em; margin: 0px 0px 15px; }

.markdown-content blockquote p:last-child { margin: 0px; }

.markdown-content.markdown-prompt-blockquote blockquote { background-color:=
 var(--gray-50); color: var(--gray-800); border-radius: 4px; margin: 0px 0p=
x 15px; padding: 12px 16px; font-family: var(--monospace); font-size: 15px;=
 line-height: 24px; white-space: pre-wrap; }

.markdown-content.markdown-prompt-blockquote blockquote a, .markdown-conten=
t.markdown-prompt-blockquote blockquote a:visited { color: var(--gray-800);=
 }

.markdown-content.markdown-prompt-blockquote blockquote strong { background=
-color: var(--pill-success-bg); font-weight: 400; }

.markdown-content.markdown-prompt-blockquote blockquote p { margin: 0px; }

.markdown-content p a, .markdown-content li a { text-decoration: none; }

.markdown-content table:not(.ignore-md-styles) { border-collapse: collapse;=
 margin: 20px 0px 15px; }

.markdown-content table:not(.ignore-md-styles) th:first-child, .markdown-co=
ntent table:not(.ignore-md-styles) td:first-child { padding-left: 0px; }

.markdown-content table:not(.ignore-md-styles) th:last-child, .markdown-con=
tent table:not(.ignore-md-styles) td:last-child { padding-right: 0px; }

.markdown-content table:not(.ignore-md-styles) th { border: none; color: va=
r(--gray-900); font-weight: 700; font-size: 12px; line-height: 16px; letter=
-spacing: 0.1em; text-transform: uppercase; text-align: left; vertical-alig=
n: bottom; padding: 0px 8px 3px; }

.markdown-content table:not(.ignore-md-styles) td { border-right: none; bor=
der-bottom: none; border-left: none; border-image: initial; border-top: 1px=
 solid var(--gray-100); vertical-align: top; padding: 8px; }

.markdown-content img { max-width: 100%; }

.markdown-content picture img { height: auto; }
------MultipartBoundary--PgNM4SiMWaLkxzj6oY7Q8DPIEjAagNM0CL6X4tuFha----
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: https://platform.openai.com/static/D8hJLtCru3.css

@charset "utf-8";

.keyboard-shortcut { display: inline-flex; align-items: center; margin-left=
: 3px; }

.keyboard-shortcut.minimal { border-radius: 4px; border: 1px solid rgba(255=
, 255, 255, 0.1); background: rgba(255, 255, 255, 0.1); }

.keyboard-shortcut-key { min-height: 16px; min-width: 16px; font-size: 12px=
; line-height: 14px; border-radius: 3px; text-align: center; padding: 2px 2=
px 0px; }

.minimal > .keyboard-shortcut-key { margin-left: 0px; }

.dark > .keyboard-shortcut-key { background: var(--gray-700); color: var(--=
gray-100); }

.light > .keyboard-shortcut-key { background: var(--gray-100); color: var(-=
-gray-600); }

.keyboard-shortcut-key:first-child { margin-left: 0px; }
------MultipartBoundary--PgNM4SiMWaLkxzj6oY7Q8DPIEjAagNM0CL6X4tuFha----
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: https://platform.openai.com/static/CkLNg_KT7M.css

@charset "utf-8";

.assistants-playground-button-section { display: flex; align-items: center;=
 }

.assistants-playground-button-section .assistants-v2-learn-more-link { font=
-size: 14px; margin-right: 8px; display: flex; align-items: center; gap: 4p=
x; font-weight: 500; }

.assistants-preview-settings-popover { padding: 12px; width: 250px; }

.assistants-preview-settings-header { display: flex; align-items: center; j=
ustify-content: space-between; }

.assistants-preview-settings-header .preview-settings-label { font-size: 14=
px; font-style: normal; font-weight: 500; line-height: 20px; display: flex;=
 align-items: center; gap: 4px; }

.assistants-preview-settings-description { font-size: 14px; font-style: nor=
mal; font-weight: 400; line-height: 20px; }

.pg-editor.pg-assistant { padding: 0px; }

.run-action-popover { padding: 13px; }

.run-action-popover .header { font-weight: 500; }

.run-action-popover textarea { resize: none; font-size: 14px; line-height: =
20px; }

.run-action-popover .section { padding: 0px 0px 12px; }

.run-action-popover .radio-buttons { display: flex; }

.run-action-popover .list-format { display: flex; flex-direction: column; g=
ap: 8px; padding: 8px 0px; }

.streaming-checkbox { font-size: 14px; margin-right: 8px; }

.assistant-playground-container { display: flex; }

.assistant-playground-container .assistants-panel-handle { display: flex; a=
lign-items: center; gap: 6px; }

.assistant-playground-container .assistants-panel-handle .assistants-panel-=
divider { width: 1px; height: 100%; background-color: var(--divider); trans=
ition: background-color 0.15s ease-in-out; }

.assistant-playground-container .assistants-panel-handle .drag { width: 4px=
; height: 32px; border-radius: 4px; background-color: var(--divider); trans=
ition: background-color 0.1s ease-in-out; }

.assistant-playground-container #api--version-permissions-switch label { te=
xt-transform: none; }

.assistant-playground-container .assistants-panel-handle:hover .drag, .assi=
stant-playground-container .assistants-panel-handle:hover .assistants-panel=
-divider { background-color: var(--gray-200); }

.assistant-playground-container .creation-panel { flex: 1 1 0px; position: =
relative; display: flex; flex-flow: column; width: 100%; height: 100%; }

@media (max-width: 1000px) {
  .assistant-playground-container .creation-panel { display: none; }
}

.assistant-playground-container .pg-and-logs { flex: 2 1 0px; flex-flow: ro=
w; display: flex; width: 0px; }

.assistant-playground-container .pg-and-logs .interactive-thread-panel, .as=
sistant-playground-container .pg-and-logs .assistant-log-panel { flex: 1 1 =
0px; margin-left: -20px; }

.assistant-playground-container .pg-and-logs .assistant-log-panel { max-wid=
th: 1000px; }

@media (max-width: 1000px) {
  .assistant-playground-container .pg-and-logs .assistant-log-panel { displ=
ay: none; }
}

.assistant-playground-container .pg-and-logs .assistant-log-panel .assistan=
t-logs { opacity: 1; }

@media (max-width: 1155px) {
  .assistant-playground-container .pg-and-logs .inspect-logs-btn { display:=
 none; }
}

.assistant-playground-container.collapsed-logs .assistant-log-panel { overf=
low-x: hidden; max-width: 0px; }

.assistant-playground-container.collapsed-logs .assistant-log-panel .assist=
ant-logs { opacity: 0; }

.playground-drop-target { height: calc(100% - 62px); width: 100%; display: =
flex; flex-direction: column; }

.drag-active .add-message-section.user-input { border-color: var(--gray-600=
); }

.creation-panel { overflow: auto; }

.creation-header { width: 100%; height: 100%; display: flex; align-items: c=
enter; justify-content: space-between; padding: 8px; }

.creation-header .select-wrapper { height: 100%; display: flex; align-items=
: center; justify-content: center; border-radius: 8px; margin: 0px; padding=
-left: 16px; width: 100%; transition: background-color 0.15s ease-in-out; }

.creation-header .select-wrapper:hover { background-color: var(--gray-100);=
 }

.creation-header .select-wrapper-right { margin-left: 20px; display: flex; =
flex-flow: row; align-items: center; }

.creation-header .select-wrapper-right .ellipsis { padding: 8px; color: var=
(--gray-500); }

.creation-header:focus-visible { border-color: var(--input-border-focus); o=
utline: 0px; }

.interactive-thread-panel { overflow: hidden; display: flex; flex-flow: col=
umn; min-width: 300px; position: relative; }

.interactive-thread-panel .assistants-pg-header { margin-bottom: -8px; }

.interactive-thread-panel .thread-content-container { padding-top: 0px; }

.assistants-pg-header { font-size: 12px; padding: 14px 0px 16px; margin: 0p=
x 24px; display: flex; justify-content: space-between; align-items: center;=
 flex-flow: row; text-wrap: nowrap; }

.assistants-pg-header .thread-title { display: flex; flex-grow: 1; align-it=
ems: center; }

.assistants-pg-header .pg-title { text-transform: uppercase; color: var(--g=
ray-900); line-height: 32px; font-weight: 500; margin-right: 8px; }

.assistants-pg-header .pg-subheader { line-height: 16px; color: var(--text-=
secondary); font-family: var(--monospace); flex: 1 1 0%; text-overflow: ell=
ipsis; overflow: hidden; min-width: 30px; margin-right: 8px; }

.assistants-pg-header .refresh-button { cursor: pointer; font-size: 16px; m=
argin-top: 2px; margin-left: 24px; color: var(--gray-600); margin-right: 8p=
x; }

.assistants-pg-header.collapsed { margin: 0px 0px 0px 12px; }

.assistant-quota-error { position: relative; flex-shrink: 0; margin: 0px 24=
px -12px; border-radius: 12px 12px 0px 0px; z-index: 0 !important; padding-=
bottom: 32px !important; }

.add-message-wrapper { position: relative; z-index: 1; width: 100%; max-wid=
th: 800px; padding: 0px 24px 12px; margin: 0px auto; }

.add-message-wrapper .loading-spinner { margin-left: 8px; }

.add-message-wrapper .radio-button { display: flex; }

.add-message-wrapper .thread-help-text { display: flex; align-items: center=
; justify-content: center; font-weight: 400; line-height: 20px; color: var(=
--text-secondary); font-size: 14px; text-align: center; margin-top: 12px; }

.add-message-wrapper .run-button-wrapper { margin-left: 8px; }

.add-message-section { box-sizing: border-box; cursor: text; transition: op=
acity 0.2s ease-in-out; }

.add-message-section.disabled > * { pointer-events: none; }

.thread-tokens-container { display: flex; gap: 4px; cursor: pointer; }

.tokens-count { font-family: var(--monospace); font-size: 12px; color: var(=
--gray-900); font-weight: 600; }

.tokens-label { font-family: var(--monospace); font-size: 12px; color: var(=
--text-default); }

.tokens-tooltip { width: 65px; font-size: 12px; color: var(--gray-900); }

.add-message-section.user-input { padding: 20px; transition: border-color 0=
.15s ease-in-out, box-shadow 0.15s ease-in-out; border-radius: 12px; border=
: 1px solid var(--gray-200); box-sizing: border-box; background-color: var(=
--bg-color); }

.add-message-section.user-input.blocked, .add-message-section.user-input.di=
sabled { cursor: default; }

.add-message-section.user-input.blocked { opacity: 0.6; }

.add-message-section.user-input textarea { resize: none; padding-right: 8px=
; margin-top: 3px; margin-bottom: 12px; background-color: transparent; max-=
height: 200px; overflow: auto; }

.add-message-section.user-input textarea::placeholder { color: var(--text-d=
isabled); }

.add-message-section.user-input .user-input-label { font-size: 14px; line-h=
eight: 20px; }

.add-message-section.user-input .assistants-mm-input { margin-bottom: 8px; =
overflow: auto; max-height: 180px; }

.add-message-section.user-input .assistants-pg-input { flex: 1 1 0%; font-s=
ize: 16px; line-height: 20px; border: none; outline: none; padding: 0px; bo=
rder-radius: 0px; width: 100%; }

.add-message-section.user-input .assistants-pg-input:focus, .add-message-se=
ction.user-input .assistants-pg-input:active, .add-message-section.user-inp=
ut .assistants-pg-input:focus-visible { border: none; outline: none; box-sh=
adow: none; }

.add-message-section.user-input .flex-footer { margin-top: 8px; display: fl=
ex; justify-content: space-between; }

.add-message-section.user-input .thread-input-button-group { display: flex;=
 align-items: center; justify-content: space-between; }

.add-message-section.user-input:focus-within { border-color: var(--input-bo=
rder-focus); box-shadow: var(--input-focus-ring); outline: 0px; }

.assistant-log-panel { display: flex; flex-flow: column; height: 100%; }

.assistant-log-panel .cm-scroller { margin-left: 20px; }

.assistant-log-panel .assistant-logs { margin: 0px; overflow: auto; }

.assistant-log-panel .assistant-logs .log-item { padding: 6px 12px; }

.assistant-log-panel .assistant-logs .log-context { font-size: 14px; margin=
-left: 10px; margin-top: 20px; display: flex; justify-content: space-betwee=
n; color: var(--text-primary); }

.assistant-log-panel .assistant-logs .log-context-status { margin-left: 4px=
; font-family: var(--sans-serif); font-weight: 600; }

.assistant-log-panel .assistant-logs .run-tokens-container { display: flex;=
 gap: 4px; align-items: center; font-family: var(--monospace); cursor: poin=
ter; }

.assistant-log-panel .assistant-logs .log-item-header { font-family: var(--=
monospace); font-size: 12px; display: flex; align-items: start; cursor: poi=
nter; font-weight: 400; padding-bottom: 4px; margin-left: 6px; }

.assistant-log-panel .assistant-logs .log-item-header .log-item-description=
 { display: flex; align-items: center; gap: 8px; color: var(--text-default)=
; font-family: var(--sans-serif); font-size: 12px; font-style: normal; font=
-weight: 500; }

.assistant-log-panel .assistant-logs .log-item-header .log-item-description=
:hover { color: var(--text-secondary); }

.assistant-log-panel .assistant-logs .log-item-header .log-item-endpoint { =
width: 100%; white-space: normal; word-break: break-all; line-height: 10px;=
 color: var(--text-secondary); }

.assistant-log-panel .assistant-logs .log-item-header .log-item-toggle { ma=
rgin-top: 1px; font-size: 16px; color: var(--text-secondary); opacity: 0.7;=
 }

.assistant-log-panel .assistant-logs .log-item-streaming-indicator { displa=
y: flex; line-height: 12px; gap: 4px; color: var(--gray-600); }

.assistant-log-panel .assistant-logs .log-item-header .request-type { paddi=
ng-right: 6px; }

.assistant-log-panel .assistant-logs .log-item-header .request-type.get { c=
olor: var(--green-600); }

.assistant-log-panel .assistant-logs .log-item-header .request-type.post { =
color: rgb(60, 70, 255); }

.assistant-log-panel .assistant-logs .log-data { font-size: 12px; line-heig=
ht: 18px; display: flex; flex-direction: column; gap: 16px; }

.assistant-log-panel .assistant-logs .log-data .log-data-header { margin-le=
ft: 22px; margin-bottom: 4px; margin-top: 4px; color: var(--text-secondary)=
; font-family: var(--monospace); font-size: 12px; font-style: normal; font-=
weight: 400; line-height: 16px; }

.assistant-log-panel .assistant-logs .log-data .syntax-highlighter { backgr=
ound-color: var(--bg-color); color: var(--text-default); margin: 0px; overf=
low: visible; }

@media (max-width: 1000px) {
  .assistants-playground-button-section { display: none; }
  .assistant-playground-container { width: 100%; }
  .assistant-playground-container .assistants-panel-handle { display: none =
!important; }
  .assistant-playground-container .pg-and-logs .interactive-thread-panel { =
margin-left: 0px; }
}

.tool-file-row-wrapper { display: flex; gap: 4px; align-items: center; max-=
width: 100%; width: fit-content; border-radius: 6px; padding-right: 4px; }

.tool-file-row-wrapper:hover { background-color: var(--gray-100); }

.tool-file-row-name { overflow: hidden; text-overflow: ellipsis; white-spac=
e: nowrap; }

.tool-file-row-action-icon { margin-top: 2px; }

.message-file-menu .message-file-menu-header { font-size: 12px; font-weight=
: 500; line-height: 16px; }

.message-file-menu .message-file-menu-checkbox { font-size: 14px; font-styl=
e: normal; font-weight: 400; line-height: 20px; }

.message-file-menu .message-file-menu-actions { display: flex; justify-cont=
ent: space-between; align-items: center; font-size: 14px; font-style: norma=
l; font-weight: 400; line-height: 20px; }

.message-file-menu .message-file-menu-danger { color: var(--red-600); }

.thread-file-list-wrapper { margin-top: 4px; margin-bottom: 16px; }

.thread-files-popover { padding: 12px; width: 240px; }

.thread-files-popover.no-files-message { font-size: 14px; color: var(--text=
-secondary); font-weight: 400; line-height: 20px; width: max-content; }

.thread-files-popover .thread-files-popover-header { color: var(--text-seco=
ndary); font-size: 12px; font-style: normal; font-weight: 500; line-height:=
 16px; }

.thread-files-popover .thread-files-popover-section { margin-top: 8px; padd=
ing-top: 8px; border-top: 1px solid var(--gray-100); }

.thread-files-popover .thread-files-popover-section-header { display: flex;=
 align-items: center; justify-content: space-between; color: var(--gray-800=
); font-size: 14px; font-weight: 500; line-height: 20px; }

.thread-files-popover .thread-vector-store-wrapper { width: 100%; display: =
flex; gap: 8px; align-items: center; cursor: pointer; }

.thread-files-popover .thread-vector-store-id { text-overflow: ellipsis; ov=
erflow: hidden; white-space: nowrap; }

.status-button { position: relative; }

.status-indicator { position: absolute; top: -4px; right: -4px; width: 10px=
; height: 10px; background-color: var(--red-500); border-radius: 50%; borde=
r: 1.5px solid var(--bg-color); }

.threads-detail-page { overflow: auto; height: 100%; width: 100%; font-size=
: 16px; margin-left: -26px; margin-right: -26px; padding-left: 26px; paddin=
g-right: 26px; }

.threads-detail-page > * { padding: 12px 0px; }

.threads-detail-page .function-output, .threads-detail-page .full-query, .t=
hreads-detail-page .pre-query, .threads-detail-page .monospace { font-size:=
 14px; }

.threads-detail-page .displayable-image img, .threads-detail-page .external=
-image img { width: 100%; max-width: 120px; border-radius: 8px; }

.threads-detail-page .thread-detail-field-value { color: var(--text-primary=
); margin-left: 12px; }

.threads-detail-page .thread-detail-file-search-field { display: flex; alig=
n-items: center; gap: 4px; }

.threads-detail-page .thread-detail-field-empty { color: var(--text-seconda=
ry); margin-left: 12px; }

.threads-detail-page .thread-detail-field-list-value { color: var(--text-pr=
imary); margin-left: 12px; display: flex; flex-direction: column; }

.threads-detail-page .thread-detail-id-format { font-family: var(--monospac=
e); }

.threads-detail-page .thread-detail-link-format { color: var(--green-600); =
cursor: pointer; }

.threads-detail-page .thread-detail-expand-metadata { display: flex; align-=
items: center; gap: 8px; cursor: pointer; color: var(--text-secondary); }

.thread-list-item .thread-list-item-title { color: var(--text-default); fon=
t-weight: 600; font-size: 13px; text-overflow: ellipsis; white-space: nowra=
p; overflow: hidden; }

.thread-list-item .thread-list-item-subheading { display: flex; justify-con=
tent: space-between; color: var(--text-secondary); font-size: 12px; line-he=
ight: 16px; }

.thread-list-item .thread-list-subheading-id { font-family: var(--monospace=
); }

.thread-list-item .dot-divider { padding: 0px 10px; font-size: 8px; top: -2=
px; position: relative; }

.thread-list-divider { font-size: 12px; line-height: 16px; color: var(--tex=
t-secondary); font-weight: 600; }

.thread-messages { flex: 1 1 0%; padding: 6px 40px 20px; overflow: auto; di=
splay: flex; align-items: center; flex-direction: column; position: relativ=
e; }

.thread-messages .thread-item { font-size: 16px; line-height: 16px; padding=
: 16px 0px; }

.thread-messages .thread-message-waiting { display: flex; padding: 12px 0px=
; }

.thread-messages .thread-item-header-author { font-weight: 500; font-size: =
14px; line-height: 16px; }

.thread-messages .displayable-image img, .thread-messages .external-image i=
mg { width: 100%; max-width: 120px; border-radius: 8px; }

.thread-messages code { background-color: unset; }

.thread-tokens-tooltip { width: 65px; }

.thread-tokens-count { font-family: var(--monospace); font-size: 12px; colo=
r: var(--text-primary); font-weight: 600; }

.thread-tokens-label { font-family: var(--monospace); font-size: 12px; colo=
r: var(--text-secondary); }

.thread-tokens-container { display: flex; gap: 4px; align-items: center; cu=
rsor: pointer; }

.thread-file-count-badge { background-color: var(--green-600); color: rgb(2=
55, 255, 255); font-size: 11px; font-weight: 500; border-radius: 6px; paddi=
ng: 3px 8px; justify-content: center; align-items: center; line-height: 16p=
x; }

.thread-files-count-tooltip { display: flex; flex-direction: row; gap: 4px;=
 align-items: center; }

.thread-detail-header { display: flex; justify-content: space-between; alig=
n-items: center; }

.thread-id-label { font-weight: 600; font-family: var(--monospace); font-si=
ze: 13px; display: flex; gap: 4px; }

.thread-files-button-content { display: flex; align-items: center; gap: 4px=
; }

.thread-files-button-content .thread-files-button-storage-icon-wrapper { di=
splay: flex; position: relative; }

.empty-thread-details-page { display: flex; flex-direction: column; height:=
 100%; }

.thread-detail-messages-title { font-weight: 500; }

.thread-detail { padding: 0px; position: relative; width: 100%; }

.thread-detail .thread-content-container-left { display: flex; flex-directi=
on: column; align-items: flex-start; flex: 1 1 0%; }

.thread-detail .thread-content-container-center { display: flex; flex-direc=
tion: column; align-items: center; flex: 1 1 0%; max-width: 712px; margin: =
0px auto; }

.thread-detail .thread-action-section { display: flex; gap: 8px; }

.thread-detail .capped-thread { padding: 12px 0px; font-size: 12px; font-st=
yle: italic; text-align: center; }

.thread-detail .thread-item { padding: 12px 0px; width: 100%; }

.thread-detail .thread-item .markdown-content p { margin-bottom: 0px; }

.thread-detail .thread-item .markdown-content p code { font-size: 13px; lin=
e-height: 1.4em; }

.thread-detail .thread-item .markdown-content .code-sample { margin-top: 20=
px; }

.thread-detail .thread-item .file-list-wrapper, .thread-detail .thread-item=
 .file-name-section { margin-bottom: 0px; }

.thread-detail .thread-item .run-instructions { border-radius: 8px; padding=
: 10px 20px; margin: 0px -20px; font-size: 16px; line-height: 1.5; }

.thread-detail .thread-item .run-instructions .header { font-size: 14px; fo=
nt-weight: 700; display: flex; justify-content: space-between; align-items:=
 center; }

.thread-detail .thread-item .run-instructions .expand-button { margin-right=
: -10px; }

.thread-detail .thread-item .run-instructions .instruction-content { height=
: 28px; overflow: hidden; white-space: nowrap; text-overflow: ellipsis; }

.thread-detail .thread-item .run-instructions .instruction-content.expanded=
 { overflow: visible; white-space: normal; height: max-content; min-height:=
 28px; }

.thread-detail .thread-item-header { display: flex; justify-content: space-=
between; }

.thread-detail .thread-item-header-author { font-size: 14px; font-weight: 7=
00; padding: 4px 0px; }

.thread-detail .thread-item-timestamp { font-size: 12px; color: var(--text-=
secondary); align-items: flex-start; display: flex; padding: 4px 0px; }

.thread-detail .thread-run-header { display: flex; justify-content: space-b=
etween; gap: 24px; align-items: baseline; }

.thread-detail .thread-run-header .thread-item-left { flex: 1 1 0%; min-wid=
th: 100px; align-items: flex-start; }

.thread-detail .thread-run-header .monospace-query { font-weight: 700; font=
-family: var(--monospace); font-size: 14px; }

.thread-detail .thread-run-header .pre-query { white-space: pre; font-famil=
y: var(--monospace); width: 100%; }

.thread-detail .thread-run-header .pre-query pre { padding: 8px 16px; borde=
r-radius: 8px; width: 100%; margin-top: 4px; margin-bottom: 0px; }

.thread-detail .thread-run-header .expanded-query { overflow-y: auto; width=
: 100%; }

.thread-detail .thread-run-header .tool-row { display: flex; align-items: c=
enter; gap: 8px; }

.thread-detail .thread-run-header .function-parameters { font-weight: 400; =
text-overflow: ellipsis; white-space: nowrap; overflow: hidden; min-width: =
0px; flex: 1 1 0%; color: var(--text-secondary); font-size: 14px; }

.thread-detail .thread-run-header .code-parameters { white-space: nowrap; o=
verflow: hidden; text-overflow: ellipsis; cursor: pointer; border-bottom: 1=
px solid transparent; }

.thread-detail .thread-run-header .code-parameters:hover { border-bottom: 1=
px solid var(--gray-200); }

.thread-detail .thread-content { margin: 4px 0px; display: flex; flex-direc=
tion: column; gap: 4px; overflow-wrap: break-word; }

.thread-detail .thread-content .markdown-with-citation .bottom-citations { =
font-size: 12px; padding-top: 6px; }

.thread-detail .thread-content .markdown-with-citation .citation-file { fon=
t-weight: 500; font-family: var(--monospace); }

.thread-detail .thread-content .markdown-with-citation .citation-index { fo=
nt-family: var(--monospace); cursor: pointer; }

.thread-detail .full-query { display: flex; flex-wrap: nowrap; overflow: hi=
dden; font-family: var(--monospace); font-size: 13px; }

.thread-detail .pre-query, .thread-detail .expanded-query, .thread-detail .=
monospace { font-size: 14px; }

.thread-detail .thread-run-instructions { font-size: 13px; border-left: 1px=
 solid var(--gray-200); margin-left: 7px; padding-left: 11px; line-height: =
14px; margin-top: -5px; margin-bottom: -7px; padding-top: 5px; padding-bott=
om: 7px; }

.thread-detail .thread-run-instructions.has-dt { margin-right: 120px; }

.thread-detail .thread-run-instructions.no-content { min-height: 6px; paddi=
ng-top: 0px; padding-bottom: 0px; }

.thread-detail .thread-run-item { padding: 12px 0px; width: 100%; }

.thread-detail .thread-item-left { display: flex; flex-flow: row; gap: 4px;=
 align-items: center; font-size: 14px; }

.thread-detail .thread-item-left .run-status { min-width: 0px; display: fle=
x; }

.thread-detail .function-output { color: var(--text-default); flex: 1 1 0%;=
 font-family: var(--monospace); display: flex; min-width: 0px; line-height:=
 26px; font-size: 14px; }

.thread-detail .function-output .expand-output { cursor: pointer; position:=
 relative; top: 3px; margin-right: 6px; display: inline-block; margin-left:=
 2px; }

.thread-detail .function-output .expanded { white-space: pre; line-height: =
16px; margin-top: 7px; }

.thread-detail .function-output .expanded.code { white-space: pre; }

.thread-detail .function-output .expanded.function { white-space: break-spa=
ces; }

.thread-detail .output { white-space: nowrap; overflow: hidden; text-overfl=
ow: ellipsis; display: inline-block; margin-top: 2px; margin-bottom: -2px; =
}

.thread-detail .run-orb { color: var(--gray-200); font-size: 12px; }

.thread-detail .run-orb.completed { color: var(--green-500); }

.thread-detail .run-orb.failed { color: var(--red-500); }

.run-status.currently-running { font-size: 16px; display: flex; gap: 8px; c=
olor: var(--text-default); }

.thread-detail .thread-item:last-child { margin-bottom: 12px; }

.thread-skeleton { display: flex; flex-flow: column; gap: 12px; }
------MultipartBoundary--PgNM4SiMWaLkxzj6oY7Q8DPIEjAagNM0CL6X4tuFha----
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: https://platform.openai.com/static/ClMWlNVw6I.css

@charset "utf-8";

.qB3Oq { display: inline-flex; position: relative; border-radius: 6px; padd=
ing: 3px 6px; align-items: center; gap: 4px; font-family: var(--sans-serif)=
; font-size: 12px; line-height: 12px; font-style: normal; font-weight: 500;=
 letter-spacing: normal; }

.CpSLf { color: var(--red-700); background-color: var(--red-100); }

._53-Tx { color: var(--green-800); background-color: var(--green-100); }

.-bDhN { color: rgb(148, 94, 12); background-color: rgb(255, 232, 196); }

.GN5cV { color: var(--gray-800); background-color: var(--gray-100); }

.F0sDe { color: var(--text-default); font-family: var(--monospace); font-si=
ze: 13px; font-style: normal; font-weight: 400; line-height: 20px; }

.-dt1G .modal-dialog { max-height: calc(-40px + 100vh); display: flex; flex=
-direction: column; }

@media (max-width: 576px) {
  .-dt1G .modal-dialog { height: calc(-28px + 100vh); margin-bottom: 8px; }
}

._3IuCS { font-size: 14px; padding: 4px 24px 20px; }

._6f5Ma { border-bottom: 1px solid var(--divider); margin-bottom: 16px; pad=
ding: 20px 24px 16px; gap: 8px 24px; display: grid; grid-template-columns: =
1fr auto; }

@media (max-width: 768px) {
  ._6f5Ma { padding: 16px 20px; }
}

.-T-Fi { font-size: 18px; line-height: 1; font-weight: 500; margin: 0px; gr=
id-area: 1 / 1; }

.b6-ZU { font-size: 14px; grid-area: 2 / 1; }

@media (max-width: 768px) {
  .b6-ZU { grid-column: 1 / span 2; }
}

._0bvJD { flex: 1 1 0%; align-self: flex-end; grid-area: span 2 / 2; displa=
y: flex; justify-content: center; align-items: center; line-height: 1; marg=
in: -6px -12px; }

@media (max-width: 768px) {
  ._0bvJD { grid-area: 1 / 2; }
}

.XW6Va { padding: 0px 24px 0px 0px; height: 700px; margin: 0px; overflow: a=
uto; }

@media (max-width: 576px) {
  .XW6Va { flex: 1 1 0%; height: 100%; }
}

.BDi3i { width: 100%; }

.BDi3i .=CD=BC1 .cm-gutters, .BDi3i .=CD=BC2 .cm-gutters { background-color=
: transparent; padding-left: 10px; }

.BDi3i .=CD=BC2 .cm-gutters { border-right: none; }

.BDi3i .cm-lineNumbers { color: var(--text-disabled); min-width: 24px; }

.BDi3i .cm-activeLine { background-color: transparent; }

.BDi3i .cm-editor { font-family: "S=C3=B6hne Mono", monospace; font-size: 1=
3px; height: 100%; border-radius: 8px; margin: 0px; background-color: trans=
parent; }

.BDi3i .cm-editor.cm-focused { outline: none; }

.BDi3i .cm-gutterelement.cm-activelinegutter { margin-top: 0px; background-=
color: transparent; }

.BDi3i .cm-gutterElement .cm-activeLineGutter, .BDi3i .=CD=BCo .cm-activeLi=
neGutter, .BDi3i .=CD=BC2 .cm-activeLineGutter { background-color: transpar=
ent; }

.BDi3i .=CD=BC1 .cm-content { padding: 0px; }

.BDi3i .cm-gutterElement > span[title=3D"Fold line"] { position: relative; =
top: -4px; }

@keyframes fbd7o {=20
  0% { opacity: 0; height: 0px; }
  100% { opacity: 1; height: 18.2px; }
}

.O4QSI .=CD=BC1 .cm-gutters, .O4QSI .=CD=BC2 .cm-gutters { background-color=
: transparent; padding-left: 20px; }

.O4QSI .=CD=BC2 .cm-gutters { border-right: none; }

.O4QSI .cm-lineNumbers { color: var(--text-disabled); min-width: 24px; }

.O4QSI .cm-activeLine { background-color: transparent; }

.O4QSI .cm-editor { font-family: "S=C3=B6hne Mono", monospace; font-size: 1=
3px; height: 100%; border-radius: 8px; margin: 0px; background-color: trans=
parent; }

.O4QSI .cm-editor.cm-focused { outline: none; }

.O4QSI .cm-gutterelement.cm-activelinegutter { margin-top: 0px; background-=
color: transparent; }

.O4QSI .cm-gutterElement .cm-activeLineGutter, .O4QSI .=CD=BCo .cm-activeLi=
neGutter, .O4QSI .=CD=BC2 .cm-activeLineGutter { background-color: transpar=
ent; }

.O4QSI .=CD=BC1 .cm-content { padding: 0px; }

.O4QSI .cm-gutterElement > span[title=3D"Fold line"] { position: relative; =
top: -4px; }

.O4QSI .cm-line { padding: 0px 14px; }

.O4QSI .cm-line:nth-child(4), .O4QSI .cm-line:nth-child(12), .O4QSI .cm-lin=
e:nth-child(13), .O4QSI .cm-line:nth-child(14) { opacity: 0; height: 0px; o=
verflow: hidden; animation-name: fbd7o; animation-fill-mode: forwards; anim=
ation-timing-function: cubic-bezier(0.19, 1, 0.22, 1); animation-delay: 0.5=
s; animation-duration: 0.5s; }

.O4QSI .cm-line:nth-child(4) { animation-delay: 0.5s; }

.O4QSI .cm-line:nth-child(12) { animation-delay: 1s; }

.O4QSI .cm-line:nth-child(13) { animation-delay: 1.5s; }

.O4QSI .cm-line:nth-child(14) { animation-delay: 1s; }

.O4QSI .cm-line:nth-child(4), .O4QSI .cm-line:nth-child(12), .O4QSI .cm-lin=
e:nth-child(14) { background-color: color-mix(in srgb,transparent,var(--gre=
en-400) 20%); }

.O4QSI .cm-line:nth-child(13) { color: var(--gray-500); }

.TdcFe { border-radius: 6px; background: var(--gray-100); height: 24px; wid=
th: 24px; padding: 5px; margin-right: 8px; }

.fNTUB { margin: 8px 0px; display: flex; align-items: center; cursor: point=
er; font-family: var(--monospace); font-size: 12px; }

.fNTUB:last-of-type { margin-bottom: 12px; }

.oiHUK.oiHUK { height: 24px; width: 24px; opacity: 0; display: flex; align-=
items: center; transition-property: all; transition-timing-function: cubic-=
bezier(0.19, 1, 0.22, 1); }

.fNTUB:hover .oiHUK.oiHUK { opacity: 1; }
------MultipartBoundary--PgNM4SiMWaLkxzj6oY7Q8DPIEjAagNM0CL6X4tuFha----
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: https://platform.openai.com/static/n_kD_qxQv4.css

@charset "utf-8";

.engine-select-error-message { font-size: 12px; color: var(--red-600); marg=
in-left: 16px; }
------MultipartBoundary--PgNM4SiMWaLkxzj6oY7Q8DPIEjAagNM0CL6X4tuFha----
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: https://platform.openai.com/static/ByLAYaBHjX.css

@charset "utf-8";

.react-json-view { font-family: var(--monospace); line-height: 1.5; margin-=
left: 30px; letter-spacing: normal !important; font-weight: 400 !important;=
 background-color: transparent !important; }

.react-json-view .node-ellipsis { font-size: 12px !important; line-height: =
1.5 !important; }

.react-json-view .icon-container { margin-left: -12px !important; width: 12=
px !important; }

.object-key { letter-spacing: normal !important; }

.object-key-val { letter-spacing: normal !important; padding-top: 0px !impo=
rtant; padding-bottom: 0px !important; }

.variable-row { font-family: var(--monospace); padding-top: 0px !important;=
 padding-bottom: 0px !important; letter-spacing: normal !important; }

.variable-value { background-color: transparent !important; }
------MultipartBoundary--PgNM4SiMWaLkxzj6oY7Q8DPIEjAagNM0CL6X4tuFha----
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: https://platform.openai.com/static/BXOTrjUPKH.css

@charset "utf-8";

@keyframes line-1-animation {=20
  0% { d: path("M 2.18408 7 L 2.18408 9"); }
  50% { d: path("M 2 6 L 2 10"); }
  100% { d: path("M 2 5 L 2 11"); }
}

@keyframes line-2-animation {=20
  0% { d: path("M 5.18408 6 L 5.18408 10"); }
  50% { d: path("M 5 8 L 5 8.5"); }
  100% { d: path("M 5 8 L 5 9"); }
}

@keyframes line-3-animation {=20
  0% { d: path("M 8.18408 4 L 8.18408 12"); }
  50% { d: path("M 8 5 L 8 11"); }
  100% { d: path("M 8 6 L 8 10"); }
}

@keyframes line-4-animation {=20
  0% { d: path("M 11.1841 7 L 11.1841 9"); }
  50% { d: path("M 11 7 L 11 10"); }
  100% { d: path("M 11 6 L 11 11"); }
}

@keyframes line-5-animation {=20
  0% { d: path("M 14.1841 6 L 14.1841 10"); }
  50% { d: path("M 14 5 L 14 11"); }
  100% { d: path("M 14 4 L 14 12"); }
}

.animated-wave { display: flex; }

.animated-wave #line1 { animation: 0.6s ease-in-out 0s infinite alternate n=
one running line1Animation; }

.animated-wave #line2 { animation: 0.6s ease-in-out 1ms infinite alternate =
none running line-2-animation; }

.animated-wave #line3 { animation: 0.6s ease-in-out 1ms infinite alternate =
none running line-3-animation; }

.animated-wave #line4 { animation: 0.6s ease-in-out 1ms infinite alternate =
none running line-4-animation; }

.animated-wave #line5 { animation: 0.6s ease-in-out 1ms infinite alternate =
none running line-5-animation; }
------MultipartBoundary--PgNM4SiMWaLkxzj6oY7Q8DPIEjAagNM0CL6X4tuFha----
Content-Type: image/png
Content-Transfer-Encoding: base64
Content-Location: https://lh3.googleusercontent.com/a/ACg8ocKMevoGbbuUH7ULHFj8fnqjxu73L4vvb73KEJCDOvJFWhgjzQ=s96-c

iVBORw0KGgoAAAANSUhEUgAAAGAAAABgCAIAAABt+uBvAAAAA3NCSVQICAjb4U/gAAAABmJLR0QA
AACXAKdJrSNBAAAEXUlEQVR4nO3cXUyTZxTA8fO2pQVrbQbabaBWKogy+dRKB8SvMHVL5mYM0xAX
l7klhLhptmSZ80qSiXMXmxqzZGTLplGyeLEZx1VxY0IxoAW2YbshxIqFIR9qrU0txbILktenIJxd
bM/zLDn/q76nJZz8Qp/SkqDAF3VAzZxG9AKyR0BIBIREQEgEhERASASEREBIBIREQEgEhERASASE
REBIBIREQEgEhERASASEREBIBIREQEgEhERASASEREBIBIREQEgEhKTj8D3ObSrZlr5QvWy9PVry
Q8M//3JLkqH51TLbvLnqJBgd39Vwub5v4N/ccoZ4AGkVRasojy81yiwPnt65TaWZZpN6OR6b+OzX
P/jogPxPsa/Xr1n77AJ28l1vX7X7GrcFpAb6sGDF68vS2UnL4Miui5d57iAv0CtL0g4UZOuY56Mv
GNrhdHFeQ1Igm8l4rKRwnj5BnQTGou82u/2hMOdNJAU6+0Kx1WRUL6Ox2OF2z4WbnA5mNhmB6sqK
iywp7OTUn76jnV4hy0gHdGj1yvKli9hJ48DQW7+0idpHLqCKDOv7+cvZX5p6Ag/4H8xsEgHlJps/
fT7fqHv8u+udyFhV05WhcETgVhIBfbPRkWpMUi/HYrFDV7uc/tsCVwJ5gL7fXFow/yn1cgKg1tN7
/PdugStNJgXQUUfe1iVp7MR5a3Bvs1vUPmzigfYst+1duUzDHMzeu/c31zeK2yguwUAOS8rhorwk
nVadDIcjb4t7UZ8ej487ppRpNnWWb5m8vSDRYEkyqHc9fPToYNtvrsER/lvNlACgZIM+2aB/4l0n
u67Xens57zN74s8gtsVzjfiD+CYX0Hbbwo/X5IreIi4BT7GewIOL/YOTtxVQdmYsVj/W0CjK/tys
7nvBb7tv8F/siQkAGo1EKi9dVS99wVC1PUf9YGyOTnvEkee5G7gyfIf/btMT/xSr6fCc7fGxk2fm
JH61oUjQOlMTDwQAu39qbYl/ac9JNv/44lpR+7BJAQQAO5wuXzDETl6ypn5eUihqHzVZgPyh8H5X
+/2xqDpRACqzM6qeyxC4FcgDBADnff01HZ7x2IQ6MWg11fbc9akWgVtJBAQARzq8Z6772ElKov7L
dXZTgoBX28nkAgKAN35unfJeLNNsOr9F2IEtHRAA7HS6bsQf2BvSLLXr7EKWkRHIHwrva3YHmAMb
AHZnpX+Qv4L/MjICAcCFmwM17XEHdoJG81Fh9svWVM6bSAoEAJ90ek/HvyMz6xNOlK6ymbi+45cX
CADebGxr+muYnVhNxjNlxTx3kBoIACoaWqYc2I6nU+o4GskO5A+F32ly34s/sMuXLqq25/BZQHYg
AKjvG6hp90RjMXWiVZT38rJei/8T/n+UQv+ia/b+Bz9BYiMgJAJCIiAkAkIiICQCQiIgJAJCIiAk
AkIiICQCQiIgJAJCIiAkAkIiICQCQiIgJAJCIiAkAkIiICQCQiIgJAJCIiCkvwEofxO8IBxN9AAA
AABJRU5ErkJggg==

------MultipartBoundary--PgNM4SiMWaLkxzj6oY7Q8DPIEjAagNM0CL6X4tuFha----
Content-Type: text/html
Content-ID: <frame-F1FB3DB8C42C57915B3C00BC97E0AF7F@mhtml.blink>
Content-Transfer-Encoding: quoted-printable

<html lang=3D"en"><head><meta http-equiv=3D"Content-Type" content=3D"text/h=
tml; charset=3DUTF-8">
       =20
      </head>
      <body>
     =20
    </body></html>
------MultipartBoundary--PgNM4SiMWaLkxzj6oY7Q8DPIEjAagNM0CL6X4tuFha------
